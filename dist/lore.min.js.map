{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app.js","src/Cameras/CameraBase.js","src/Cameras/OrthographicCamera.js","src/Cameras/PerspectiveCamera.js","src/Cameras/index.js","src/Controls/ControlsBase.js","src/Controls/FirstPersonControls.js","src/Controls/OrbitalControls.js","src/Controls/index.js","src/Core/Attribute.js","src/Core/Color.js","src/Core/DrawModes.js","src/Core/Effect.js","src/Core/Geometry.js","src/Core/Graph.js","src/Core/Node.js","src/Core/Renderer.js","src/Core/Shader.js","src/Core/Tree.js","src/Core/Uniform.js","src/Core/index.js","src/Filters/FilterBase.js","src/Filters/InRangeFilter.js","src/Filters/index.js","src/Helpers/AABBHelper.js","src/Helpers/CoordinatesHelper.js","src/Helpers/HelperBase.js","src/Helpers/OctreeHelper.js","src/Helpers/PointHelper.js","src/Helpers/TreeHelper.js","src/Helpers/index.js","src/IO/CsvFileReader.js","src/IO/FileReaderBase.js","src/IO/MatrixFileReader.js","src/IO/index.js","src/Lore.js","src/Math/Matrix3f.js","src/Math/Matrix4f.js","src/Math/ProjectionMatrix.js","src/Math/Quaternion.js","src/Math/RadixSort.js","src/Math/Ray.js","src/Math/SphericalCoords.js","src/Math/Statistics.js","src/Math/Vector3f.js","src/Math/index.js","src/Shaders/Circle.js","src/Shaders/Coordinates.js","src/Shaders/Default.js","src/Shaders/DefaultAnimated.js","src/Shaders/DefaultEffect.js","src/Shaders/FXAAEffect.js","src/Shaders/SimpleSphere.js","src/Shaders/SmoothCircle.js","src/Shaders/Sphere.js","src/Shaders/Tree.js","src/Shaders/index.js","src/Spice/AABB.js","src/Spice/Octree.js","src/Spice/Raycaster.js","src/Spice/index.js","src/Utils/Utils.js","src/Utils/index.js"],"names":[],"mappings":"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","file":"lore.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","//@ts-check\r\n\r\n// Detect SSR (server side rendering)\r\nvar canUseDOM = !!(\r\n  (typeof window !== 'undefined' &&\r\n    window.document && window.document.createElement)\r\n);\r\n\r\nvar Lore = require('./src/Lore');\r\n\r\n// By Shmiddty from stackoverflow\r\nfunction Enum(a) {\r\n  let i = Object\r\n    .keys(a)\r\n    .reduce((o, k) => (o[a[k]] = k, o), {});\r\n\r\n  return Object.freeze(\r\n    Object.keys(a).reduce((o, k) => (o[k] = a[k], o), v => i[v])\r\n  );\r\n}\r\n\r\nLore.Mouse = Enum({\r\n  Left: 0,\r\n  Middle: 1,\r\n  Right: 2\r\n});\r\n\r\nLore.Keyboard = Enum({\r\n  Backspace: 8,\r\n  Tab: 9,\r\n  Enter: 13,\r\n  Shift: 16,\r\n  Ctrl: 17,\r\n  Alt: 18,\r\n  Esc: 27\r\n});\r\n\r\nLore.init = function (canvas, options) {\r\n  this.opts = Lore.Utils.extend(true, Lore.defaults, options);\r\n\r\n  // Lore.getGrakaInfo(canvas);\r\n\r\n  var cc = Lore.Core.Color.fromHex(this.opts.clearColor);\r\n\r\n  if (!(canvas instanceof Element)) {\r\n    canvas = document.getElementById(canvas);\r\n  }\r\n\r\n  var renderer = new Lore.Core.Renderer(canvas, {\r\n    clearColor: cc,\r\n    verbose: true,\r\n    fps: document.getElementById('fps'),\r\n    center: new Lore.Math.Vector3f(125, 125, 125),\r\n    antialiasing: this.opts.antialiasing,\r\n    alphaBlending: this.opts.alphaBlending,\r\n    preserveDrawingBuffer: this.opts.preserveDrawingBuffer\r\n  });\r\n\r\n  renderer.controls.limitRotationToHorizon(this.opts.limitRotationToHorizon);\r\n\r\n  renderer.render = function (camera, geometries) {\r\n    for (var key in geometries) {\r\n      geometries[key].draw(renderer);\r\n    }\r\n  }\r\n\r\n  return renderer;\r\n}\r\n\r\nLore.getGrakaInfo = function (targetId) {\r\n  let canvas = document.getElementById(targetId);\r\n  let gl = canvas.getContext('webgl') ||\r\n    canvas.getContext('experimental-webgl');\r\n\r\n  let info = {\r\n    renderer: '',\r\n    vendor: ''\r\n  };\r\n\r\n  let dbgRenderInfo = gl.getExtension('WEBGL_debug_renderer_info');\r\n\r\n  if (dbgRenderInfo != null) {\r\n    info.renderer = gl.getParameter(dbgRenderInfo.UNMASKED_RENDERER_WEBGL);\r\n    info.vendor = gl.getParameter(dbgRenderInfo.UNMASKED_VENDOR_WEBGL);\r\n  }\r\n\r\n  return info;\r\n}\r\n\r\nLore.supportsHighQuality = function (targetId) {\r\n  let info = Lore.getGrakaInfo(targetId);\r\n\r\n\r\n  return false;\r\n}\r\n\r\nLore.defaults = {\r\n  clearColor: '#121212',\r\n  limitRotationToHorizon: false,\r\n  antialiasing: false,\r\n  preserveDrawingBuffer: false\r\n};\r\n\r\nif (canUseDOM) {\r\n  window['Lore'] = Lore\r\n}\r\n\r\nmodule.exports = Lore","//@ts-check\r\n\r\nconst Node = require('../Core/Node');\r\nconst ProjectionMatrix = require('../Math/ProjectionMatrix');\r\nconst Matrix4f = require('../Math/Matrix4f');\r\nconst Vector3f = require('../Math/Vector3f');\r\n\r\n/** \r\n * An abstract class representing the base for camera implementations. \r\n * \r\n * @property {string} type The type name of this object (Lore.CameraBase).\r\n * @property {Renderer} renderer A Lore.Renderer object.\r\n * @property {boolean} isProjectionMatrixStale A boolean indicating whether or not the projection matrix was changed and has to be updated.\r\n * @property {ProjectionMatrix} projectionMatrix A Lore.ProjectionMatrix object.\r\n * @property {Matrix4f} viewMatrix A Lore.Matrix4f object representing the view matrix for this camera.\r\n * */\r\nclass CameraBase extends Node {\r\n  /**\r\n   * Creates an instance of CameraBase.\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    this.type = 'Lore.CameraBase';\r\n    this.renderer = null;\r\n    this.isProjectionMatrixStale = false;\r\n    this.isViewMatrixStale = false;\r\n    this.projectionMatrix = new ProjectionMatrix();\r\n    this.viewMatrix = new Matrix4f();\r\n    this.near = 0.0;\r\n    this.far = 1000.0;\r\n    this._eventListeners = {};\r\n  }\r\n\r\n  /**\r\n   * Initializes this camera instance.\r\n   * \r\n   * @param {any} gl A gl context.\r\n   * @param {any} program A program pointer.\r\n   * @returns {CameraBase} Returns itself.\r\n   */\r\n  init(gl, program) {\r\n    this.gl = gl;\r\n    this.program = program;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the lookat of this camera instance.\r\n   * \r\n   * @param {Vector3f} vec The vector to set the lookat to.\r\n   * @returns {CameraBase} Returns itself.\r\n   */\r\n  setLookAt(vec) {\r\n    this.rotation.lookAt(this.position, vec, Vector3f.up());\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Has to be called when the viewport size changes (e.g. window resize).\r\n   * \r\n   * @param {Number} width The width of the viewport.\r\n   * @param {Number} height The height of the viewport.\r\n   * \r\n   * @returns {CameraBase} Returns itself.\r\n   */\r\n  updateViewport(width, height) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Virtual Method\r\n   * \r\n   * @returns {CameraBase} Returns itself.\r\n   */\r\n  updateProjectionMatrix() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Upates the view matrix of this camera.\r\n   * \r\n   * @returns {CameraBase} Returns itself.\r\n   */\r\n  updateViewMatrix() {\r\n    this.update();\r\n\r\n    let viewMatrix = this.modelMatrix.clone();\r\n\r\n    viewMatrix.invert();\r\n    this.viewMatrix = viewMatrix;\r\n    this.isViewMatrixStale = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the projection matrix of this camera instance as an array.\r\n   * \r\n   * @returns {Float32Array} The entries of the projection matrix.\r\n   */\r\n  getProjectionMatrix() {\r\n    return this.projectionMatrix.entries;\r\n  }\r\n\r\n  /**\r\n   * Returns the view matrix of this camera instance as an array.\r\n   * \r\n   * @returns {Float32Array} The entries of the view matrix.\r\n   */\r\n  getViewMatrix() {\r\n    return this.viewMatrix.entries;\r\n  }\r\n\r\n  /**\r\n   * Virtual Method\r\n   */\r\n  getFrustum() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Projects a vector into screen space.\r\n   * \r\n   * @param {Vector3f} vec A vector.\r\n   * @param {Renderer} renderer An instance of a Lore renderer.\r\n   * @returns {Array} An array containing the x and y position in screen space.\r\n   */\r\n  sceneToScreen(vec, renderer) {\r\n    let vector = vec.clone();\r\n    let canvas = renderer.canvas;\r\n\r\n    Matrix4f.projectVector(vector, this);\r\n\r\n    // Map to 2D screen space\r\n    // Correct for high dpi display by dividing by device pixel ratio\r\n    let x = Math.round((vector.components[0] + 1) * canvas.width / 2) / renderer.devicePixelRatio;\r\n    let y = Math.round((-vector.components[1] + 1) * canvas.height / 2) / renderer.devicePixelRatio;\r\n\r\n    return [x, y];\r\n  }\r\n\r\n  /**\r\n  * Adds an event listener to this controls instance.\r\n  *\r\n  * @param {String} eventName The name of the event that is to be listened for.\r\n  * @param {Function} callback A callback function to be called on the event being fired.\r\n  */\r\n  addEventListener(eventName, callback) {\r\n    if (!this._eventListeners[eventName]) {\r\n      this._eventListeners[eventName] = [];\r\n    }\r\n\r\n    this._eventListeners[eventName].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Remove an event listener from this controls instance.\r\n   *\r\n   * @param {String} eventName The name of the event that is to be listened for.\r\n   * @param {Function} callback A callback function to be called on the event being fired.\r\n   */\r\n  removeEventListener(eventName, callback) {\r\n    if (!this._eventListeners.hasOwnProperty(eventName)) {\r\n      return;\r\n    }\r\n\r\n    let index = this._eventListeners[eventName].indexOf(callback);\r\n\r\n    if (index > -1) {\r\n      this._eventListeners[eventName].splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Raises an event.\r\n   *\r\n   * @param {String} eventName The name of the event to be raised.\r\n   * @param {*} [data={}] The data to be supplied to the callback function.\r\n   */\r\n  raiseEvent(eventName, data = {}) {\r\n    if (this._eventListeners[eventName]) {\r\n      for (let i = 0; i < this._eventListeners[eventName].length; i++) {\r\n        this._eventListeners[eventName][i](data);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = CameraBase;","//@ts-check\r\n\r\nconst CameraBase = require('./CameraBase');\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst Matrix4f = require('../Math/Matrix4f');\r\n\r\n/** \r\n * A class representing an orthographic camera. \r\n * \r\n * @property {number} [zoom=1.0] The zoom value of this camera.\r\n * @property {number} left The left border of the frustum.\r\n * @property {number} right The right border of the frustum.\r\n * @property {number} top The top border of the frustum.\r\n * @property {number} bottom The bottom border of the frustum.\r\n * @property {number} near The near plane distance of the frustum.\r\n * @property {number} far The far plane distance of the frustum.\r\n * */\r\nclass OrthographicCamera extends CameraBase {\r\n    /**\r\n     * Creates an instance of OrthographicCamera.\r\n     * @param {Number} left Left extend of the viewing volume.\r\n     * @param {Number} right Right extend of the viewing volume.\r\n     * @param {Number} top Top extend of the viewing volume.\r\n     * @param {Number} bottom Bottom extend of the viewing volume.\r\n     * @param {Number} near Near extend of the viewing volume.\r\n     * @param {Number} far Far extend of the viewing volume.\r\n     */\r\n    constructor(left, right, top, bottom, near = 0.1, far = 2500) {\r\n        super();\r\n\r\n        this.type = 'Lore.OrthographicCamera';\r\n        this.zoom = 1.0;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.top = top;\r\n        this.bottom = bottom;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.updateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * Updates the projection matrix of this orthographic camera.\r\n     * \r\n     * @returns {OrthographicCamera} Returns itself.\r\n     */\r\n    updateProjectionMatrix() {\r\n        //TODO: This is called in each render loop? Does it have to?\r\n        let width = (this.right - this.left) / (2.0 * this.zoom);\r\n        let height = (this.top - this.bottom) / (2.0 * this.zoom);\r\n        let x = (this.right + this.left) / 2.0;\r\n        let y = (this.top + this.bottom) / 2.0;\r\n\r\n        let left = x - width;\r\n        let right = x + width;\r\n        let top = y + height;\r\n        let bottom = y - height;\r\n\r\n        this.projectionMatrix.setOrthographic(left, right, top, bottom, this.near, this.far);\r\n        this.isProjectionMatrixStale = true;\r\n\r\n        this.raiseEvent('projectionmatrixupdated', { source: this });\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculate the required zoom factor to contain an a specified width and height.\r\n     * \r\n     * @param {Number} width Width of regtion to be contained.\r\n     * @param {Number} height Height of region to be contained.\r\n     * @param {Number} padding Padding applied to the zoom as a fraction of width and height.\r\n     * \r\n     * @returns {Number} The zoom to be set to contain the specified width and height.\r\n     */\r\n    getRequiredZoomToContain(width, height, padding = 0.0) {\r\n\r\n        let zoom_width = (this.right - this.left) / (width + width * padding);\r\n        let zoom_height = (this.top - this.bottom) / (height + height * padding);\r\n\r\n        return Math.min(zoom_width, zoom_height);\r\n    }\r\n\r\n    /**\r\n     * Has to be called when the viewport size changes (e.g. window resize).\r\n     * \r\n     * @param {Number} width The width of the viewport.\r\n     * @param {Number} height The height of the viewport.\r\n     * \r\n     * @returns {OrthographicCamera} Returns itself.\r\n     */\r\n    updateViewport(width, height) {\r\n        this.left = -width / 2.0;\r\n        this.right = width / 2.0;\r\n        this.top = height / 2.0;\r\n        this.bottom = -height / 2.0;\r\n\r\n        this.raiseEvent('viewportupdated', { source: this });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the frustum of the orthographic camera which is essentially just a box.\r\n     * \r\n     * @returns {Vector3f[]} An array that contains two vectors defining minima and maxima.\r\n     */\r\n    getFrustum() {\r\n        let z = (this.near + this.far) / (this.near - this.far)\r\n        let min = new Vector3f(-1.0, -1.0, z);\r\n        let max = new Vector3f(1.0, 1.0, z);\r\n\r\n        Matrix4f.unprojectVector(min, this);\r\n        Matrix4f.unprojectVector(max, this);\r\n\r\n        return [min, max];\r\n    }\r\n}\r\n\r\nmodule.exports = OrthographicCamera;","//@ts-check\r\n\r\nconst CameraBase = require('./CameraBase');\r\n\r\n/** A class representing an perspective camera. */\r\nclass PerspectiveCamera extends CameraBase {\r\n    /**\r\n     * Creates an instance of PerspectiveCamera.\r\n     * @param {Number} fov The field of view.\r\n     * @param {Number} aspect The aspect ration (width / height).\r\n     * @param {Number} near Near extend of the viewing volume.\r\n     * @param {Number} far Far extend of the viewing volume.\r\n     */ \r\n    constructor(fov, aspect, near = 0.1, far = 2500) {\r\n        super();\r\n\r\n        this.type = 'Lore.PerspectiveCamera';\r\n\r\n        // TODO: There shouldn't be a zoom here. The problem is, that the orbital controls\r\n        // and also the point helper and zoom rely on it. However, for the perspective camera,\r\n        // zooming is achieved by adjusting the fov. \r\n        this.zoom = 1.0;\r\n        this.fov = fov;\r\n        this.aspect = aspect;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.updateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * Updates the projection matrix of this perspective camera.\r\n     * \r\n     * @returns {PerspectiveCamera} Returns itself.\r\n     */\r\n    updateProjectionMatrix() {\r\n        this.projectionMatrix.setPerspective(this.fov, this.aspect, this.near, this.far);\r\n        this.isProjectionMatrixStale = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Has to be called when the viewport size changes (e.g. window resize).\r\n     * \r\n     * @param {Number} width The width of the viewport.\r\n     * @param {Number} height The height of the viewport.\r\n     * \r\n     * @returns {PerspectiveCamera} Returns itself.\r\n     */\r\n    updateViewport(width, height) {\r\n      this.aspect = width / height;\r\n      return this;\r\n    }\r\n}\r\n\r\nmodule.exports = PerspectiveCamera;","const CameraBase = require('./CameraBase');\r\nconst OrthographicCamera = require('./OrthographicCamera');\r\nconst PerspectiveCamera = require('./PerspectiveCamera');\r\n\r\nmodule.exports = {\r\n  CameraBase,\r\n  OrthographicCamera,\r\n  PerspectiveCamera\r\n}","//@ts-check\r\n\r\nconst Vector3f = require(\"../Math/Vector3f\");\r\n/**\r\n * An abstract class representing the base for controls implementations.\r\n *\r\n * @property {Renderer} renderer A Lore Renderer instance.\r\n * @property {CameraBase} camera A Lore CameraBase extending object.\r\n * @property {HTMLCanvasElement} canvas A HTMLCanvasElement.\r\n * @property {Number} lowFps The FPS limit when throttling FPS.\r\n * @property {Number} highFps The FPS limit when not throttling FPS.\r\n * @property {String} touchMode The current touch mode.\r\n * @property {Vector3f} lookAt The current lookat associated with these controls.\r\n */\r\nclass ControlsBase {\r\n  /**\r\n   * Creates an instance of ControlsBase.\r\n   * @param {Renderer} renderer An instance of a Lore renderer.\r\n   * @param {Vector3f} [lookAt=new Vector3f()] The look at vector of the controls.\r\n   * @param {Boolean} [enableVR=false] Whether or not to track phone spatial information using the WebVR API.\r\n   */\r\n  constructor(\r\n    renderer,\r\n    lookAt = new Vector3f(0.0, 0.0, 0.0),\r\n    enableVR = false\r\n  ) {\r\n    this.renderer = renderer;\r\n    this.camera = renderer.camera;\r\n    this.canvas = renderer.canvas;\r\n    this.lowFps = 15;\r\n    this.highFps = 30;\r\n    this._eventListeners = {};\r\n    this.renderer.setMaxFps(this.lowFps);\r\n    this.touchMode = \"drag\";\r\n    this.lookAt = lookAt;\r\n\r\n    this.mouse = {\r\n      previousPosition: {\r\n        x: null,\r\n        y: null\r\n      },\r\n      delta: {\r\n        x: 0.0,\r\n        y: 0.0\r\n      },\r\n      state: {\r\n        left: false,\r\n        middle: false,\r\n        right: false\r\n      },\r\n      normalizedPosition: {\r\n        x: 0.0,\r\n        y: 0.0\r\n      },\r\n      moved: false,\r\n      touches: 0,\r\n      pointerCache: [],\r\n      pinchDiff: 0\r\n    };\r\n\r\n    this.keyboard = {\r\n      alt: false,\r\n      ctrl: false,\r\n      shift: false\r\n    };\r\n\r\n    this.VR = {};\r\n\r\n    let that = this;\r\n\r\n    // Set the touch action of the canvas\r\n    this.canvas.style.touchAction = 'none';\r\n\r\n    this.canvas.addEventListener(\"pointermove\", function(e) {\r\n      // Find this event in the cache and update its record with this event\r\n      for (var i = 0; i < that.mouse.pointerCache.length; i++) {\r\n        if (e.pointerId == that.mouse.pointerCache[i].pointerId) {\r\n          that.mouse.pointerCache[i] = e;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      // Get the current average / center of mass pointer location\r\n      let pointerLoc = that.getPointerLocation();\r\n      \r\n      // Handle touch gestures and mouse events\r\n      // If there are two pointer events, it has to be touch\r\n      if (that.mouse.pointerCache.length === 2) {\r\n        var diff = Math.pow(that.mouse.pointerCache[1].clientX - that.mouse.pointerCache[0].clientX, 2) +\r\n                   Math.pow(that.mouse.pointerCache[1].clientY - that.mouse.pointerCache[0].clientY, 2);\r\n\r\n        if (that.mouse.pinchDiff > 0) {\r\n          if (diff > that.mouse.pinchDiff) {\r\n            that.raiseEvent(\"touch\", {\r\n              e: { x: -1, y: -1, speed: 0.5 },\r\n              source: \"pinch\"\r\n            });\r\n          }\r\n          else if (diff < that.mouse.pinchDiff) {\r\n            that.raiseEvent(\"touch\", {\r\n              e: { x: 1, y: 1, speed: 0.5 },\r\n              source: \"pinch\"\r\n            });\r\n          }\r\n        }\r\n\r\n        that.mouse.pinchDiff = diff;\r\n      } else if (that.mouse.previousPosition.x !== null && that.mouse.pointerCache.length === 3) {\r\n        that.mouse.delta.x = pointerLoc[0] - that.mouse.previousPosition.x;\r\n        that.mouse.delta.y = pointerLoc[1] - that.mouse.previousPosition.y;\r\n\r\n        that.mouse.moved = true;\r\n\r\n        that.raiseEvent(\"mousedrag\", {\r\n          e: that.mouse.delta,\r\n          source: \"right\"\r\n        });\r\n      } else if (\r\n        that.mouse.previousPosition.x !== null && (that.mouse.state.left ||\r\n        that.mouse.state.middle ||\r\n        that.mouse.state.right)\r\n      ) {\r\n        that.mouse.delta.x = pointerLoc[0] - that.mouse.previousPosition.x;\r\n        that.mouse.delta.y = pointerLoc[1] - that.mouse.previousPosition.y;\r\n\r\n        that.mouse.moved = true;\r\n\r\n        // Give priority to left, then middle, then right\r\n        if (that.mouse.state.left) {\r\n          that.raiseEvent(\"mousedrag\", {\r\n            e: that.mouse.delta,\r\n            source: \"left\"\r\n          });\r\n        } else if (that.mouse.state.middle) {\r\n          that.raiseEvent(\"mousedrag\", {\r\n            e: that.mouse.delta,\r\n            source: \"middle\"\r\n          });\r\n        } else if (that.mouse.state.right) {\r\n          that.raiseEvent(\"mousedrag\", {\r\n            e: that.mouse.delta,\r\n            source: \"right\"\r\n          });\r\n        }\r\n      }\r\n\r\n      // Set normalized mouse position\r\n      let rect = that.canvas.getBoundingClientRect();\r\n      let s = that.renderer.devicePixelRatio;\r\n      that.mouse.normalizedPosition.x =\r\n        ((e.clientX - rect.left * s) / that.canvas.width) * s * 2 - 1;\r\n      that.mouse.normalizedPosition.y =\r\n        -(((e.clientY - rect.top * s) / that.canvas.height) * s) * 2 + 1;\r\n        \r\n      that.raiseEvent(\"mousemove\", {\r\n        e: that\r\n      });\r\n\r\n      that.mouse.previousPosition.x = pointerLoc[0];\r\n      that.mouse.previousPosition.y = pointerLoc[1];\r\n    });\r\n\r\n    let wheelevent = \"mousewheel\";\r\n    if (navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1)\r\n      wheelevent = \"DOMMouseScroll\";\r\n\r\n    this.canvas.addEventListener(wheelevent, function(e) {\r\n      if (that.isInIframe() && !e.ctrlKey) {\r\n        return;\r\n      }\r\n\r\n      e.preventDefault();\r\n\r\n      let delta = \"wheelDelta\" in e ? e.wheelDelta : -40 * e.detail;\r\n      that.raiseEvent(\"mousewheel\", {\r\n        e: delta\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener(\"keydown\", function(e) {\r\n      if (e.which == 16) {\r\n        that.keyboard.shift = true;\r\n      } else if (e.which == 17) {\r\n        that.keyboard.ctrl = true;\r\n      } else if (e.which == 18) {\r\n        that.keyboard.alt = true;\r\n      }\r\n\r\n      that.raiseEvent(\"keydown\", {\r\n        e: e.which\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener(\"keyup\", function(e) {\r\n      if (e.which == 16) {\r\n        that.keyboard.shift = false;\r\n      } else if (e.which == 17) {\r\n        that.keyboard.ctrl = false;\r\n      } else if (e.which == 18) {\r\n        that.keyboard.alt = false;\r\n      }\r\n\r\n      that.raiseEvent(\"keyup\", {\r\n        e: e.which\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener(\"pointerdown\", function(e) {\r\n      let btn = e.button;\r\n      let source = \"left\";\r\n      that.mouse.pointerCache.push(e);\r\n\r\n      // Only handle single button events\r\n      if (btn == 0) {\r\n        that.mouse.state.left = true;\r\n      } else if (btn == 1) {\r\n        that.mouse.state.middle = true;\r\n        source = \"middle\";\r\n      } else if (btn == 2) {\r\n        that.mouse.state.right = true;\r\n        source = \"right\";\r\n      }\r\n\r\n      that.renderer.setMaxFps(that.highFps);\r\n      that.mouse.moved = false;\r\n\r\n      that.raiseEvent(\"mousedown\", {\r\n        e: that,\r\n        source: source\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener(\"click\", function(e) {\r\n      let btn = e.button;\r\n      let source = \"left\";\r\n      \r\n      if (!that.mouse.moved) {\r\n        that.raiseEvent(\"click\", {\r\n          e: that,\r\n          source: source\r\n        });\r\n      }      \r\n    });\r\n\r\n    this.canvas.addEventListener(\"dblclick\", function(e) {\r\n      let btn = e.button;\r\n      let source = \"left\";\r\n\r\n      that.raiseEvent(\"dblclick\", {\r\n        e: that,\r\n        source: source\r\n      });\r\n    });\r\n\r\n    // This function is added to multiple pointer events\r\n    let pointerUpEvent = function(e) {\r\n      let btn = e.button;\r\n      let source = \"left\";\r\n      that.removeEvent(e);\r\n      that.mouse.pinchDiff = 0;\r\n\r\n      // Only handle single button events\r\n      if (btn == 0) {\r\n        that.mouse.state.left = false;\r\n      } else if (btn == 1) {\r\n        that.mouse.state.middle = false;\r\n        source = \"middle\";\r\n      } else if (btn == 2) {\r\n        that.mouse.state.right = false;\r\n        source = \"right\";\r\n      }\r\n\r\n      // Reset the previous position and delta of the mouse\r\n      that.mouse.previousPosition.x = null;\r\n      that.mouse.previousPosition.y = null;\r\n      that.mouse.state.left = false;\r\n      that.mouse.state.middle = false;\r\n      that.mouse.state.right = false;\r\n\r\n      that.renderer.setMaxFps(that.lowFps);\r\n\r\n      that.raiseEvent(\"mouseup\", {\r\n        e: that,\r\n        source: source\r\n      });\r\n    };\r\n\r\n    this.canvas.addEventListener(\"pointerup\", function(e) {\r\n      pointerUpEvent(e);\r\n    });\r\n\r\n    this.canvas.addEventListener(\"pointercancel\", function(e) {\r\n      pointerUpEvent(e);\r\n    });\r\n\r\n    this.canvas.addEventListener(\"pointerleave\", function(e) {\r\n      pointerUpEvent(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialiizes WebVR, if the API is available and the device suppports it.\r\n   */\r\n  /*\r\n  initWebVR() {\r\n    if (navigator && navigator.getVRDevices) {\r\n      navigator.getVRDisplays().then(function (displays) {\r\n        if (displays.length === 0) {\r\n          return;\r\n        }\r\n\r\n        for (var i = 0; i < displays.length; ++i) {\r\n\r\n        }\r\n      });\r\n    }\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Adds an event listener to this controls instance.\r\n   *\r\n   * @param {String} eventName The name of the event that is to be listened for.\r\n   * @param {Function} callback A callback function to be called on the event being fired.\r\n   */\r\n  addEventListener(eventName, callback) {\r\n    if (!this._eventListeners[eventName]) {\r\n      this._eventListeners[eventName] = [];\r\n    }\r\n\r\n    this._eventListeners[eventName].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Remove an event listener from this controls instance.\r\n   *\r\n   * @param {String} eventName The name of the event that is to be listened for.\r\n   * @param {Function} callback A callback function to be called on the event being fired.\r\n   */\r\n  removeEventListener(eventName, callback) {\r\n    if (!this._eventListeners.hasOwnProperty(eventName)) {\r\n      return;\r\n    }\r\n\r\n    let index = this._eventListeners[eventName].indexOf(callback);\r\n\r\n    if (index > -1) {\r\n      this._eventListeners[eventName].splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Raises an event.\r\n   *\r\n   * @param {String} eventName The name of the event to be raised.\r\n   * @param {*} [data={}] The data to be supplied to the callback function.\r\n   */\r\n  raiseEvent(eventName, data = {}) {\r\n    if (this._eventListeners[eventName]) {\r\n      for (let i = 0; i < this._eventListeners[eventName].length; i++) {\r\n        this._eventListeners[eventName][i](data);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current look at vector associated with this controls.\r\n   *\r\n   * @returns {Vector3f} The current look at vector.\r\n   */\r\n  getLookAt() {\r\n    return this.lookAt;\r\n  }\r\n\r\n  /**\r\n   * Virtual method. Sets the lookat vector, which is the center of the orbital camera sphere.\r\n   *\r\n   * @param {Vector3f} lookAt The lookat vector.\r\n   * @returns {ControlsBase} Returns itself.\r\n   */\r\n  setLookAt(lookAt) {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Update the camera (on mouse move, touch drag, mousewheel scroll, ...).\r\n   *\r\n   * @param {*} [e=null] A mouse or touch events data.\r\n   * @param {String} [source=null] The source of the input ('left', 'middle', 'right', 'wheel', ...).\r\n   * @returns {ControlsBase} Returns itself.\r\n   */\r\n  update(e = null, source = null) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the script is being run in an IFrame.\r\n   *\r\n   * @returns {Boolean} Returns whether the script is run in an IFrame.\r\n   */\r\n  isInIframe() {\r\n    try {\r\n      return window.self !== window.top;\r\n    } catch (e) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a pointer event from the event cache.\r\n   *\r\n   * @param {PointerEvent} e The pointer event\r\n   */\r\n  removeEvent(e) {\r\n    for (var i = 0; i < this.mouse.pointerCache.length; i++) {\r\n      if (this.mouse.pointerCache[i].pointerId == e.pointerId) {\r\n        this.mouse.pointerCache.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the position of the pointer (e.g. the mouse). In case of multi-\r\n   * touch, the center of mass is returned.\r\n   * \r\n   * @returns {Number[]} The pointer position\r\n   */\r\n  getPointerLocation() {\r\n    let x = 0;\r\n    let y = 0;\r\n    let n = this.mouse.pointerCache.length;\r\n\r\n    if (n === 0) return [null, null];\r\n\r\n    for (var i = 0; i < n; i++) {\r\n      x += this.mouse.pointerCache[i].pageX;\r\n      y += this.mouse.pointerCache[i].pageY;\r\n    }\r\n\r\n    return [x, y];\r\n  }\r\n}\r\n\r\nmodule.exports = ControlsBase;\r\n","//@ts-check\r\n\r\nconst ControlsBase = require('../Controls/ControlsBase')\r\nconst Vector3f = require('../Math/Vector3f');\r\n\r\n/** A class representing orbital controls. */\r\nclass FirstPersonControls extends ControlsBase {\r\n\r\n    /**\r\n     * Creates an instance of FirstPersonControls.\r\n     * @param {Renderer} renderer An instance of a Lore renderer.\r\n     */\r\n    constructor(renderer, radius) {\r\n        super(renderer);\r\n\r\n        this.up = Vector3f.up();\r\n        this.renderer = renderer;\r\n        this.camera = renderer.camera;\r\n        this.canvas = renderer.canvas;\r\n\r\n        this.camera.position = new Vector3f(radius, radius, radius);\r\n        this.camera.updateProjectionMatrix();\r\n        this.camera.updateViewMatrix();\r\n\r\n        this.rotationLocked = false;\r\n\r\n        let that = this;\r\n\r\n        this.addEventListener('mousedrag', function (e) {\r\n            that.update(e.e, e.source);\r\n        });\r\n\r\n        // Initial update\r\n        this.update({\r\n            x: 0,\r\n            y: 0\r\n        }, 'left');\r\n    }\r\n\r\n    /**\r\n     * Update the camera (on mouse move, touch drag, mousewheel scroll, ...).\r\n     * \r\n     * @param {any} e A mouse or touch events data.\r\n     * @param {String} source The source of the input ('left', 'middle', 'right', 'wheel', ...).\r\n     * @returns {FirstPersonControls} Returns itself.\r\n     */\r\n    update(e, source) {\r\n        if (source === 'left') {\r\n            // Move forward here\r\n        }\r\n\r\n        // Update the camera\r\n        let offset = this.camera.position.clone().subtract(this.lookAt);\r\n\r\n        this.camera.position.copyFrom(this.lookAt).add(offset);\r\n        this.camera.setLookAt(this.lookAt);\r\n        this.camera.updateViewMatrix();\r\n\r\n        this.raiseEvent('updated');\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = FirstPersonControls;","//@ts-check\r\n\r\nconst ControlsBase = require(\"../Controls/ControlsBase\");\r\nconst Vector3f = require(\"../Math/Vector3f\");\r\nconst SphericalCoords = require(\"../Math/SphericalCoords\");\r\n\r\n/**\r\n * A class representing orbital controls.\r\n *\r\n * @property {Vector3f} up The global up vector.\r\n * @property {Number} radius The distance from the camera to the lookat vector.\r\n * @property {Number} [yRotationLimit=Math.PI] The limit for the vertical rotation.\r\n * @property {SphericalCoords} spherical The spherical coordinates of the camera on the sphere around the lookat vector.\r\n * @property {Number} scale The sensitivity scale.\r\n * @property {CameraBase} camera The camera associated with these controls.\r\n */\r\nclass OrbitalControls extends ControlsBase {\r\n  /**\r\n   * Creates an instance of OrbitalControls.\r\n   * @param {Renderer} renderer An instance of a Lore renderer.\r\n   * @param {Number} radius The distance of the camera to the lookat vector.\r\n   * @param {Vector3f} lookAt The lookat vector.\r\n   */\r\n  constructor(renderer, radius, lookAt = new Vector3f(0.0, 0.0, 0.0)) {\r\n    super(renderer, lookAt);\r\n\r\n    this.up = Vector3f.up();\r\n    this.radius = radius;\r\n\r\n    this.yRotationLimit = Math.PI;\r\n\r\n    this._dPhi = 0.0;\r\n    this._dTheta = 0.0;\r\n    this._dPan = new Vector3f(0.0, 0.0, 0.0);\r\n\r\n    this.spherical = new SphericalCoords();\r\n\r\n    this.scale = 0.95;\r\n\r\n    this.camera.position = new Vector3f(radius, radius, radius);\r\n    this.camera.updateProjectionMatrix();\r\n    this.camera.updateViewMatrix();\r\n\r\n    this.rotationLocked = false;\r\n\r\n    let that = this;\r\n\r\n    this.addEventListener(\"mousedrag\", function (e) {\r\n      that.update(e.e, e.source);\r\n    });\r\n\r\n    this.addEventListener(\"touch\", function (e) {\r\n      that.update(e.e, e.source);\r\n    });\r\n\r\n    this.addEventListener(\"mousewheel\", function (e) {\r\n      that.update(\r\n        {\r\n          x: 0,\r\n          y: -e.e\r\n        },\r\n        \"wheel\"\r\n      );\r\n    });\r\n\r\n    // Initial update\r\n    this.update(\r\n      {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      \"left\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Limit the vertical rotation to the horizon (the upper hemisphere).\r\n   *\r\n   * @param {Boolean} limit A boolean indicating whether or not to limit the vertical rotation to the horizon.\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  limitRotationToHorizon(limit) {\r\n    if (limit) {\r\n      this.yRotationLimit = 0.5 * Math.PI;\r\n    } else {\r\n      this.yRotationLimit = Math.PI;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the distance (radius of the sphere) from the lookat vector to the camera.\r\n   *\r\n   * @param {Number} radius The radius.\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  setRadius(radius) {\r\n    this.radius = radius;\r\n    this.camera.position = new Vector3f(0, 0, radius);\r\n\r\n    this.camera.updateProjectionMatrix();\r\n    this.camera.updateViewMatrix();\r\n    this.update();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Update the camera (on mouse move, touch drag, mousewheel scroll, ...).\r\n   *\r\n   * @param {*} [e=null] A mouse or touch events data.\r\n   * @param {String} [source=null] The source of the input ('left', 'middle', 'right', 'wheel', ...).\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  update(e = null, source = null) {\r\n    if (source == \"left\" && !this.rotationLocked) {\r\n      // Rotate\r\n      this._dTheta =\r\n        (-2 * Math.PI * e.x) / (this.canvas.clientWidth * this.camera.zoom);\r\n      this._dPhi =\r\n        (-2 * Math.PI * e.y) / (this.canvas.clientHeight * this.camera.zoom);\r\n\r\n      // It's just to fast like this ...\r\n      // this._dTheta = -2 * Math.PI * e.x / this.canvas.clientWidth;\r\n      // this._dPhi = -2 * Math.PI * e.y / this.canvas.clientHeight;\r\n    } else if (source == \"right\" || (source == \"left\" && this.rotationLocked)) {\r\n      // Translate\r\n      let x =\r\n        (e.x * (this.camera.right - this.camera.left)) /\r\n        this.camera.zoom /\r\n        this.canvas.clientWidth;\r\n      let y =\r\n        (e.y * (this.camera.top - this.camera.bottom)) /\r\n        this.camera.zoom /\r\n        this.canvas.clientHeight;\r\n\r\n      let u = this.camera.getUpVector().components;\r\n      let r = this.camera.getRightVector().components;\r\n\r\n      this._dPan.components[0] = r[0] * -x + u[0] * y;\r\n      this._dPan.components[1] = r[1] * -x + u[1] * y;\r\n      this._dPan.components[2] = r[2] * -x + u[2] * y;\r\n    } else if (source == \"middle\" || source == \"wheel\" || source == \"pinch\") {\r\n      if (e.y > 0) {\r\n        // Zoom Out\r\n        this.camera.zoom = Math.max(0, this.camera.zoom * this.scale);\r\n        this.camera.updateProjectionMatrix();\r\n        this.raiseEvent(\"zoomchanged\", this.camera.zoom);\r\n      } else if (e.y < 0) {\r\n        // Zoom In\r\n        this.camera.zoom = Math.max(0, this.camera.zoom / this.scale);\r\n        this.camera.updateProjectionMatrix();\r\n        this.raiseEvent(\"zoomchanged\", this.camera.zoom);\r\n      }\r\n    }\r\n\r\n    // Update the camera\r\n    let offset = this.camera.position.clone().subtract(this.lookAt);\r\n\r\n    this.spherical.setFromVector(offset);\r\n    this.spherical.components[1] += this._dPhi;\r\n    this.spherical.components[2] += this._dTheta;\r\n    this.spherical.limit(0, this.yRotationLimit, -Infinity, Infinity);\r\n    this.spherical.secure();\r\n\r\n    // Limit radius here\r\n    this.lookAt.add(this._dPan);\r\n    offset.setFromSphericalCoords(this.spherical);\r\n\r\n    this.camera.position.copyFrom(this.lookAt).add(offset);\r\n    this.camera.setLookAt(this.lookAt);\r\n    this.camera.updateViewMatrix();\r\n\r\n    this._dPhi = 0.0;\r\n    this._dTheta = 0.0;\r\n    this._dPan.set(0, 0, 0);\r\n\r\n    this.raiseEvent(\"updated\");\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the lookat vector, which is the center of the orbital camera sphere.\r\n   *\r\n   * @param {Vector3f} lookAt The lookat vector.\r\n   * @returns {ControlsBase} Returns itself.\r\n   */\r\n  setLookAt(lookAt) {\r\n    // TODO: Most of this code (except for setting lookAt to lookAt instead of _dPan)\r\n    //       is compied from updated. Maybe fix that\r\n\r\n    // Update the camera\r\n    let offset = this.camera.position.clone().subtract(this.lookAt);\r\n\r\n    this.spherical.setFromVector(offset);\r\n    this.spherical.components[1] += this._dPhi;\r\n    this.spherical.components[2] += this._dTheta;\r\n    this.spherical.limit(0, this.yRotationLimit, -Infinity, Infinity);\r\n    this.spherical.secure();\r\n\r\n    // Limit radius here\r\n    this.lookAt = lookAt.clone();\r\n    offset.setFromSphericalCoords(this.spherical);\r\n\r\n    this.camera.position.copyFrom(this.lookAt).add(offset);\r\n    this.camera.setLookAt(this.lookAt);\r\n    this.camera.updateViewMatrix();\r\n\r\n    this.raiseEvent(\"updated\");\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the camera around the sphere by spherical coordinates.\r\n   *\r\n   * @param {Number} phi The phi component of the spherical coordinates.\r\n   * @param {Number} theta The theta component of the spherical coordinates.\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  setView(phi, theta) {\r\n    let offset = this.camera.position.clone().subtract(this.lookAt);\r\n\r\n    this.spherical.setFromVector(offset);\r\n    this.spherical.components[1] = phi;\r\n    this.spherical.components[2] = theta;\r\n    this.spherical.secure();\r\n\r\n    offset.setFromSphericalCoords(this.spherical);\r\n\r\n    this.camera.position.copyFrom(this.lookAt).add(offset);\r\n    this.camera.setLookAt(this.lookAt);\r\n    this.camera.updateViewMatrix();\r\n    this.raiseEvent(\"updated\");\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Zoom in on the lookat vector.\r\n   *\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  zoomIn() {\r\n    this.camera.zoom = Math.max(0, this.camera.zoom / this.scale);\r\n    this.camera.updateProjectionMatrix();\r\n    this.raiseEvent(\"zoomchanged\", this.camera.zoom);\r\n    this.raiseEvent(\"updated\");\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Zoom out from the lookat vector.\r\n   *\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  zoomOut() {\r\n    this.camera.zoom = Math.max(0, this.camera.zoom * this.scale);\r\n    this.camera.updateProjectionMatrix();\r\n    this.raiseEvent(\"zoomchanged\", this.camera.zoom);\r\n    this.raiseEvent(\"updated\");\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the zoom to a given value.\r\n   *\r\n   * @param {Number} zoom The zoom value.\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  setZoom(zoom) {\r\n    this.camera.zoom = zoom;\r\n    this.camera.updateProjectionMatrix();\r\n    this.raiseEvent(\"zoomchanged\", this.camera.zoom);\r\n    this.update();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the zoom.\r\n   *\r\n   * @returns {Number} The zoom value.\r\n   */\r\n  getZoom() {\r\n    return this.camera.zoom;\r\n  }\r\n\r\n  /**\r\n   * Set zoom so it contains a bounding box\r\n   * \r\n   * @param {Number} width The width of the square to be contained.\r\n   * @param {Number} height The height of the square to be contained.\r\n   * @param {Number} padding Padding applied to the zoom as a fraction of width and height.\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  zoomTo(width, height, padding = 0.0) {\r\n    if (this.camera.type !== 'Lore.OrthographicCamera') {\r\n      throw ('Feature not implemented.');\r\n    }\r\n\r\n    this.setZoom(this.camera.getRequiredZoomToContain(\r\n      width,\r\n      height,\r\n      padding\r\n    ));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Vector3f} v The vector to pan to.\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  panTo(v) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the view by name (left, right, top, bottom, back, front, free)\r\n   *\r\n   * @param {String} viewName The name of the view.\r\n   *\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n\r\n  setViewByName(viewName) {\r\n    switch (viewName) {\r\n      case \"left\":\r\n        this.setLeftView();\r\n        break;\r\n      case \"right\":\r\n        this.setRightView();\r\n        break;\r\n      case \"top\":\r\n        this.setTopView();\r\n        break;\r\n      case \"bottom\":\r\n        this.setBottomView();\r\n        break;\r\n      case \"back\":\r\n        this.setBackView();\r\n        break;\r\n      case \"front\":\r\n        this.setFrontView();\r\n        break;\r\n      default:\r\n        this.setFreeView();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the camera to the top view (locks rotation).\r\n   *\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  setTopView() {\r\n    this.setView(0.0, 2.0 * Math.PI);\r\n    this.rotationLocked = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the camera to the bottom view (locks rotation).\r\n   *\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  setBottomView() {\r\n    this.setView(0.0, 0.0);\r\n    this.rotationLocked = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the camera to the right view (locks rotation).\r\n   *\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  setRightView() {\r\n    this.setView(0.5 * Math.PI, 0.5 * Math.PI);\r\n    this.rotationLocked = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the camera to the left view (locks rotation).\r\n   *\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  setLeftView() {\r\n    this.setView(0.5 * Math.PI, -0.5 * Math.PI);\r\n    this.rotationLocked = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the camera to the front view (locks rotation).\r\n   *\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  setFrontView() {\r\n    this.setView(0.5 * Math.PI, 2.0 * Math.PI);\r\n    this.rotationLocked = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the camera to the back view (locks rotation).\r\n   *\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  setBackView() {\r\n    this.setView(0.5 * Math.PI, Math.PI);\r\n    this.rotationLocked = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the camera to free view (unlocks rotation).\r\n   *\r\n   * @returns {OrbitalControls} Returns itself.\r\n   */\r\n  setFreeView() {\r\n    this.setView(0.25 * Math.PI, 0.25 * Math.PI);\r\n    this.rotationLocked = false;\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nmodule.exports = OrbitalControls;\r\n","const ControlsBase = require('./ControlsBase');\r\nconst FirstPersonControls = require('./FirstPersonControls');\r\nconst OrbitalControls = require('./OrbitalControls');\r\n\r\nmodule.exports = {\r\n  ControlsBase,\r\n  FirstPersonControls,\r\n  OrbitalControls\r\n}","//@ts-check\r\n\r\nconst Vector3f = require('../Math/Vector3f');\r\n\r\n/** \r\n * A class representing an attribute. \r\n * \r\n * @property {String} type The type name of this object (Lore.Attribute).\r\n * @property {*} data The data represented by the attribute in a 1D array. Usually a Float32Array.\r\n * @property {Number} [attributeLength=3] The length of the attribute. '3' for Vector3f.\r\n * @property {String} name The name of this attribut. Must be the name used by the shader.\r\n * @property {Number} size The length of the attribute values (defined as data.length / attributeLength).\r\n * @property {WebGLBuffer} buffer The bound WebGLBuffer.\r\n * @property {GLint} attributeLocation The attribute location for this attribute.\r\n * @property {GLenum} bufferType The buffer target. As of WebGL 1: gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER.\r\n * @property {GLenum} drawMode The draw mode. As of WebGL 1: gl.STATIC_DRAW, gl.DYNAMIC_DRAW or gl.STREAM_DRAW.\r\n * @property {Boolean} stale A boolean indicating whether or not this attribute has changed and needs to be updated.\r\n */\r\nclass Attribute {\r\n    /**\r\n     * Creates an instance of Attribute.\r\n     * @param {*} data The data represented by the attribute in a 1D array. Usually a Float32Array.\r\n     * @param {Number} attributeLength The length of the attribute (3 for RGB, XYZ, ...).\r\n     * @param {String} name The name of the attribute.\r\n     */\r\n    constructor(data, attributeLength, name) {\r\n        this.type = 'Lore.Attribute';\r\n        this.data = data;\r\n        this.attributeLength = attributeLength || 3;\r\n        this.name = name;\r\n        this.size = this.data.length / this.attributeLength;\r\n        this.buffer = null;\r\n        this.attributeLocation;\r\n        this.bufferType = null;\r\n        this.drawMode = null;\r\n        this.stale = false;\r\n    }\r\n\r\n    /**\r\n     * Set the attribute value from a vector at a given index. The vector should have the same number of components as is the length of this attribute.\r\n     * \r\n     * @param {Number} index The index at which to replace / set the value (is calculated as index * attributeLength).\r\n     * @param {Vector3f} v A vector.\r\n     */\r\n    setFromVector(index, v) {\r\n        this.data.set(v.components, index * this.attributeLength, v.components.length);\r\n    }\r\n\r\n    /**\r\n     * Set the attribute values from vectors in an array.\r\n     * \r\n     * @param {Vector3f[]} arr An array containing vectors. The number of components of the vectors must have the same length as the attribute length specified.\r\n     */\r\n    setFromVectorArray(arr) {\r\n        if (this.attributeLength !== arr[0].components.length)\r\n            throw 'The attribute has a length of ' + this.attributeLength + '. But the vectors have ' + arr[0].components.length + ' components.';\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            this.data.set(arr[i].components, i * this.attributeLength, arr[i].components.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the x value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @returns {Number} The x value at a given index.\r\n     */\r\n    getX(index) {\r\n        return this.data[index * this.attributeLength];\r\n    }\r\n\r\n    /**\r\n     * Set the x value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @param {Number} value A number.\r\n     */\r\n    setX(index, value) {\r\n        this.data[index * this.attributeLength];\r\n    }\r\n\r\n    /**\r\n     * Gets the y value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @returns {Number} The y value at a given index.\r\n     */\r\n    getY(index) {\r\n        return this.data[index * this.attributeLength + 1];\r\n    }\r\n\r\n    /**\r\n     * Set the y value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @param {Number} value A number.\r\n     */\r\n    setY(index, value) {\r\n        this.data[index * this.attributeLength + 1];\r\n    }\r\n\r\n    /**\r\n     * Gets the z value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @returns {Number} The z value at a given index.\r\n     */\r\n    getZ(index) {\r\n        return this.data[index * this.attributeLength + 2];\r\n    }\r\n\r\n    /**\r\n     * Set the z value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @param {Number} value A number.\r\n     */\r\n    setZ(index, value) {\r\n        this.data[index * this.attributeLength + 2];\r\n    }\r\n\r\n    /**\r\n     * Gets the w value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @returns {Number} The w value at a given index.\r\n     */\r\n    getW(index) {\r\n        return this.data[index * this.attributeLength + 3];\r\n    }\r\n\r\n    /**\r\n     * Set the w value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @param {Number} value A number.\r\n     */\r\n    setW(index, value) {\r\n        this.data[index * this.attributeLength + 3];\r\n    }\r\n\r\n    /**\r\n     * Returns the gl type. Currently only float is supported.\r\n     * \r\n     * @param {WebGLRenderingContext} gl The WebGL rendering context.\r\n     * @returns {Number} The type.\r\n     */\r\n    getGlType(gl) {\r\n        // Just floats for now\r\n        // TODO: Add additional types.\r\n        return gl.FLOAT;\r\n    }\r\n\r\n    /**\r\n     * Update the attribute in order for changes to take effect.\r\n     * \r\n     * @param {WebGLRenderingContext} gl The WebGL rendering context.\r\n     */\r\n    update(gl) {\r\n        gl.bindBuffer(this.bufferType, this.buffer);\r\n        gl.bufferData(this.bufferType, this.data, this.drawMode);\r\n\r\n        this.stale = false;\r\n    }\r\n\r\n    /**\r\n     * Create a new WebGL buffer.\r\n     * \r\n     * @param {WebGLRenderingContext} gl The WebGL rendering context.\r\n     * @param {WebGLProgram} program A WebGL program.\r\n     * @param {GLenum} bufferType The buffer type.\r\n     * @param {GLenum} drawMode The draw mode.\r\n     */\r\n    createBuffer(gl, program, bufferType, drawMode) {\r\n        this.buffer = gl.createBuffer();\r\n        this.bufferType = bufferType || gl.ARRAY_BUFFER;\r\n        this.drawMode = drawMode || gl.STATIC_DRAW;\r\n\r\n        gl.bindBuffer(this.bufferType, this.buffer);\r\n        gl.bufferData(this.bufferType, this.data, this.drawMode);\r\n\r\n        this.buffer.itemSize = this.attributeLength;\r\n        this.buffer.numItems = this.size;\r\n\r\n        this.attributeLocation = gl.getAttribLocation(program, this.name);\r\n        gl.bindBuffer(this.bufferType, null);\r\n    }\r\n\r\n    /**\r\n     * Bind the buffer of this attribute. The attribute must exist in the current shader.\r\n     * \r\n     * @param {WebGLRenderingContext} gl The WebGL rendering context.\r\n     */\r\n    bind(gl) {\r\n        gl.bindBuffer(this.bufferType, this.buffer);\r\n\r\n        // Only enable attribute if it actually exists in the Shader\r\n        if (this.attributeLocation >= 0) {\r\n            gl.vertexAttribPointer(this.attributeLocation, this.attributeLength, this.getGlType(gl), gl.FALSE, 0, 0);\r\n            gl.enableVertexAttribArray(this.attributeLocation);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Attribute;","//@ts-check\r\n\r\n/** \r\n * A class representing a Color. \r\n * \r\n * @property {Float32Array} components A typed array storing the components of this color (rgba).\r\n */\r\nclass Color {\r\n  /**\r\n   * Creates an instance of Color.\r\n   * @param {Number} r The red component (0.0 - 1.0).\r\n   * @param {Number} g The green component (0.0 - 1.0).\r\n   * @param {Number} b The blue component (0.0 - 1.0).\r\n   * @param {Number} [a=1.0] The alpha component (0.0 - 1.0).\r\n   */\r\n  constructor(r, g, b, a = 1.0) {\r\n    if (arguments.length === 1) {\r\n      this.components = new Float32Array(r);\r\n    } else {\r\n      this.components = new Float32Array(4);\r\n      this.components[0] = r || 0.0;\r\n      this.components[1] = g || 0.0;\r\n      this.components[2] = b || 0.0;\r\n      this.components[3] = a || 1.0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the red, green, blue and alpha components of the color.\r\n   * \r\n   * @param {Number} r The red component (0.0 - 1.0).\r\n   * @param {Number} g The green component (0.0 - 1.0).\r\n   * @param {Number} b The blue component (0.0 - 1.0).\r\n   * @param {Number} a The alpha component (0.0 - 1.0).\r\n   * @returns {Color} Returns itself.\r\n   */\r\n  set(r, g, b, a) {\r\n    this.components[0] = r;\r\n    this.components[1] = g;\r\n    this.components[2] = b;\r\n\r\n    if (arguments.length == 4) {\r\n      this.components[3] = a;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the red component of the color.\r\n   * \r\n   * @returns {Number} The red component of the color.\r\n   */\r\n  getR() {\r\n    return this.components[0];\r\n  }\r\n\r\n  /**\r\n   * Get the green component of the color.\r\n   * \r\n   * @returns {Number} The green component of the color.\r\n   */\r\n  getG() {\r\n    return this.components[1];\r\n  }\r\n\r\n  /**\r\n   * Get the blue component of the color.\r\n   * \r\n   * @returns {Number} The blue component of the color.\r\n   */\r\n  getB() {\r\n    return this.components[2];\r\n  }\r\n\r\n  /**\r\n   * Get the alpha component of the color.\r\n   * \r\n   * @returns {Number} The alpha component of the color.\r\n   */\r\n  getA() {\r\n    return this.components[3];\r\n  }\r\n\r\n  /**\r\n   * Convert this colour to a float.\r\n   * \r\n   * @returns {Number} A float representing this colour.\r\n   */\r\n  toFloat() {\r\n    return Color.rgbToFloat(this.getR() * 255.0, this.getG() * 255.0, this.getB() * 255.0);\r\n  }\r\n\r\n  /**\r\n   * Set the r,g,b components from a hex string.\r\n   * \r\n   * @static\r\n   * @param {string} hex A hex string in the form of #ABCDEF or #ABC.\r\n   * @returns {Color} A color representing the hex string.\r\n   */\r\n  static fromHex(hex) {\r\n    let rgb = Color.hexToRgb(hex);\r\n    return new Color(rgb[0] / 255.0, rgb[1] / 255.0, rgb[2] / 255.0, 1.0);\r\n  }\r\n\r\n  /**\r\n   * Create an rgb array from the r,g,b components from a hex string.\r\n   * \r\n   * @static\r\n   * @param {string} hex A hex string in the form of #ABCDEF or #ABC.\r\n   * @returns {Array} Returns an array containing rgb values.\r\n   */\r\n  static hexToRgb(hex) {\r\n    // Thanks to Tim Down\r\n    // http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\n\r\n    let shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n\r\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n      return r + r + g + g + b + b;\r\n    });\r\n\r\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    let r = parseInt(result[1], 16);\r\n    let g = parseInt(result[2], 16);\r\n    let b = parseInt(result[3], 16);\r\n\r\n    return [r, g, b];\r\n  }\r\n\r\n  /**\r\n   * Get the r, g or b value from a hue component.\r\n   * \r\n   * @static\r\n   * @param {Number} p \r\n   * @param {Number} q \r\n   * @param {Number} t \r\n   * @returns {Number} The r, g or b component value.\r\n   */\r\n  static hueToRgb(p, q, t) {\r\n    if (t < 0) {\r\n      t += 1;\r\n    } else if (t > 1) {\r\n      t -= 1;\r\n    } else if (t < 0.1667) {\r\n      return p + (q - p) * 6 * t;\r\n    } else if (t < 0.5) {\r\n      return q;\r\n    } else if (t < 0.6667) {\r\n      return p + (q - p) * (0.6667 - t) * 6;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Converts HSL to RGB.\r\n   * \r\n   * @static\r\n   * @param {Number} h The hue component.\r\n   * @param {Number} s The saturation component.\r\n   * @param {Number} l The lightness component.\r\n   * @returns {Number[]} An array containing the r, g and b values ([r, g, b]).\r\n   */\r\n  static hslToRgb(h, s, l) {\r\n    let r, g, b;\r\n\r\n    if (s == 0) {\r\n      r = g = b = l;\r\n    } else {\r\n      let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n      let p = 2 * l - q;\r\n      r = Color._hue2rgb(p, q, h + 1 / 3);\r\n      g = Color._hue2rgb(p, q, h);\r\n      b = Color._hue2rgb(p, q, h - 1 / 3);\r\n    }\r\n\r\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n  }\r\n\r\n  /**\r\n   * Helper for HSL to RGB converter.\r\n   */\r\n  static _hue2rgb(p, q, t) {\r\n    if (t < 0) t += 1;\r\n    if (t > 1) t -= 1;\r\n    if (t < 0.16666666666) return p + (q - p) * 6 * t;\r\n    if (t < 0.5) return q;\r\n    if (t < 0.66666666666) return p + (q - p) * (0.66666666666 - t) * 6;\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Converts HSL to Hex.\r\n   * \r\n   * @static\r\n   * @param {Number} h The hue component.\r\n   * @param {Number} s The saturation component.\r\n   * @param {Number} l The lightness component.\r\n   * @returns {String} A hex string representing the color (#RRGGBB).\r\n   */\r\n  static hslToHex(h, s, l) {\r\n    let [r, g, b] = Color.hslToRgb(h, s, l);\r\n    return '#' + [r, g, b].map(e => {\r\n      const hex = e.toString(16);\r\n      return hex.length === 1 ? '0' + hex : hex\r\n    }).join('')\r\n  }\r\n\r\n  /**\r\n   * Converts RGB to Hex.\r\n   * \r\n   * @static\r\n   * @param {Number} r The red component.\r\n   * @param {Number} g The green component.\r\n   * @param {Number} b The blue component.\r\n   * @returns {String} A hex string representing the color (#RRGGBB).\r\n   */\r\n  static rgbToHex(r, g, b) {\r\n    return '#' + [r, g, b].map(e => {\r\n      const hex = e.toString(16);\r\n      return hex.length === 1 ? '0' + hex : hex\r\n    }).join('')\r\n  }\r\n\r\n  /**\r\n   * Converts RGB to HSL.\r\n   * \r\n   * @static\r\n   * @param {Number} r The red component.\r\n   * @param {Number} g The green component.\r\n   * @param {Number} b The blue component.\r\n   * @returns {Number[]} An array containing the h, s and l values ([h, s, l]).\r\n   */\r\n  static rgbToHsl(r, g, b) {\r\n    r /= 255, g /= 255, b /= 255;\r\n\r\n    let max = Math.max(r, g, b);\r\n    let min = Math.min(r, g, b);\r\n    let h, s, l = (max + min) / 2;\r\n\r\n    if (max == min) {\r\n      h = s = 0; // achromatic\r\n    } else {\r\n      var d = max - min;\r\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n\r\n      switch (max) {\r\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n        case g: h = (b - r) / d + 2; break;\r\n        case b: h = (r - g) / d + 4; break;\r\n      }\r\n\r\n      h /= 6;\r\n    }\r\n\r\n    return [ h, s, l ];\r\n  }\r\n\r\n  /**\r\n   * Transform hsl to rgb colour values and then encode them as a 24-bit (highp) float.\r\n   * \r\n   * @static\r\n   * @param {Number} h \r\n   * @param {Number} [s=1.0] \r\n   * @param {Number} [l=0.5]\r\n   * @returns {number} A RGB colour (NOT hsl) encoded as a float.\r\n   */\r\n  static hslToFloat(h, s = 1.0, l = 0.5) {\r\n    let rgb = Color.hslToRgb(h, s, l);\r\n    return Math.floor(rgb[0] + rgb[1] * 256.0 + rgb[2] * 256.0 * 256.0);\r\n  }\r\n\r\n  /**\r\n   * Encode rgb colour values as a 24-bit (highp) float.\r\n   * \r\n   * @static\r\n   * @param {Number} r \r\n   * @param {Number} g \r\n   * @param {Number} b\r\n   * @returns {number} A RGB colour encoded as a float.\r\n   */\r\n  static rgbToFloat(r, g, b) {\r\n    return Math.floor(r + g * 256.0 + b * 256.0 * 256.0);\r\n  }\r\n\r\n  /**\r\n   * Encode a hex colour values as a 24-bit (highp) float.\r\n   * \r\n   * @static\r\n   * @param {String} hex A hex value encoding a colour. \r\n   * @returns {number} A RGB colour encoded as a float.\r\n   */\r\n  static hexToFloat(hex) {\r\n    let rgb = Color.hexToRgb(hex);\r\n    return Color.rgbToFloat(rgb[0], rgb[1], rgb[2]);\r\n  }\r\n\r\n  /**\r\n   * Decode rgb colour values from a 24-bit (highp) float.\r\n   * \r\n   * @static\r\n   * @param {Number} n \r\n   * @returns {*} An array containing rgb values. \r\n   */\r\n  static floatToRgb(n) {\r\n    let b = Math.floor(n / (256.0 * 256.0));\r\n    let g = Math.floor((n - b * (256.0 * 256.0)) / 256.0);\r\n    let r = Math.floor(n - b * (256.0 * 256.0) - g * 256.0);\r\n\r\n    return [r, g, b]\r\n  }\r\n\r\n  /**\r\n   * Decode hsl colour values from a 24-bit (highp) float.\r\n   * \r\n   * @static\r\n   * @param {Number} n \r\n   * @returns {*} An array containing hsl values. \r\n   */\r\n  static floatToHsl(n) {\r\n    let b = Math.floor(n / (256.0 * 256.0));\r\n    let g = Math.floor((n - b * (256.0 * 256.0)) / 256.0);\r\n    let r = Math.floor(n - b * (256.0 * 256.0) - g * 256.0);\r\n\r\n    return Color.rgbToHsl(r, g, b);\r\n  }\r\n\r\n  /**\r\n   * Shifts the hue so that 0.0 represents blue and 1.0 represents magenta.\r\n   * \r\n   * @static\r\n   * @param {Number} hue A hue component.\r\n   * @returns {Number} The hue component shifted so that 0.0 is blue and 1.0 is magenta.\r\n   */\r\n  static gdbHueShift(hue) {\r\n    hue = 0.85 * hue + 0.66;\r\n\r\n    if (hue > 1.0) {\r\n      hue = hue - 1.0;\r\n    }\r\n\r\n    hue = (1 - hue) + 0.33\r\n\r\n    if (hue > 1.0) {\r\n      hue = hue - 1.0\r\n    }\r\n\r\n    return hue;\r\n  }\r\n}\r\n\r\nmodule.exports = Color","//@ts-check\r\n\r\n/** A map mapping draw modes as strings to their GLInt representations. */\r\nlet DrawModes = {\r\n    points: 0,\r\n    lines: 1,\r\n    lineStrip: 2,\r\n    lineLoop: 3,\r\n    triangles: 4,\r\n    traingleStrip: 5,\r\n    triangleFan: 6\r\n}\r\n\r\nmodule.exports = DrawModes\r\n","//@ts-check\r\n\r\nconst Shaders = require('../Shaders');\r\n\r\nclass Effect {\r\n    constructor(renderer, shaderName) {\r\n        this.renderer = renderer;\r\n        this.gl = this.renderer.gl;\r\n\r\n        this.framebuffer = this.initFramebuffer();\r\n        this.texture = this.initTexture();\r\n        this.renderbuffer = this.initRenderbuffer();\r\n        this.shader = Shaders[shaderName].clone();\r\n        this.shader.init(this.renderer.gl);\r\n\r\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n    initBuffer() {\r\n      let g = this.gl;\r\n      let texCoordLocation = g.getAttribLocation(this.shader.program, 'v_coord');\r\n\r\n      // provide texture coordinates for the rectangle.\r\n      let texCoordBuffer = g.createBuffer();\r\n      g.bindBuffer(g.ARRAY_BUFFER, texCoordBuffer);\r\n      g.bufferData(g.ARRAY_BUFFER, new Float32Array([\r\n           1.0,  1.0,\r\n          -1.0,  1.0,\r\n          -1.0, -1.0,\r\n          -1.0, -1.0,\r\n           1.0, -1.0,\r\n           1.0,  1.0]), g.STATIC_DRAW);\r\n\r\n      g.enableVertexAttribArray(texCoordLocation);\r\n      g.vertexAttribPointer(texCoordLocation, 2, g.FLOAT, false, 0, 0);\r\n\r\n      return texCoordBuffer;\r\n    }\r\n\r\n    initTexture() {\r\n        let g = this.gl;\r\n\r\n        let texture = g.createTexture();\r\n        g.bindTexture(g.TEXTURE_2D, texture);\r\n        g.texParameteri(g.TEXTURE_2D, g.TEXTURE_WRAP_S, g.CLAMP_TO_EDGE);\r\n        g.texParameteri(g.TEXTURE_2D, g.TEXTURE_WRAP_T, g.CLAMP_TO_EDGE);\r\n        g.texParameteri(g.TEXTURE_2D, g.TEXTURE_MIN_FILTER, g.LINEAR);\r\n        g.texParameteri(g.TEXTURE_2D, g.TEXTURE_MAG_FILTER, g.LINEAR);\r\n\r\n        g.bindTexture(g.TEXTURE_2D, texture);\r\n        g.texImage2D(g.TEXTURE_2D, 0, g.RGBA, this.renderer.getWidth(), this.renderer.getHeight(), 0, g.RGBA, g.UNSIGNED_BYTE, null);\r\n\r\n        g.framebufferTexture2D(g.FRAMEBUFFER, g.COLOR_ATTACHMENT0, g.TEXTURE_2D, texture, 0);\r\n\r\n        return texture;\r\n    }\r\n\r\n    initFramebuffer() {\r\n        let g = this.gl;\r\n\r\n        let framebuffer = g.createFramebuffer();\r\n        g.bindFramebuffer(g.FRAMEBUFFER, framebuffer);\r\n        return framebuffer;\r\n    }\r\n\r\n    initRenderbuffer() {\r\n      let g = this.gl;\r\n\r\n      let renderbuffer = g.createRenderbuffer();\r\n      g.bindRenderbuffer(g.RENDERBUFFER, renderbuffer);\r\n\r\n      g.renderbufferStorage(g.RENDERBUFFER, g.DEPTH_COMPONENT16, this.renderer.getWidth(), this.renderer.getHeight());\r\n      g.framebufferRenderbuffer(g.FRAMEBUFFER, g.DEPTH_ATTACHMENT, g.RENDERBUFFER, renderbuffer);\r\n\r\n      // g.renderbufferStorage(g.RENDERBUFFER, g.DEPTH_STENCIL, this.renderer.getWidth(), this.renderer.getHeight());\r\n      // g.framebufferRenderbuffer(g.FRAMEBUFFER, g.DEPTH_STENCIL_ATTACHMENT, g.RENDERBUFFER, renderbuffer);\r\n\r\n      return renderbuffer;\r\n    }\r\n\r\n    bind() {\r\n        let g = this.gl;\r\n        g.bindFramebuffer(g.FRAMEBUFFER, this.framebuffer);\r\n        g.clear(g.COLOR_BUFFER_BIT | g.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    unbind() {\r\n        let g = this.gl;\r\n        g.bindRenderbuffer(g.RENDERBUFFER, null);\r\n        g.bindFramebuffer(g.FRAMEBUFFER, null);\r\n\r\n        this.initBuffer();\r\n        this.shader.use();\r\n        g.drawArrays(g.TRIANGLES, 0, 6);\r\n    }\r\n}\r\n\r\nmodule.exports = Effect","//@ts-check\r\n\r\nconst DrawModes = require('./DrawModes');\r\nconst Attribute = require('./Attribute');\r\nconst Matrix4f = require('../Math/Matrix4f');\r\nconst Node = require('./Node');\r\n\r\n/** \r\n * A class representing a geometry.\r\n * \r\n * @property {String} type The type name of this object (Lore.Geometry).\r\n * @property {String} name The name of this geometry.\r\n * @property {WebGLRenderingContext} gl A WebGL rendering context.\r\n * @property {Shader} shader An initialized shader.\r\n * @property {Object} attributes A map mapping attribute names to Lore.Attrubute objects.\r\n * @property {DrawMode} [drawMode=gl.POINTS] The current draw mode of this geometry.\r\n * @property {Boolean} isVisisble A boolean indicating whether or not this geometry is currently visible.\r\n */\r\nclass Geometry extends Node {\r\n  constructor(name, gl, shader) {\r\n      super();\r\n\r\n      this.type = 'Lore.Geometry';\r\n      this.name = name;\r\n      this.gl = gl;\r\n      this.shader = shader;\r\n      this.attributes = {};\r\n      this.drawMode = this.gl.POINTS;\r\n      this.isVisible = true;\r\n      this.stale = false;\r\n  }\r\n\r\n  addAttribute(name, data, length) {\r\n      this.attributes[name] = new Attribute(data, length, name);\r\n      this.attributes[name].createBuffer(this.gl, this.shader.program);\r\n\r\n      return this;\r\n  }\r\n\r\n  updateAttribute(name, data) {\r\n      if (data) {\r\n          this.attributes[name].data = data;\r\n      }\r\n\r\n      this.attributes[name].update(this.gl);\r\n\r\n      return this;\r\n  }\r\n\r\n  getAttribute(name) {\r\n      return this.attributes[name];\r\n  }\r\n\r\n  removeAttribute(name) {\r\n      delete this.attributes[name];\r\n\r\n      return this;\r\n  }\r\n\r\n  setMode(drawMode) {\r\n      switch (drawMode) {\r\n      case DrawModes.points:\r\n          this.drawMode = this.gl.POINTS;\r\n          break;\r\n      case DrawModes.lines:\r\n          this.drawMode = this.gl.LINES;\r\n          break;\r\n      case DrawModes.lineStrip:\r\n          this.drawMode = this.gl.LINE_STRIP;\r\n          break;\r\n      case DrawModes.lineLoop:\r\n          this.drawMode = this.gl.LINE_LOOP;\r\n          break;\r\n      case DrawModes.triangles:\r\n          this.drawMode = this.gl.TRIANGLES;\r\n          break;\r\n      case DrawModes.triangleStrip:\r\n          this.drawMode = this.gl.TRIANGLE_STRIP;\r\n          break;\r\n      case DrawModes.triangleFan:\r\n          this.drawMode = this.gl.TRIANGLE_FAN;\r\n          break;\r\n      }\r\n\r\n      return this;\r\n  }\r\n\r\n  size() {\r\n      // Is this ok? All attributes should have the same length ...\r\n      if (Object.keys(this.attributes).length > 0) {\r\n          return this.attributes[Object.keys(this.attributes)[0]].size;\r\n      }\r\n\r\n      return 0;\r\n  }\r\n\r\n  hide() {\r\n      this.isVisible = false;\r\n  }\r\n\r\n  show() {\r\n      this.isVisible = true;\r\n      this.stale = true;\r\n  }\r\n\r\n  draw(renderer) {\r\n      if (!this.isVisible) return;\r\n\r\n      for (let prop in this.attributes)\r\n          if (this.attributes[prop].stale) this.attributes[prop].update(this.gl);\r\n\r\n      this.shader.use();\r\n\r\n      // Update the modelView and projection matrices\r\n      if (renderer.camera.isProjectionMatrixStale || this.stale) {\r\n          this.shader.uniforms.projectionMatrix.setValue(renderer.camera.getProjectionMatrix());\r\n      }\r\n\r\n      if (renderer.camera.isViewMatrixStale || this.stale) {\r\n          let modelViewMatrix = Matrix4f.multiply(renderer.camera.viewMatrix, this.modelMatrix);\r\n          this.shader.uniforms.modelViewMatrix.setValue(modelViewMatrix.entries);\r\n      }\r\n\r\n      this.shader.updateUniforms();\r\n\r\n      for (let prop in this.attributes) {\r\n          this.attributes[prop].bind(this.gl);\r\n      }\r\n\r\n      this.gl.drawArrays(this.drawMode, 0, this.size());\r\n      this.stale = false;\r\n  }\r\n}\r\n\r\nmodule.exports = Geometry","//@ts-check\r\n\r\n\r\n/** \r\n * A class representing the molecular graph. \r\n * \r\n * @property {Array[]} distanceMatrix The distance matrix of this graph.\r\n */\r\nclass Graph {\r\n  /**\r\n   * The constructor of the class Graph.\r\n   * \r\n   * @param {Array[]} adjacencyMatrix The weighted adjacency matrix of a graph.\r\n   */\r\n  constructor(adjacencyMatrix) {\r\n    this.adjacencyMatrix = adjacencyMatrix;\r\n\r\n    // Replace zeros with infinity\r\n    for (var i = 0; i < this.adjacencyMatrix.length; i++) {\r\n      for (var j = 0; j < this.adjacencyMatrix.length; j++) {\r\n        if (this.adjacencyMatrix[i][j] === 0) {\r\n          this.adjacencyMatrix[i][j] = Infinity;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.distanceMatrix = this.getDistanceMatrix();\r\n    this.diameter = this.getDiameter();\r\n  }\r\n\r\n  /**\r\n   * Returns the unweighted adjacency matrix of this graph.\r\n   * \r\n   * @returns {Array} The unweighted adjacency matrix of this graph.\r\n   */\r\n  getUnweightedAdjacencyMatrix() {\r\n    let length = this.adjacencyMatrix.length;\r\n    let unweightedAdjacencyMatrix = Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      unweightedAdjacencyMatrix[i] = new Uint8Array(length);\r\n\r\n      for (var j = 0; j < length; j++) {\r\n        unweightedAdjacencyMatrix[i][j] = this.adjacencyMatrix[i][j] > 0 ? 1 : 0;\r\n      }\r\n    }\r\n\r\n    return unweightedAdjacencyMatrix;\r\n  }\r\n\r\n  /**\r\n   * Returns an edge list of this graph.\r\n   * \r\n   * @returns {Array} An array of edges in the form of [vertexId, vertexId, edgeWeight].\r\n   */\r\n  getEdgeList() {\r\n    let length = this.adjacencyMatrix.length;\r\n    let edgeList = Array();\r\n\r\n    for (var i = 0; i < length - 1; i++) {\r\n      for (var j = i; j < length; j++) {\r\n        if (this.adjacencyMatrix[i][j] !== Infinity) {\r\n          edgeList.push([i, j, this.adjacencyMatrix[i][j]]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return edgeList;\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  forceLayout(radius = 1000, iterations = 1000, q = 1.5, k = 0.01, ke = 1000.0, zoom = 1.0) {\r\n    let matDist = this.distanceMatrix.slice();\r\n    let length = matDist.length;\r\n    let nNeighbours = new Int16Array(length);\r\n\r\n    // Get the number of neighbours\r\n    for (var i = 0; i < length; i++) {\r\n      nNeighbours[i] = this.adjacencyMatrix[i].reduce((acc, val) => (val !== Infinity) ? ++acc : acc, 0);\r\n    }\r\n\r\n    // Square distances\r\n    for (var i = 0; i < length; i++) {\r\n      for (var j = 0; j < length; j++) {\r\n        matDist[i][j] = Math.pow(matDist[i][j], q);\r\n      }\r\n    }\r\n\r\n    // Normalize distance matrix\r\n    let max = 0.0;\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      for (var j = 0; j < length; j++) {\r\n        if (matDist[i][j] > max) {\r\n          max = matDist[i][j];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      for (var j = 0; j < length; j++) {\r\n        // Added math pow to decrease influence of long distances\r\n        matDist[i][j] = matDist[i][j] / max;\r\n      }\r\n    }\r\n\r\n    // Forces\r\n    let fx = new Float32Array(length);\r\n    let fy = new Float32Array(length);\r\n\r\n    // Positions\r\n    let px = new Float32Array(length);\r\n    let py = new Float32Array(length);\r\n\r\n    // Initialize positions to random values\r\n    for (var i = 0; i < length; i++) {\r\n      px[i] = Math.random() * radius;\r\n      py[i] = Math.random() * radius;\r\n    }\r\n\r\n    for (var n = 0; n < iterations; n++) {\r\n      // Spring forces\r\n      for (var i = 0; i < length - 1; i++) {\r\n        for (var j = i + 1; j < length; j++) {\r\n          if (matDist[i][j] === Infinity) {\r\n            continue;\r\n          }\r\n\r\n          let dx = px[i] - px[j];\r\n          let dy = py[i] - py[j];\r\n\r\n          let d = Math.sqrt(Math.pow(dx, 2.0) + Math.pow(dy, 2.0));\r\n\r\n          if (d === 0) {\r\n            d = 0.01;\r\n          }\r\n\r\n          // Normalize dx and dy to d\r\n          dx /= d;\r\n          dy /= d;\r\n\r\n          // Hooke's law, F=kX, is the force between x and y\r\n          let f = k * (matDist[i][j] * radius - d);\r\n\r\n          if (this.adjacencyMatrix[i][j] !== Infinity) {\r\n             f *= length;\r\n          }\r\n\r\n          fx[i] += f * dx;\r\n          fy[i] += f * dy;\r\n\r\n          fx[j] += -f * dx;\r\n          fy[j] += -f * dy;\r\n        }\r\n      }\r\n\r\n      // Repulsive forces between vertices\r\n      for (var i = 0; i < length - 1; i++) {\r\n        for (var j = i; j < length; j++) {\r\n          for (var j = i; j < length; j++) {\r\n            if (this.adjacencyMatrix[i][j] !== Infinity) {\r\n              continue;\r\n            }\r\n            \r\n            let dx = px[i] - px[j];\r\n            let dy = py[i] - py[j];\r\n\r\n            let dSquared = Math.pow(dx, 2.0) + Math.pow(dy, 2.0);\r\n            let d = Math.sqrt(dSquared);\r\n\r\n            if (d === 0) {\r\n              d = 0.01;\r\n            }\r\n\r\n            if (dSquared === 0) {\r\n              dSquared = 0.05;\r\n            }\r\n\r\n            // Normalize dx and dy to d\r\n            dx /= d;\r\n            dy /= d;\r\n\r\n            // Coulomb's law, F = k_e * q1 * q2 / r^2, is the force between x and y\r\n            let f = ke / dSquared;\r\n\r\n            fx[i] += f * dx;\r\n            fy[i] += f * dy;\r\n\r\n            fx[j] += -f * dx;\r\n            fy[j] += -f * dy;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Move the vertices\r\n      for (var i = 0; i < length; i++) {\r\n        \r\n\r\n        // fx[i] = Math.min(Math.max(-1, fx[i]), 1);\r\n        // fy[i] = Math.min(Math.max(-1, fy[i]), 1);\r\n\r\n        fx[i] = Math.sign(fx[i]) * Math.sqrt(Math.abs(fx[i]));\r\n        fy[i] = Math.sign(fy[i]) * Math.sqrt(Math.abs(fy[i]));\r\n\r\n        px[i] += fx[i];\r\n        py[i] += fy[i];\r\n      }\r\n\r\n      // Reset force and position deltas\r\n      for (var i = 0; i < length; i++) {\r\n        fx[i] = 0.0;\r\n        fy[i] = 0.0;\r\n      }\r\n    }\r\n\r\n    // Move the graph to the center\r\n    let avgX = 0.0;\r\n    let avgY = 0.0;\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      // Zoom\r\n      px[i] *= zoom;\r\n      py[i] *= zoom;\r\n\r\n      avgX += px[i];\r\n      avgY += py[i];  \r\n    }\r\n\r\n    avgX /= length;\r\n    avgY /= length;\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      px[i] = px[i] - (avgX - radius / 2.0);\r\n      py[i] = py[i] - (avgY - radius / 2.0);\r\n    }\r\n\r\n    let positions = Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      positions[i] = [px[i], py[i]];\r\n    }\r\n\r\n    return [positions, this.getEdgeList()];\r\n  }\r\n\r\n  /**\r\n   * Positiones the (sub)graph using Kamada and Kawais algorithm for drawing general undirected graphs. https://pdfs.semanticscholar.org/b8d3/bca50ccc573c5cb99f7d201e8acce6618f04.pdf\r\n   * \r\n   * @param {Number} radius The radius within which to initialize the vertices.\r\n   * @param {Boolean} logWeights Apply log() to the weights before layouting.\r\n   * @param {Boolean} squareWeights Apply pow(x,2) to the weights before layouting.\r\n   * @param {Boolean} normalizeWeights Normalize the edge weights before layouting and after log() or exp().\r\n   * @return {Array} An array of vertex positions of the form [ x, y ].\r\n   */\r\n  kkLayout(radius = 500, logWeights = false, squareWeights = false, normalizeWeights = false) {\r\n    let edgeStrength = 50.0;\r\n\r\n    let matDist = this.distanceMatrix;\r\n    let length = this.distanceMatrix.length;\r\n\r\n    // Transform data\r\n    if (logWeights) {\r\n      for (var i = 0; i < length; i++) {\r\n        for (var j = 0; j < length; j++) {\r\n          if (matDist[i][j] !== Infinity) {\r\n            matDist[i][j] = Math.log(matDist[i][j]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (normalizeWeights) {\r\n      for (var i = 0; i < length; i++) {\r\n        for (var j = 0; j < length; j++) {\r\n          if (matDist[i][j] !== Infinity && matDist[i][j] !== 0) {\r\n            matDist[i][j] = Math.pow(matDist[i][j], 2.0);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Normalize the edge weights\r\n    if (normalizeWeights) {\r\n      let maxWeight = 0;\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        for (var j = 0; j < length; j++) {\r\n          if (matDist[i][j] > maxWeight && matDist[i][j] !== Infinity) {\r\n            maxWeight = matDist[i][j];\r\n          }\r\n        }\r\n      }\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        for (var j = 0; j < length; j++) {\r\n          if (matDist[i][j] !== Infinity) {\r\n            matDist[i][j] = matDist[i][j] / maxWeight;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Initialize the positions. Place all vertices on a ring around the center\r\n    let halfR\r\n    let angle = 2 * Math.PI / length;\r\n    let a = 0.0;\r\n    let arrPositionX = new Float32Array(length);\r\n    let arrPositionY = new Float32Array(length);\r\n    let arrPositioned = Array(length);\r\n    let l = radius / (2 * this.diameter);\r\n    console.log('l: ' + l);\r\n    console.log('diameter: ' + this.diameter);\r\n\r\n    radius /= 2.0;\r\n\r\n    var i = length;\r\n    while (i--) {\r\n      arrPositionX[i] = radius + Math.cos(a) * radius;\r\n      arrPositionY[i] = radius + Math.sin(a) * radius;\r\n\r\n      arrPositioned[i] = false;\r\n      a += angle;\r\n    }\r\n\r\n    // Create the matrix containing the lengths\r\n    let matLength = Array(length);\r\n    i = length;\r\n    while (i--) {\r\n      matLength[i] = new Array(length);\r\n      var j = length;\r\n      while (j--) {\r\n        matLength[i][j] = l * matDist[i][j];\r\n      }\r\n    }\r\n\r\n    // Create the matrix containing the spring strenghts\r\n    let matStrength = Array(length);\r\n    i = length;\r\n    while (i--) {\r\n      matStrength[i] = Array(length);\r\n      var j = length;\r\n      while (j--) {\r\n        matStrength[i][j] = edgeStrength * Math.pow(matDist[i][j], -2.0);\r\n      }\r\n    }\r\n\r\n    // Create the matrix containing the energies\r\n    let matEnergy = Array(length);\r\n    let arrEnergySumX = new Float32Array(length);\r\n    let arrEnergySumY = new Float32Array(length);\r\n    i = length;\r\n    while (i--) {\r\n      matEnergy[i] = Array(length);\r\n    }\r\n\r\n    i = length;\r\n    let ux, uy, dEx, dEy, vx, vy, denom;\r\n\r\n    while (i--) {\r\n      ux = arrPositionX[i];\r\n      uy = arrPositionY[i];\r\n      dEx = 0.0;\r\n      dEy = 0.0;\r\n      let j = length;\r\n      while (j--) {\r\n        if (i === j) {\r\n          continue;\r\n        }\r\n        vx = arrPositionX[j];\r\n        vy = arrPositionY[j];\r\n        denom = 1.0 / Math.sqrt((ux - vx) * (ux - vx) + (uy - vy) * (uy - vy));\r\n        matEnergy[i][j] = [\r\n          matStrength[i][j] * ((ux - vx) - matLength[i][j] * (ux - vx) * denom) || 0.0,\r\n          matStrength[i][j] * ((uy - vy) - matLength[i][j] * (uy - vy) * denom) || 0.0\r\n        ]\r\n        matEnergy[j][i] = matEnergy[i][j];\r\n        dEx += matEnergy[i][j][0];\r\n        dEy += matEnergy[i][j][1];\r\n      }\r\n      arrEnergySumX[i] = dEx;\r\n      arrEnergySumY[i] = dEy;\r\n    }\r\n\r\n    // Utility functions, maybe inline them later\r\n    let energy = function (index) {\r\n      return [arrEnergySumX[index] * arrEnergySumX[index] + arrEnergySumY[index] * arrEnergySumY[index], arrEnergySumX[index], arrEnergySumY[index]];\r\n    }\r\n\r\n    let highestEnergy = function () {\r\n      let maxEnergy = 0.0;\r\n      let maxEnergyId = 0;\r\n      let maxDEX = 0.0;\r\n      let maxDEY = 0.0\r\n\r\n      i = length;\r\n      while (i--) {\r\n        let [delta, dEX, dEY] = energy(i);\r\n\r\n        if (delta > maxEnergy) {\r\n          maxEnergy = delta;\r\n          maxEnergyId = i;\r\n          maxDEX = dEX;\r\n          maxDEY = dEY;\r\n        }\r\n      }\r\n\r\n      return [maxEnergyId, maxEnergy, maxDEX, maxDEY];\r\n    }\r\n\r\n    let update = function (index, dEX, dEY) {\r\n      let dxx = 0.0;\r\n      let dyy = 0.0;\r\n      let dxy = 0.0;\r\n      let ux = arrPositionX[index];\r\n      let uy = arrPositionY[index];\r\n      let arrL = matLength[index];\r\n      let arrK = matStrength[index];\r\n\r\n      i = length;\r\n      while (i--) {\r\n        if (i === index) {\r\n          continue;\r\n        }\r\n\r\n        let vx = arrPositionX[i];\r\n        let vy = arrPositionY[i];\r\n        let l = arrL[i];\r\n        let k = arrK[i];\r\n        let m = (ux - vx) * (ux - vx);\r\n        let denom = 1.0 / Math.pow(m + (uy - vy) * (uy - vy), 1.5);\r\n\r\n        dxx += k * (1 - l * (uy - vy) * (uy - vy) * denom) || 0.0;\r\n        dyy += k * (1 - l * m * denom) || 0.0;\r\n        dxy += k * (l * (ux - vx) * (uy - vy) * denom) || 0.0;\r\n      }\r\n\r\n      // Prevent division by zero\r\n      if (dxx === 0) {\r\n        dxx = 0.1;\r\n      }\r\n\r\n      if (dyy === 0) {\r\n        dyy = 0.1;\r\n      }\r\n\r\n      if (dxy === 0) {\r\n        dxy = 0.1;\r\n      }\r\n\r\n      let dy = (dEX / dxx + dEY / dxy);\r\n      dy /= (dxy / dxx - dyy / dxy); // had to split this onto two lines because the syntax highlighter went crazy.\r\n      let dx = -(dxy * dy + dEX) / dxx;\r\n\r\n      arrPositionX[index] += dx;\r\n      arrPositionY[index] += dy;\r\n\r\n      // Update the energies\r\n      let arrE = matEnergy[index];\r\n      dEX = 0.0;\r\n      dEY = 0.0;\r\n\r\n      ux = arrPositionX[index];\r\n      uy = arrPositionY[index];\r\n\r\n      let vx, vy, prevEx, prevEy, denom;\r\n\r\n      i = length;\r\n      while (i--) {\r\n        if (index === i) {\r\n          continue;\r\n        }\r\n        vx = arrPositionX[i];\r\n        vy = arrPositionY[i];\r\n        // Store old energies\r\n        prevEx = arrE[i][0];\r\n        prevEy = arrE[i][1];\r\n        denom = 1.0 / Math.sqrt((ux - vx) * (ux - vx) + (uy - vy) * (uy - vy));\r\n        dx = arrK[i] * ((ux - vx) - arrL[i] * (ux - vx) * denom) || 0.0;\r\n        dy = arrK[i] * ((uy - vy) - arrL[i] * (uy - vy) * denom) || 0.0;\r\n\r\n        arrE[i] = [dx, dy];\r\n        dEX += dx;\r\n        dEY += dy;\r\n        arrEnergySumX[i] += dx - prevEx;\r\n        arrEnergySumY[i] += dy - prevEy;\r\n      }\r\n      arrEnergySumX[index] = dEX;\r\n      arrEnergySumY[index] = dEY;\r\n    }\r\n\r\n    // Setting parameters\r\n    let threshold = 0.1;\r\n    let innerThreshold = 0.1;\r\n    let maxIteration = 6000;\r\n    let maxInnerIteration = 10;\r\n    let maxEnergy = 1e9;\r\n\r\n    // Setting up variables for the while loops\r\n    let maxEnergyId = 0;\r\n    let dEX = 0.0;\r\n    let dEY = 0.0;\r\n    let delta = 0.0;\r\n    let iteration = 0;\r\n    let innerIteration = 0;\r\n\r\n    while (maxEnergy > threshold && maxIteration > iteration) {\r\n      iteration++;\r\n      [maxEnergyId, maxEnergy, dEX, dEY] = highestEnergy();\r\n\r\n      delta = maxEnergy;\r\n      innerIteration = 0;\r\n      while (delta > innerThreshold && maxInnerIteration > innerIteration) {\r\n        innerIteration++;\r\n        update(maxEnergyId, dEX, dEY);\r\n        [delta, dEX, dEY] = energy(maxEnergyId);\r\n      }\r\n    }\r\n\r\n    let positions = Array(length);\r\n\r\n    i = length;\r\n    while (i--) {\r\n      positions[i] = [arrPositionX[i], arrPositionY[i]];\r\n    }\r\n\r\n    return [positions, this.getEdgeList()];\r\n  }\r\n\r\n  getDiameter() {\r\n    let diameter = 0;\r\n\r\n    for (var i = 0; i < this.distanceMatrix.length - 1; i++) {\r\n      for (var j = i; j < this.distanceMatrix.length; j++) {\r\n        if (this.distanceMatrix[i][j] > diameter && this.distanceMatrix[i][j] < Infinity) {\r\n          diameter = this.distanceMatrix[i][j];\r\n        }\r\n      }\r\n    }\r\n\r\n    return diameter;\r\n  }\r\n\r\n  /**\r\n   * Get the distance matrix of the graph.\r\n   * \r\n   * @returns {Array[]} The distance matrix of the graph.\r\n   */\r\n  getDistanceMatrix() {\r\n    let length = this.adjacencyMatrix.length;\r\n    let dist = Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      dist[i] = new Float32Array(length);\r\n      dist[i].fill(Infinity);\r\n    }\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      for (var j = 0; j < length; j++) {\r\n        if (this.adjacencyMatrix[i][j] < Infinity) {\r\n          dist[i][j] = this.adjacencyMatrix[i][j];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (var k = 0; k < length; k++) {\r\n      for (var i = 0; i < length; i++) {\r\n        for (var j = 0; j < length; j++) {\r\n          if (dist[i][j] > dist[i][k] + dist[k][j]) {\r\n            dist[i][j] = dist[i][k] + dist[k][j]\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return dist;\r\n  }\r\n\r\n  /**\r\n   * Returns a new graph object. Vertex ids have to be 0 to n.\r\n   * \r\n   * @param {Array[]} edgeList An edge list in the form [ [ vertexId, vertexId, weight ], ... ].\r\n   * @param {Boolean} invertWeights Whether or not to invert the weights.\r\n   * @returns {Graph} A graph object.\r\n   */\r\n  static fromEdgeList(edgeList, invertWeights = false) {\r\n    // Get the max vertex id.\r\n    let max = 0;\r\n    for (var i = 0; i < edgeList.length; i++) {\r\n      if (edgeList[i][0] > max) {\r\n        max = edgeList[i][0];\r\n      }\r\n\r\n      if (edgeList[i][1] > max) {\r\n        max = edgeList[i][1];\r\n      }\r\n    }\r\n\r\n    max++;\r\n\r\n    if (invertWeights) {\r\n      let maxWeight = 0;\r\n\r\n      for (var i = 0; i < edgeList.length; i++) {\r\n        if (edgeList[i][2] > maxWeight) {\r\n          maxWeight = edgeList[i][2];\r\n        }\r\n      }\r\n\r\n      maxWeight++;\r\n\r\n      for (var i = 0; i < edgeList.length; i++) {\r\n        edgeList[i][2] = maxWeight - edgeList[i][2];\r\n      }\r\n    }\r\n\r\n    let adjacencyMatrix = Array(max);\r\n\r\n    for (var i = 0; i < max; i++) {\r\n      adjacencyMatrix[i] = new Float32Array(max);\r\n      adjacencyMatrix[i].fill(0);\r\n    }\r\n\r\n    for (var i = 0; i < edgeList.length; i++) {\r\n      let edge = edgeList[i];\r\n      adjacencyMatrix[edge[0]][edge[1]] = edge[2];\r\n      adjacencyMatrix[edge[1]][edge[0]] = edge[2];\r\n    }\r\n\r\n    return new Graph(adjacencyMatrix);\r\n  }\r\n}\r\n\r\nmodule.exports = Graph","//@ts-check\r\n\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst Quaternion = require('../Math/Quaternion');\r\nconst Matrix3f = require('../Math/Matrix3f');\r\nconst Matrix4f = require('../Math/Matrix4f');\r\n\r\n/**\r\n * A class representing a node. A node is the base-class for all 3D objects.\r\n * \r\n * @property {String} type The type name of this object (Node).\r\n * @property {String} id A GUID uniquely identifying the node.\r\n * @property {Boolean} isVisible A boolean indicating whether or not the node is visible (rendered).\r\n * @property {Vector3f} position The position of this node.\r\n * @property {Quaternion} rotation The rotation of this node.\r\n * @property {Vector3f} scale The scale of this node.\r\n * @property {Vector3f} up The up vector associated with this node.\r\n * @property {Matrix3f} normalMatrix The normal matrix of this node.\r\n * @property {Matrix4f} modelMatrix The model matrix associated with this node.\r\n * @property {Boolean} isStale A boolean indicating whether or not the modelMatrix of this node is stale.\r\n * @property {Node[]} children An array containing child-nodes.\r\n * @property {Node} parent The parent node.\r\n */\r\nclass Node {\r\n    /**\r\n     * Creates an instance of Node.\r\n     */\r\n    constructor() {\r\n        this.type = 'Node';\r\n        this.id = Node.createGUID();\r\n        this.isVisible = true;\r\n        this.position = new Vector3f(0.0, 0.0, 0.0);\r\n        this.rotation = new Quaternion(0.0, 0.0, 0.0, 0.0);\r\n        this.scale = new Vector3f(1.0, 1.0, 1.0);\r\n        this.up = new Vector3f(0.0, 1.0, 0.0);\r\n        this.normalMatrix = new Matrix3f();\r\n        this.modelMatrix = new Matrix4f();\r\n        this.isStale = false;\r\n\r\n        this.children = new Array();\r\n        this.parent = null;\r\n    }\r\n\r\n    /**\r\n     * Apply a matrix to the model matrix of this node.\r\n     * \r\n     * @param {Matrix4f} matrix A matrix.\r\n     * @returns {Node} Itself.\r\n     */\r\n    applyMatrix(matrix) {\r\n        this.modelMatrix.multiplyB(matrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the up vector for this node.\r\n     * \r\n     * @returns {Vector3f} The up vector for this node.\r\n     */\r\n    getUpVector() {\r\n        let v = new Vector3f(0, 1, 0);\r\n\r\n        return v.applyQuaternion(this.rotation);\r\n    }\r\n\r\n    /**\r\n     * Returns the forward vector for this node.\r\n     * \r\n     * @returns {Vector3f} The forward vector for this node.\r\n     */\r\n    getForwardVector() {\r\n        let v = new Vector3f(0, 0, 1);\r\n\r\n        return v.applyQuaternion(this.rotation);\r\n    }\r\n\r\n    /**\r\n     * Returns the right vector for this node.\r\n     * \r\n     * @returns {Vector3f} The right vector for this node.\r\n     */\r\n    getRightVector() {\r\n        let v = new Vector3f(1, 0, 0);\r\n\r\n        return v.applyQuaternion(this.rotation);\r\n    }\r\n\r\n    /**\r\n     * Translates this node on an axis.\r\n     * \r\n     * @param {Vector3f} axis A vector representing an axis.\r\n     * @param {Number} distance The distance for which to move the node along the axis.\r\n     * @returns {Node} Itself.\r\n     */\r\n    translateOnAxis(axis, distance) {\r\n        // Axis should be normalized, following THREE.js\r\n        let v = new Vector3f(axis.components[0], axis.components[1],\r\n            axis.components[2]);\r\n        v.applyQuaternion(this.rotation);\r\n        v.multiplyScalar(distance);\r\n        this.position.add(v);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the node along the x-axis.\r\n     * \r\n     * @param {Number} distance The distance for which to move the node along the x-axis.\r\n     * @returns {Node} Itself.\r\n     */\r\n    translateX(distance) {\r\n        this.position.components[0] = this.position.components[0] + distance;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the node along the y-axis.\r\n     * \r\n     * @param {Number} distance The distance for which to move the node along the y-axis.\r\n     * @returns {Node} Itself.\r\n     */\r\n    translateY(distance) {\r\n        this.position.components[1] = this.position.components[1] + distance;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the node along the z-axis.\r\n     * \r\n     * @param {Number} distance The distance for which to move the node along the z-axis.\r\n     * @returns {Node} Itself.\r\n     */\r\n    translateZ(distance) {\r\n        this.position.components[2] = this.position.components[2] + distance;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the translation (position) of this node.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Node} Itself.\r\n     */\r\n    setTranslation(v) {\r\n        this.position = v;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the rotation from an axis and an angle.\r\n     * \r\n     * @param {Vector3f} axis A vector representing an angle\r\n     * @param {Number} angle An angle.\r\n     * @returns {Node} Itself.\r\n     */\r\n    setRotation(axis, angle) {\r\n        this.rotation.setFromAxisAngle(axis, angle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate this node by an angle on an axis.\r\n     * \r\n     * @param {Vector3f} axis A vector representing an angle\r\n     * @param {Number} angle An angle.\r\n     * @returns {Node} Itself.\r\n     */\r\n    rotate(axis, angle) {\r\n        let q = new Quaternion(axis, angle);\r\n\r\n        this.rotation.multiplyA(q);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate around the x-axis.\r\n     * \r\n     * @param {Number} angle An angle.\r\n     * @returns {Node} Itself.\r\n     */\r\n    rotateX(angle) {\r\n        this.rotation.rotateX(angle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate around the y-axis.\r\n     * \r\n     * @param {Number} angle An angle.\r\n     * @returns {Node} Itself.\r\n     */\r\n    rotateY(angle) {\r\n        this.rotation.rotateY(angle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate around the z-axis.\r\n     * \r\n     * @param {Number} angle An angle.\r\n     * @returns {Node} Itself.\r\n     */\r\n    rotateZ(angle) {\r\n        this.rotation.rotateZ(angle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get the rotation matrix for this node.\r\n     * \r\n     * @returns {Matrix4f} This nodes rotation matrix.\r\n     */\r\n    getRotationMatrix() {\r\n        return this.rotation.toRotationMatrix();\r\n    }\r\n\r\n    /**\r\n     * Update the model matrix of this node. Has to be called in order to apply scaling, rotations or translations.\r\n     * \r\n     * @returns {Node} Itself.\r\n     */\r\n    update() {\r\n        this.modelMatrix.compose(this.position, this.rotation, this.scale);\r\n        // if parent... this.modelMatrix = Matrix4f.multiply(this.parent.modelMatrix, this.modelMatrix);\r\n        this.isStale = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the model matrix as an array. \r\n     * \r\n     * @returns {Float32Array} The model matrix.\r\n     */\r\n    getModelMatrix() {\r\n        return this.modelMatrix.entries;\r\n    }\r\n\r\n    /**\r\n     * Creates a GUID.\r\n     * \r\n     * @returns {String} A GUID.\r\n     */\r\n    static createGUID() {\r\n        // See:\r\n        // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            let r = Math.random() * 16 | 0,\r\n                v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n                \r\n            return v.toString(16);\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = Node;","//@ts-check\r\n// const Lore = require('../Lore');\r\nconst Shaders = require('../Shaders')\r\nconst Effect = require('./Effect')\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst Color = require('./Color');\r\nconst Utils = require('../Utils/Utils');\r\nconst Geometry = require('./Geometry');\r\nconst ControlsBase = require('../Controls/ControlsBase');\r\nconst OrbitalControls = require('../Controls/OrbitalControls');\r\nconst CameraBase = require('../Cameras/CameraBase');\r\nconst OrthographicCamera = require('../Cameras/OrthographicCamera');\r\n\r\n/** \r\n * A class representing the WebGL renderer. \r\n * \r\n * @property {Object} opts An object containing options.\r\n * @property {Any} camera The camera associated with this renderer.\r\n * @property {ControlsBase} controls The controls associated with this renderer.\r\n */\r\nclass Renderer {\r\n\r\n  /**\r\n   * Creates an instance of Renderer.\r\n   * @param {Element} target A canvas element.\r\n   * @param {any} options The options.\r\n   */\r\n  constructor(target, options) {\r\n    this.defaults = {\r\n      antialiasing: true,\r\n      verbose: false,\r\n      fpsElement: document.getElementById('fps'),\r\n      clearColor: Color.fromHex('#000000'),\r\n      clearDepth: 1.0,\r\n      radius: 500,\r\n      center: new Vector3f(0.0, 0.0, 0.0),\r\n      enableDepthTest: true,\r\n      alphaBlending: false,\r\n      preserveDrawingBuffer: false\r\n    }\r\n\r\n    this.opts = Utils.extend(true, this.defaults, options);\r\n\r\n    this.canvas = target;\r\n    this.webgl2 = true;\r\n    this.parent = this.canvas.parentElement;\r\n    this.fps = 0;\r\n    this.fpsCount = 0;\r\n    this.maxFps = 1000 / 30;\r\n    this.devicePixelRatio = this.getDevicePixelRatio();\r\n    this.camera = new OrthographicCamera(this.getWidth() / -2, this.getWidth() / 2, this.getHeight() / 2, this.getHeight() / -2);\r\n    // this.camera = new PerspectiveCamera(25.0, this.getWidth() / this.getHeight());\r\n\r\n    this.geometries = {};\r\n    this.ready = false;\r\n    this.gl = null;\r\n    this.render = function (camera, geometries) { };\r\n    this.effect = null;\r\n    this.lastTiming = performance.now();\r\n\r\n    this.disableContextMenu();\r\n\r\n    let that = this;\r\n    that.init();\r\n\r\n    // Attach the controls last\r\n    let center = options.center ? options.center : new Vector3f(0.0, 0.0, 0.0);\r\n\r\n    this.controls = new OrbitalControls(that, this.opts.radius || 500, center);\r\n  }\r\n\r\n  /**\r\n   * Initialize and start the renderer.\r\n   */\r\n  init() {\r\n    let _this = this;\r\n\r\n    let settings = {\r\n      antialias: this.opts.antialiasing,\r\n      preserveDrawingBuffer: this.opts.preserveDrawingBuffer\r\n    };\r\n\r\n    this.gl = this.canvas.getContext('webgl2', settings) || this.canvas.getContext('experimental-webgl2');\r\n\r\n    if (!this.gl) {\r\n      this.webgl2 = false;\r\n      this.gl = this.canvas.getContext('webgl', settings) ||\r\n        this.canvas.getContext('experimental-webgl', settings);\r\n    }\r\n\r\n    if (!this.gl) {\r\n      console.error('Could not initialize the WebGL context.');\r\n      return;\r\n    }\r\n\r\n    let g = this.gl;\r\n\r\n    if (this.opts.verbose) {\r\n      let hasAA = g.getContextAttributes().antialias;\r\n      let size = g.getParameter(g.SAMPLES);\r\n      console.info('Antialiasing: ' + hasAA + ' (' + size + 'x)');\r\n\r\n      let highp = g.getShaderPrecisionFormat(g.FRAGMENT_SHADER, g.HIGH_FLOAT);\r\n      let hasHighp = highp.precision != 0;\r\n      console.info('High precision support: ' + hasHighp);\r\n\r\n      console.info('WebGL2 supported: ' + this.webgl2);\r\n    }\r\n\r\n    // Extensions\r\n    let oes = 'OES_standard_derivatives';\r\n    let extOes = g.getExtension(oes);\r\n\r\n    if (extOes === null) {\r\n      console.warn('Could not load extension: ' + oes + '.');\r\n    }\r\n\r\n    let wdb = 'WEBGL_draw_buffers';\r\n    let extWdb = g.getExtension(wdb);\r\n\r\n    if (extWdb === null) {\r\n      console.warn('Could not load extension: ' + wdb + '.');\r\n    }\r\n\r\n    let wdt = 'WEBGL_depth_texture';\r\n    let extWdt = g.getExtension(wdt);\r\n\r\n    if (extWdt === null) {\r\n      console.warn('Could not load extension: ' + wdt + '.');\r\n    }\r\n\r\n    let fgd = 'EXT_frag_depth';\r\n    let extFgd = g.getExtension(fgd);\r\n\r\n    if (extFgd === null) {\r\n      console.warn('Could not load extension: ' + fgd + '.');\r\n    }\r\n\r\n    this.setClearColor(this.opts.clearColor);\r\n\r\n    // Blending\r\n    // if (!this.webgl2) {\r\n    if (!this.opts.alphaBlending) {\r\n      g.clearDepth(this.opts.clearDepth);\r\n\r\n      if (this.opts.enableTransparency) {\r\n        g.blendFunc(g.SRC_ALPHA, g.ONE_MINUS_SRC_ALPHA);\r\n        g.enable(g.BLEND);\r\n        g.disable(g.DEPTH_TEST);\r\n      } else if (this.opts.enableDepthTest) {\r\n        g.enable(g.DEPTH_TEST);\r\n        g.depthFunc(g.LEQUAL);\r\n\r\n        if (this.opts.verbose) {\r\n          console.log('enable depth test');\r\n        }\r\n      }\r\n    } else {\r\n      // Idea, write to fragdepth\r\n      // https://www.reddit.com/r/opengl/comments/1fthbc/is_gl_fragdepth_ignored_when_depth_writes_are_off/\r\n      // g.disable(g.DEPTH_TEST);\r\n      // g.enable(g.BLEND);\r\n      // g.blendFunc(g.ONE, g.ONE);\r\n      g.disable(g.DEPTH_TEST);\r\n      g.blendFunc(g.SRC_ALPHA, g.ONE_MINUS_SRC_ALPHA); // To disable the background color of the canvas element\r\n      g.blendFuncSeparate(g.SRC_ALPHA, g.ONE_MINUS_SRC_ALPHA, g.ZERO, g.ONE);\r\n      g.enable(g.BLEND);\r\n    }\r\n\r\n    this.ready = true;\r\n    this.animate();\r\n  }\r\n\r\n  /**\r\n   * Disables the context menu on the canvas element. \r\n   */\r\n  disableContextMenu() {\r\n    // Disable context menu on right click\r\n    this.canvas.addEventListener('contextmenu', function (e) {\r\n      if (e.button === 2) {\r\n        e.preventDefault();\r\n        return false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the clear color of this renderer.\r\n   * \r\n   * @param {Color} color The clear color.\r\n   */\r\n  setClearColor(color) {\r\n    this.opts.clearColor = color;\r\n\r\n    let cc = this.opts.clearColor.components;\r\n\r\n    this.gl.clearColor(cc[0], cc[1], cc[2], cc[3]);\r\n  }\r\n\r\n  /**\r\n   * Get the actual width of the canvas.\r\n   * \r\n   * @returns {Number} The width of the canvas.\r\n   */\r\n  getWidth() {\r\n    return this.canvas.offsetWidth;\r\n  }\r\n\r\n  /**\r\n   * Get the actual height of the canvas.\r\n   * \r\n   * @returns {Number} The height of the canvas.\r\n   */\r\n  getHeight() {\r\n    return this.canvas.offsetHeight;\r\n  }\r\n\r\n  /**\r\n   * Update the viewport. Should be called when the canvas is resized.\r\n   * \r\n   * @param {Number} x The horizontal offset of the viewport.\r\n   * @param {Number} y The vertical offset of the viewport.\r\n   * @param {Number} width The width of the viewport.\r\n   * @param {Number} height The height of the viewport.\r\n   */\r\n  updateViewport(x, y, width, height) {\r\n    width *= this.devicePixelRatio;\r\n    height *= this.devicePixelRatio;\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n    this.gl.viewport(x, y, width, height);\r\n\r\n    this.camera.updateViewport(width, height);\r\n    this.camera.updateProjectionMatrix();\r\n  }\r\n\r\n  /**\r\n   * The main rendering loop. \r\n   */\r\n  animate() {\r\n    this.updateViewport(0, 0, this.getWidth(), this.getHeight());\r\n    let that = this;\r\n\r\n    setTimeout(function () {\r\n      requestAnimationFrame(function () {\r\n        that.animate();\r\n      });\r\n    }, this.maxFps);\r\n\r\n    if (this.opts.fpsElement) {\r\n      let now = performance.now();\r\n      let delta = now - this.lastTiming;\r\n\r\n      this.lastTiming = now;\r\n      if (this.fpsCount < 10) {\r\n        this.fps += Math.round(1000.0 / delta);\r\n        this.fpsCount++;\r\n      } else { // \r\n        this.opts.fpsElement.innerHTML = Math.round(this.fps / this.fpsCount);\r\n        this.fpsCount = 0;\r\n        this.fps = 0;\r\n      }\r\n    }\r\n\r\n    // this.effect.bind();\r\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n    // this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n    this.render(this.camera, this.geometries);\r\n    // this.effect.unbind();\r\n\r\n    this.camera.isProjectionMatrixStale = false;\r\n    this.camera.isViewMatrixStale = false;\r\n  }\r\n\r\n  /**\r\n   * Creates and adds a geometry to the scene graph.\r\n   * \r\n   * @param {String} name The name of the geometry.\r\n   * @param {String} shaderName The name of the shader used to render the geometry.\r\n   * @returns {Geometry} The created geometry.\r\n   */\r\n  createGeometry(name, shaderName) {\r\n    let shader = Shaders[shaderName].clone();\r\n    shader.init(this.gl, this.webgl2);\r\n    let geometry = new Geometry(name, this.gl, shader);\r\n\r\n    this.geometries[name] = geometry;\r\n\r\n    return geometry;\r\n  }\r\n\r\n  /**\r\n   * Set the maximum frames per second of this renderer.\r\n   * \r\n   * @param {Number} fps Maximum frames per second.\r\n   */\r\n  setMaxFps(fps) {\r\n    this.maxFps = fps;\r\n  }\r\n\r\n  /**\r\n   * Get the device pixel ratio.\r\n   * \r\n   * @returns {Number} The device pixel ratio.\r\n   */\r\n  getDevicePixelRatio() {\r\n    return window.devicePixelRatio || 1;\r\n  }\r\n}\r\n\r\nmodule.exports = Renderer\r\n","//@ts-check\r\n\r\nconst Uniform = require('./Uniform');\r\nconst Matrix4f = require('../Math/Matrix4f');\r\n\r\n/**\r\n * A class representing a shader.\r\n * \r\n * @property {String} name The name of the shader.\r\n * @property {Object} uniforms A map mapping uniform names to Lore Uniform instances.\r\n * \r\n */\r\nclass Shader {\r\n    constructor(name, glVersion, uniforms, vertexShader, fragmentShader, fallback = 'circle') {\r\n        this.name = name;\r\n        this.uniforms = uniforms || {};\r\n        this.vertexShader = vertexShader || [];\r\n        this.fragmentShader = fragmentShader || [];\r\n        this.glVersion = glVersion;\r\n        this.fallback = fallback;\r\n        this.gl = null;\r\n        this.program = null;\r\n        this.initialized = false;\r\n        this.lastTime = new Date().getTime();\r\n        \r\n        // Add the two default shaders (the same shaders as in getVertexShader)\r\n        this.uniforms['modelViewMatrix'] = new Uniform('modelViewMatrix',\r\n            (new Matrix4f()).entries, 'float_mat4');\r\n\r\n        this.uniforms['projectionMatrix'] = new Uniform('projectionMatrix',\r\n            (new Matrix4f()).entries, 'float_mat4');\r\n    }\r\n    \r\n    clone() {\r\n        let uniforms = {};\r\n\r\n        for (let key in this.uniforms) {\r\n            uniforms[key] = this.uniforms[key].clone();\r\n        }\r\n\r\n        return new Shader(this.name, this.glVersion, uniforms, this.vertexShader, this.fragmentShader);\r\n    }\r\n\r\n    getVertexShaderCode() {\r\n        return this.vertexShader.join('\\n');\r\n    }\r\n\r\n    getFragmentShaderCode() {\r\n        return this.fragmentShader.join('\\n');\r\n    }\r\n\r\n    getVertexShader(gl, isWebGL2 = false) {\r\n        let shader = gl.createShader(gl.VERTEX_SHADER);\r\n        let vertexShaderCode = '';\r\n\r\n        if (!isWebGL2 && this.glVersion === 2) {\r\n          throw('The shader expects WebGL 2.0');\r\n        } else if (this.glVersion === 2) {\r\n          vertexShaderCode += '#version 300 es\\n';\r\n        }\r\n\r\n        vertexShaderCode += 'uniform mat4 modelViewMatrix;\\n' +\r\n            'uniform mat4 projectionMatrix;\\n\\n' +\r\n            this.getVertexShaderCode();\r\n            \r\n        gl.shaderSource(shader, vertexShaderCode);\r\n        gl.compileShader(shader);\r\n\r\n        Shader.showCompilationInfo(gl, shader, this.name, 'Vertex Shader');\r\n        return shader;\r\n    }\r\n\r\n    getFragmentShader(gl, isWebGL2 = false) {\r\n        let shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\r\n        let fragmentShaderCode = '';\r\n\r\n        if (!isWebGL2 && this.glVersion === 2) {\r\n          throw('The shader expects WebGL 2.0');\r\n        } else if (this.glVersion === 2) {\r\n          fragmentShaderCode += '#version 300 es\\n';\r\n        }\r\n\r\n        // Adding precision, see:\r\n        // http://stackoverflow.com/questions/27058064/why-do-i-need-to-define-a-precision-value-in-webgl-shaders\r\n        // and:\r\n        // http://stackoverflow.com/questions/13780609/what-does-precision-mediump-float-mean\r\n        fragmentShaderCode += '#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n\\n' +\r\n            '#ifdef GL_ES\\nprecision highp float;\\n#endif\\n\\n' +\r\n            this.getFragmentShaderCode();\r\n\r\n        gl.shaderSource(shader, fragmentShaderCode);\r\n        gl.compileShader(shader);\r\n\r\n        Shader.showCompilationInfo(gl, shader, this.name, 'Fragment Shader');\r\n        return shader;\r\n    }\r\n\r\n    init(gl, isWebGL2 = false) {\r\n        this.gl = gl;\r\n        this.program = this.gl.createProgram();\r\n        let vertexShader = this.getVertexShader(this.gl, isWebGL2);\r\n        let fragmentShader = this.getFragmentShader(this.gl, isWebGL2);\r\n\r\n        if (!vertexShader || !fragmentShader) {\r\n            console.error('Failed to create the fragment or the vertex shader.');\r\n            return null;\r\n        }\r\n\r\n        this.gl.attachShader(this.program, vertexShader);\r\n        this.gl.attachShader(this.program, fragmentShader);\r\n\r\n        this.gl.linkProgram(this.program);\r\n\r\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\r\n            console.error('Could not link program.\\n' +\r\n                'VALIDATE_STATUS: ' + this.gl.getProgramParameter(this.program, this.gl.VALIDATE_STATUS) + '\\n' +\r\n                'ERROR: ' + this.gl.getError());\r\n            return null;\r\n        }\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    updateUniforms(renderer) {\r\n        // Always update time uniform if it exists\r\n        if (this.uniforms['time']) {\r\n            let unif = this.uniforms['time'];\r\n            \r\n            let currentTime = new Date().getTime();\r\n            unif.value += currentTime - this.lastTime;\r\n            this.lastTime = currentTime;\r\n\r\n            Uniform.Set(this.gl, this.program, unif);\r\n            \r\n            unif.stale = false;\r\n        }\r\n        for (let uniform in this.uniforms) {\r\n            let unif = this.uniforms[uniform];\r\n            if (unif.stale) {\r\n                Uniform.Set(this.gl, this.program, unif);\r\n            }\r\n        }\r\n    }\r\n\r\n    use() {\r\n      this.gl.useProgram(this.program);\r\n      this.updateUniforms();\r\n    }\r\n\r\n    static showCompilationInfo(gl, shader, name, prefix) {\r\n        prefix = prefix || 'Shader';\r\n        // This was stolen from THREE.js\r\n        // https://github.com/mrdoob/three.js/blob/master/src/renderers/webgl/WebGLShader.js\r\n        if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n            console.error(prefix + ' ' + name + ' did not compile.');\r\n        }\r\n\r\n        if (gl.getShaderInfoLog(shader) !== '') {\r\n            console.warn(prefix + ' ' + name + ' info log: ' + gl.getShaderInfoLog(shader));\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Shader","//@ts-check\r\n\r\n/** \r\n * A class representing a tree. \r\n * \r\n * @property {Array} tree An array of arrays where the index is the node id and the inner arrays contain the neighbours.\r\n */\r\nclass Tree {\r\n  /**\r\n   * The constructor of the class Tree.\r\n   * \r\n   * @param {Array[]} tree An array of arrays where the index is the node id and the inner arrays contain the neighbours.\r\n   * @param {Array[]} weights An array of arrays where the index is the node id and the inner arrays contain the weights in the same order as tree contains neighbours.\r\n   */\r\n  constructor(tree, weights) {\r\n    this.tree = tree;\r\n    this.weights = weights;\r\n  }\r\n\r\n  /**\r\n   * Layout the tree\r\n   */\r\n  layout() {\r\n    let root = 0;\r\n    let visited = new Uint8Array(this.tree.length);\r\n    let pX = new Float32Array(this.tree.length);\r\n    let pY = new Float32Array(this.tree.length);\r\n    let queue = [root];\r\n    visited[root] = 1;\r\n    let current = null;\r\n    \r\n    // Position initial node\r\n    pX[root] = 20.0;\r\n    pY[root] = 10.0;\r\n\r\n    while (queue.length > 0) {\r\n      current = queue.shift();\r\n\r\n      let offset = 0;\r\n      for (var i = 0; i < this.tree[current].length; i++) {\r\n        let child = this.tree[current][i];\r\n\r\n        if (visited[child] === 0) {\r\n          // Do some positioning\r\n\r\n          pX[child] = pX[current] + this.weights[current][i] * 5.0;\r\n          pY[child] = pY[current] + offset++ * 10.0 * this.weights[current][i];\r\n\r\n          let fX = 0.0;\r\n          let fY = 0.0;\r\n\r\n          for (var j = 0; j < length; j++) {\r\n            if (visited[j] === 0) {\r\n              continue;\r\n            }\r\n\r\n            let distSquared = Math.pow(pX[j] - pX[child], 2.0) + Math.pow(pY[j] - pY[child], 2.0);\r\n            let dist = Math.sqrt(distSquared);\r\n            \r\n            let fAttractive = 1000 / distSquared;\r\n          }\r\n\r\n          // Done with positioning\r\n\r\n          visited[child] = 1;\r\n          queue.push(child);\r\n        }\r\n      }\r\n    }\r\n\r\n    let positions = Array(this.tree.length);\r\n\r\n    for (var i = 0; i < this.tree.length; i++) {\r\n      positions[i] = [ pX[i], pY[i] ];\r\n    }\r\n\r\n    return positions;\r\n  }\r\n\r\n  /**\r\n   * Create a tree from an edge list. \r\n   */\r\n  static fromEdgeList(edgeList) {\r\n    let length = 0;\r\n\r\n    for (var i = 0; i < edgeList.length; i++) {\r\n      if (edgeList[i][0] > length) {\r\n        length = edgeList[i][0];\r\n      }\r\n\r\n      if (edgeList[i][1] > length) {\r\n        length = edgeList[i][1];\r\n      }\r\n    }\r\n\r\n    length++;\r\n\r\n    let neighbours = Array(length);\r\n    let weights = Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      neighbours[i] = Array();\r\n      weights[i] = Array();\r\n    }\r\n\r\n    for (var i = 0; i < edgeList.length; i++) {\r\n      neighbours[edgeList[i][0]].push(edgeList[i][1]);\r\n      neighbours[edgeList[i][1]].push(edgeList[i][0]);\r\n\r\n      weights[edgeList[i][0]].push(edgeList[i][2]);\r\n      weights[edgeList[i][1]].push(edgeList[i][2]);\r\n    }\r\n\r\n    return new Tree(neighbours, weights);\r\n  }\r\n}\r\n\r\nmodule.exports = Tree","//@ts-check\r\n\r\n/**\r\n * A class representing a uniform.\r\n * \r\n * @property {String} name The name of this uniform. Also the variable name in the shader.\r\n * @property {Number|number[]|Float32Array} value The value of this uniform.\r\n * @property {String} type The type of this uniform. Available types: int, int_vec2, int_vec3, int_vec4, int_array, float, float_vec2, float_vec3, float_vec4, float_array, float_mat2, float_mat3, float_mat4.\r\n * @property {Boolean} stale A boolean indicating whether or not this uniform is stale and needs to be updated.\r\n */\r\nclass Uniform {\r\n    /**\r\n     * Creates an instance of Uniform.\r\n     * @param {String} name The name of this uniform. Also the variable name in the shader.\r\n     * @param {Number|number[]|Float32Array} value The value of this uniform.\r\n     * @param {String} type The type of this uniform. Available types: int, int_vec2, int_vec3, int_vec4, int_array, float, float_vec2, float_vec3, float_vec4, float_array, float_mat2, float_mat3, float_mat4.\r\n     */\r\n    constructor(name, value, type) {\r\n        this.name = name;\r\n        this.value = value;\r\n        this.type = type;\r\n        this.stale = true;\r\n    }\r\n\r\n    /**\r\n     * Create and return a new instance of this uniform.\r\n     * \r\n     * @returns {Uniform} A clone of this uniform.\r\n     */\r\n    clone() {\r\n      return new Uniform(this.name, this.value, this.type);\r\n    }\r\n\r\n    /**\r\n     * Set the value of this uniform.\r\n     * \r\n     * @param {Number} value A number which is valid for the specified type.\r\n     */\r\n    setValue(value) {\r\n        this.value = value;\r\n        this.stale = true;\r\n    }\r\n\r\n    /**\r\n     * Pushes the uniform to the GPU.\r\n     * \r\n     * @param {WebGLRenderingContext} gl A WebGL rendering context.\r\n     * @param {WebGLUniformLocation} program \r\n     * @param {Uniform} uniform \r\n     */\r\n    static Set(gl, program, uniform) {\r\n        let location = gl.getUniformLocation(program, uniform.name);\r\n\r\n        if (uniform.type === 'int') {\r\n            gl.uniform1i(location, uniform.value);\r\n        } else if (uniform.type === 'int_vec2') {\r\n            gl.uniform2iv(location, uniform.value);\r\n        } else if (uniform.type === 'int_vec3') {\r\n            gl.uniform3iv(location, uniform.value);\r\n        } else if (uniform.type === 'int_vec4') {\r\n            gl.uniform4iv(location, uniform.value);\r\n        } else if (uniform.type === 'int_array') {\r\n            gl.uniform1iv(location, uniform.value);\r\n        } else if (uniform.type === 'float') {\r\n            gl.uniform1f(location, uniform.value);\r\n        } else if (uniform.type === 'float_vec2') {\r\n            gl.uniform2fv(location, uniform.value);\r\n        } else if (uniform.type === 'float_vec3') {\r\n            gl.uniform3fv(location, uniform.value);\r\n        } else if (uniform.type === 'float_vec4') {\r\n            gl.uniform4fv(location, uniform.value);\r\n        } else if (uniform.type === 'float_array') {\r\n            gl.uniform1fv(location, uniform.value);\r\n        } else if (uniform.type === 'float_mat2') {\r\n            // false, see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix\r\n            gl.uniformMatrix2fv(location, false, uniform.value);\r\n        } else if (uniform.type === 'float_mat3') {\r\n            gl.uniformMatrix3fv(location, false, uniform.value);\r\n        } else if (uniform.type === 'float_mat4') {\r\n            gl.uniformMatrix4fv(location, false, uniform.value);\r\n        }\r\n\r\n        // TODO: Add SAMPLER_2D and SAMPLER_CUBE\r\n\r\n        // Had to set this to true because point sizes did not update...\r\n        uniform.stale = true;\r\n    }\r\n}\r\n\r\nmodule.exports = Uniform","const Attribute = require('./Attribute');\r\nconst Color = require('./Color');\r\nconst DrawModes = require('./DrawModes');\r\nconst Effect = require('./Effect');\r\nconst Geometry = require('./Geometry');\r\nconst Graph = require('./Graph');\r\nconst Node = require('./Node');\r\nconst Renderer = require('./Renderer');\r\nconst Shader = require('./Shader');\r\nconst Tree = require('./Tree');\r\nconst Uniform = require('./Uniform');\r\n\r\nmodule.exports = {\r\n  Attribute,\r\n  Color,\r\n  DrawModes,\r\n  Effect,\r\n  Geometry,\r\n  Graph,\r\n  Node,\r\n  Renderer,\r\n  Shader,\r\n  Tree,\r\n  Uniform\r\n}","//@ts-check\r\n\r\nconst Geometry = require('../Core/Geometry');\r\n\r\n/** \r\n * An abstract class representing the base for filter implementations. \r\n * \r\n * @property {string} type The type name of this object (Lore.FilterBase).\r\n * @property {Geometry} geometry The Geometry associated with this filter.\r\n * @property {string} attribute The name of the attribute to filter on.\r\n * @property {number} attributeIndex The attribute-index to filter on.\r\n * @property {boolean} active Whether or not the filter is active.\r\n */\r\nclass FilterBase {\r\n\r\n    /**\r\n     * Creates an instance of FilterBase.\r\n     * @param {string} attribute The name of the attribute to filter on.\r\n     * @param {number} attributeIndex The attribute-index to filter on.\r\n     */\r\n    constructor(attribute, attributeIndex) {\r\n        this.type = 'Lore.FilterBase';\r\n        this.geometry = null;\r\n        this.attribute = attribute;\r\n        this.attributeIndex = attributeIndex;\r\n        this.active = false;\r\n    }\r\n\r\n    /**\r\n     * Returns the geometry associated with this filter.\r\n     * \r\n     * @returns {Geometry} The geometry associated with this filter.\r\n     */\r\n    getGeometry() {\r\n        return this.geometry;\r\n    }\r\n\r\n    /**\r\n     * Sets the geometry associated with this filter.\r\n     * \r\n     * @param {Geometry} value The geometry to be associated with this filter.\r\n     */\r\n    setGeometry(value) {\r\n        this.geometry = value;\r\n    }\r\n\r\n    /**\r\n     * Abstract method. \r\n     */\r\n    filter() {\r\n\r\n    }\r\n\r\n    /**\r\n     * Abstract method. \r\n     */\r\n    reset() {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Check whether or not a vertex with a given index is visible. A vertex is visible when its color attribute is > 0.0 at attribute-index 2 (the size in HSS).\r\n     *\r\n     * @param {Geometry} geometry A Lore.Geometry with a color attribute.\r\n     * @param {number} index A vertex index.\r\n     * @returns {boolean} A boolean indicating whether or not the vertex specified by index is visible (HSS size > 0.0).\r\n     */\r\n    static isVisible(geometry, index) {\r\n        return geometry.attributes['color'].data[index * 3 + 2] > 0.0;\r\n    }\r\n}\r\n\r\nmodule.exports = FilterBase","//@ts-check\r\n\r\nconst FilterBase = require('./FilterBase');\r\nconst Color = require('../Core/Color');\r\n\r\n/** \r\n * A class representing an In-Range-Filter. It is used to filter a geometry based on a min and max value. \r\n * @property {number} min The minimum value.\r\n * @property {number} max The maximum value.\r\n * */\r\nclass InRangeFilter extends FilterBase {\r\n  /**\r\n   * Creates an instance of InRangeFilter.\r\n   * @param {string} attribute The name of the attribute to filter on.\r\n   * @param {number} attributeIndex The attribute-index to filter on.\r\n   * @param {number} min The minum value.\r\n   * @param {number} max The maximum value.\r\n   */\r\n  constructor(attribute, attributeIndex, min, max) {\r\n    super(attribute, attributeIndex);\r\n\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  /**\r\n   * Get the minimum.\r\n   * \r\n   * @returns {number} The minimum.\r\n   */\r\n  getMin() {\r\n    return this.min;\r\n  }\r\n\r\n  /**\r\n   * Set the minimum.\r\n   * \r\n   * @param {number} value The minimum.\r\n   */\r\n  setMin(value) {\r\n    this.min = value;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum.\r\n   * \r\n   * @returns {number} The maximum.\r\n   */\r\n  getMax() {\r\n    return this.max;\r\n  }\r\n\r\n  /**\r\n   * Set the maximum.\r\n   * \r\n   * @param {number} value The maximum.\r\n   */\r\n  setMax(value) {\r\n    this.max = value;\r\n  }\r\n\r\n  /**\r\n   * Execute the filter operation on the specified attribute and attribute-index. In order to filter, the HSS size value (attribute-index 2 of the color attribute) is set to its negative (1.0 -> -1.0, 2.5 -> -2.5).\r\n   */\r\n  filter() {\r\n    let attribute = this.geometry.attributes[this.attribute];\r\n    let isHue = (this.attribute === 'color') && (this.attributeIndex === 0);\r\n\r\n    for (let i = 0; i < attribute.data.length; i += attribute.attributeLength) {\r\n      let value = attribute.data[i + this.attributeIndex];\r\n\r\n      if (isHue) {\r\n        value = Color.floatToHsl(value)[0];\r\n      }\r\n\r\n      let size = this.geometry.attributes['color'].data[i + 2];\r\n      if (value > this.max || value < this.min) {\r\n        this.geometry.attributes['color'].data[i + 2] = -Math.abs(size);\r\n      } else {\r\n        this.geometry.attributes['color'].data[i + 2] = Math.abs(size);\r\n      }\r\n    }\r\n\r\n    this.geometry.updateAttribute('color');\r\n  }\r\n\r\n  /**\r\n   * Resets the filter (\"removes\" it). The HSS size value is set back to its original value (-1.0 -> 1.0, -2.5 -> 2.5). \r\n   */\r\n  reset() {\r\n    let attribute = this.geometry.attributes[this.attribute];\r\n\r\n    for (let i = 0; i < attribute.data.length; i += attribute.attributeLength) {\r\n      let size = this.geometry.attributes['color'].data[i + 2];\r\n      this.geometry.attributes['color'].data[i + 2] = Math.abs(size);\r\n    }\r\n\r\n    this.geometry.updateAttribute('color');\r\n  }\r\n}\r\n\r\nmodule.exports = InRangeFilter","const FilterBase = require('./FilterBase');\r\nconst InRangeFilter = require('./InRangeFilter');\r\n\r\nmodule.exports = {\r\n  FilterBase,\r\n  InRangeFilter\r\n}","//@ts-check\r\n\r\nconst DrawModes = require('../Core/DrawModes');\r\nconst HelperBase = require('./HelperBase');\r\nconst Utils = require('../Utils/Utils');\r\n\r\n/** A helper class for drawing axis aligned bounding boxes. */\r\nclass AABBHelper extends HelperBase {\r\n    /**\r\n     * Creates an instance of AABBHelper.\r\n     * \r\n     * @param {Renderer} renderer A Lore.Renderer object.\r\n     * @param {array} aabbs An array containing axis-aligned bounding boxes.\r\n     * @param {string} geometryName The name of the geometry used to render the axis-aligned bounding boxes.\r\n     * @param {string} shaderName The name of the shader used to render the axis-aligned bounding boxes.\r\n     * @param {object} options Options for drawing the axis-aligned bounding boxes.\r\n     */\r\n    constructor(renderer, aabbs, geometryName, shaderName, options) {\r\n        // TODO: Fix error\r\n        super(renderer, geometryName, shaderName);\r\n\r\n        // Create lines\r\n        // Replaced with indexed?\r\n\r\n        let p = new Float32Array(aabbs.length * 24 * 3);\r\n        let c = new Float32Array(aabbs.length * 24 * 3);\r\n\r\n        let index = 0;\r\n\r\n        for (let i = 0; i < aabbs.length; i++) {\r\n            let aabb = aabbs[0];\r\n            let cx = aabb.center.components[0];\r\n            let cy = aabb.center.components[1];\r\n            let cz = aabb.center.components[2];\r\n            let r = aabb.radius;\r\n\r\n            let p0 = [ cx - r, cy - r, cz - r ];\r\n            let p1 = [ cx - r, cy - r, cz + r ];\r\n            let p2 = [ cx - r, cy + r, cz - r ];\r\n            let p3 = [ cx - r, cy + r, cz + r ];\r\n            let p4 = [ cx + r, cy - r, cz - r ];\r\n            let p5 = [ cx + r, cy - r, cz + r ];\r\n            let p6 = [ cx + r, cy + r, cz - r ];\r\n            let p7 = [ cx + r, cy + r, cz + r ];\r\n\r\n            p[index++] = p0[0]; p[index++] = p0[1]; p[index++] = p0[2];\r\n            p[index++] = p1[0]; p[index++] = p1[1]; p[index++] = p1[2];\r\n            p[index++] = p0[0]; p[index++] = p0[1]; p[index++] = p0[2];\r\n            p[index++] = p2[0]; p[index++] = p2[1]; p[index++] = p2[2];\r\n            p[index++] = p0[0]; p[index++] = p0[1]; p[index++] = p0[2];\r\n            p[index++] = p4[0]; p[index++] = p4[1]; p[index++] = p4[2];\r\n\r\n            p[index++] = p1[0]; p[index++] = p1[1]; p[index++] = p1[2];\r\n            p[index++] = p3[0]; p[index++] = p3[1]; p[index++] = p3[2];\r\n            p[index++] = p1[0]; p[index++] = p1[1]; p[index++] = p1[2];\r\n            p[index++] = p5[0]; p[index++] = p5[1]; p[index++] = p5[2];\r\n\r\n            p[index++] = p2[0]; p[index++] = p2[1]; p[index++] = p2[2];\r\n            p[index++] = p3[0]; p[index++] = p3[1]; p[index++] = p3[2];\r\n            p[index++] = p2[0]; p[index++] = p2[1]; p[index++] = p2[2];\r\n            p[index++] = p6[0]; p[index++] = p6[1]; p[index++] = p6[2];\r\n\r\n            p[index++] = p3[0]; p[index++] = p3[1]; p[index++] = p3[2];\r\n            p[index++] = p7[0]; p[index++] = p7[1]; p[index++] = p7[2];\r\n\r\n            p[index++] = p4[0]; p[index++] = p4[1]; p[index++] = p4[2];\r\n            p[index++] = p5[0]; p[index++] = p5[1]; p[index++] = p5[2];\r\n            p[index++] = p4[0]; p[index++] = p4[1]; p[index++] = p4[2];\r\n            p[index++] = p6[0]; p[index++] = p6[1]; p[index++] = p6[2];\r\n\r\n            p[index++] = p5[0]; p[index++] = p5[1]; p[index++] = p5[2];\r\n            p[index++] = p7[0]; p[index++] = p7[1]; p[index++] = p7[2];\r\n\r\n            p[index++] = p6[0]; p[index++] = p6[1]; p[index++] = p6[2];\r\n            p[index++] = p7[0]; p[index++] = p7[1]; p[index++] = p7[2];\r\n        }\r\n\r\n\r\n        \r\n        this.opts = Utils.extend(true, AABBHelper.defaults, options);\r\n        this.geometry.setMode(DrawModes.lines);\r\n\r\n        this.setAttribute('position', p);\r\n        this.setAttribute('color', c);\r\n    }\r\n}\r\n\r\nmodule.exports = AABBHelper","//@ts-check\r\n\r\nconst Color = require('../Core/Color');\r\nconst HelperBase = require('./HelperBase');\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst Utils = require('../Utils/Utils');\r\nconst DrawModes = require('../Core/DrawModes');\r\nconst PointHelper = require('./PointHelper')\r\n\r\n/** A helper class for drawing coordinate system indicators. For example, a grid cube. */\r\nclass CoordinatesHelper extends HelperBase {\r\n\r\n    /**\r\n     * Creates an instance of CoordinatesHelper.\r\n     * \r\n     * @param {Renderer} renderer A Lore.Renderer object.\r\n     * @param {string} geometryName The name of this geometry.\r\n     * @param {string} shaderName The name of the shader used to render the coordinates.\r\n     * @param {object} options Options for drawing the coordinates. See documentation for details.\r\n     */\r\n    constructor(renderer, geometryName, shaderName = 'coordinates', options = {}) {\r\n        super(renderer, geometryName, shaderName);\r\n        this.defaults = {\r\n            position: new Vector3f(0.0, 0.0, 0.0),\r\n            axis: {\r\n                x: {\r\n                    length: 50.0,\r\n                    color: Color.fromHex('#222222')\r\n                },\r\n                y: {\r\n                    length: 50.0,\r\n                    color: Color.fromHex('#222222')\r\n                },\r\n                z: {\r\n                    length: 50.0,\r\n                    color: Color.fromHex('#222222')\r\n                }\r\n            },\r\n            ticks: {\r\n                enabled: true,\r\n                x: {\r\n                    count: 10,\r\n                    length: 5.0,\r\n                    offset: new Vector3f(0.0, 0.0, 0.0),\r\n                    color: Color.fromHex('#1f1f1f')\r\n                },\r\n                y: {\r\n                    count: 10,\r\n                    length: 5.0,\r\n                    offset: new Vector3f(0.0, 0.0, 0.0),\r\n                    color: Color.fromHex('#1f1f1f')\r\n                },\r\n                z: {\r\n                    count: 10,\r\n                    length: 5.0,\r\n                    offset: new Vector3f(0.0, 0.0, 0.0),\r\n                    color: Color.fromHex('#1f1f1f')\r\n                }\r\n            },\r\n            box: {\r\n                enabled: true,\r\n                x: {\r\n                    color: Color.fromHex('#222222')\r\n                },\r\n                y: {\r\n                    color: Color.fromHex('#222222')\r\n                },\r\n                z: {\r\n                    color: Color.fromHex('#222222')\r\n                }\r\n            },\r\n        }\r\n\r\n        this.opts = Utils.extend(true, this.defaults, options);\r\n\r\n        this.geometry.setMode(DrawModes.lines);\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * Initializes the coordinates system.\r\n     */\r\n    init() {\r\n        let p = this.opts.position.components;\r\n        let ao = this.opts.axis;\r\n\r\n        // Setting the origin position of the axes\r\n        let positions = [\r\n            p[0], p[1], p[2], p[0] + ao.x.length, p[1], p[2],\r\n            p[0], p[1], p[2], p[0], p[1] + ao.y.length, p[2],\r\n            p[0], p[1], p[2], p[0], p[1], p[2] + ao.z.length\r\n        ];\r\n\r\n        // Setting the colors of the axes\r\n        let cx = ao.x.color.components;\r\n        let cy = ao.y.color.components;\r\n        let cz = ao.z.color.components;\r\n\r\n        let colors = [\r\n            cx[0], cx[1], cx[2], cx[0], cx[1], cx[2],\r\n            cy[0], cy[1], cy[2], cy[0], cy[1], cy[2],\r\n            cz[0], cz[1], cz[2], cz[0], cz[1], cz[2]\r\n        ];\r\n\r\n        // Adding the box\r\n        if (this.opts.box.enabled) {\r\n            let bx = this.opts.box.x.color.components;\r\n            let by = this.opts.box.y.color.components;\r\n            let bz = this.opts.box.z.color.components;\r\n\r\n            positions.push(\r\n                p[0] + ao.x.length, p[1] + ao.y.length, p[2] + ao.z.length, p[0], p[1] + ao.y.length, p[2] + ao.z.length,\r\n                p[0] + ao.x.length, p[1], p[2] + ao.z.length, p[0], p[1], p[2] + ao.z.length,\r\n                p[0] + ao.x.length, p[1] + ao.y.length, p[2], p[0], p[1] + ao.y.length, p[2],\r\n                p[0] + ao.x.length, p[1] + ao.y.length, p[2] + ao.z.length, p[0] + ao.x.length, p[1], p[2] + ao.z.length,\r\n                p[0], p[1] + ao.y.length, p[2] + ao.z.length, p[0], p[1], p[2] + ao.z.length,\r\n                p[0] + ao.x.length, p[1] + ao.y.length, p[2], p[0] + ao.x.length, p[1], p[2],\r\n                p[0] + ao.x.length, p[1] + ao.y.length, p[2] + ao.z.length, p[0] + ao.x.length, p[1] + ao.y.length, p[2],\r\n                p[0], p[1] + ao.y.length, p[2] + ao.z.length, p[0], p[1] + ao.y.length, p[2],\r\n                p[0] + ao.x.length, p[1], p[2] + ao.z.length, p[0] + ao.x.length, p[1], p[2]\r\n            );\r\n\r\n            colors.push(\r\n                bx[0], bx[1], bx[2], bx[0], bx[1], bx[2],\r\n                bx[0], bx[1], bx[2], bx[0], bx[1], bx[2],\r\n                bx[0], bx[1], bx[2], bx[0], bx[1], bx[2],\r\n                by[0], by[1], by[2], by[0], by[1], by[2],\r\n                by[0], by[1], by[2], by[0], by[1], by[2],\r\n                by[0], by[1], by[2], by[0], by[1], by[2],\r\n                bz[0], bz[1], bz[2], bz[0], bz[1], bz[2],\r\n                bz[0], bz[1], bz[2], bz[0], bz[1], bz[2],\r\n                bz[0], bz[1], bz[2], bz[0], bz[1], bz[2]\r\n            );\r\n        }\r\n\r\n        // Adding the ticks\r\n        if (this.opts.ticks.enabled) {\r\n            let xTicks = this.opts.ticks.x, xTickOffset = ao.x.length / xTicks.count;\r\n            let yTicks = this.opts.ticks.y, yTickOffset = ao.y.length / yTicks.count;\r\n            let zTicks = this.opts.ticks.z, zTickOffset = ao.z.length / zTicks.count;\r\n\r\n            // X ticks\r\n            let pos = p[0];\r\n            let col = xTicks.color.components;\r\n\r\n            for (let i = 0; i < xTicks.count - 1; i++) {\r\n                pos += xTickOffset;\r\n                // From\r\n                positions.push(pos + xTicks.offset.components[0], p[1] + xTicks.offset.components[1], p[2] + xTicks.offset.components[2],\r\n                            pos + xTicks.offset.components[0], p[1] + xTicks.offset.components[1] + xTicks.length, p[2] + xTicks.offset.components[2]);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n\r\n            pos = p[0];\r\n\r\n            for (let i = 0; i < xTicks.count - 1; i++) {\r\n                pos += xTickOffset;\r\n                // From\r\n                positions.push(pos + xTicks.offset.components[0], p[1] + xTicks.offset.components[1], p[2] + xTicks.offset.components[2],\r\n                            pos + xTicks.offset.components[0], p[1] + xTicks.offset.components[1], p[2] + xTicks.offset.components[2] + xTicks.length);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n\r\n            // Y ticks\r\n            pos = p[1];\r\n            col = yTicks.color.components;\r\n\r\n            for (let i = 0; i < yTicks.count - 1; i++) {\r\n                pos += yTickOffset;\r\n                // From\r\n                positions.push(p[0] + yTicks.offset.components[0], pos + yTicks.offset.components[1], p[2] + yTicks.offset.components[2],\r\n                            p[0] + yTicks.offset.components[0] + yTicks.length, pos + yTicks.offset.components[1], p[2] + yTicks.offset.components[2]);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n\r\n            pos = p[1];\r\n\r\n            for (let i = 0; i < yTicks.count - 1; i++) {\r\n                pos += yTickOffset;\r\n                // From\r\n                positions.push(p[0] + yTicks.offset.components[0], pos + yTicks.offset.components[1], p[2] + yTicks.offset.components[2],\r\n                            p[0] + yTicks.offset.components[0], pos + yTicks.offset.components[1], p[2] + yTicks.offset.components[2] + yTicks.length);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n\r\n            // Z ticks\r\n            pos = p[2];\r\n            col = zTicks.color.components;\r\n            \r\n            for (let i = 0; i < zTicks.count - 1; i++) {\r\n                pos += zTickOffset;\r\n                // From\r\n                positions.push(p[0] + zTicks.offset.components[0], p[1] + zTicks.offset.components[1], pos + zTicks.offset.components[2],\r\n                            p[0] + zTicks.offset.components[0], p[1] + zTicks.offset.components[1] + zTicks.length, pos + zTicks.offset.components[2]);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n\r\n            pos = p[2];\r\n            \r\n            for (let i = 0; i < zTicks.count - 1; i++) {\r\n                pos += zTickOffset;\r\n                // From\r\n                positions.push(p[0] + zTicks.offset.components[0], p[1] + zTicks.offset.components[1], pos + zTicks.offset.components[2],\r\n                            p[0] + zTicks.offset.components[0] + zTicks.length, p[1] + zTicks.offset.components[1], pos + zTicks.offset.components[2]);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n        }\r\n\r\n        this.setAttribute('position', new Float32Array(positions));\r\n        this.setAttribute('color', new Float32Array(colors));\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CoordinatesHelper from a PointHelper.\r\n     * \r\n     * @param {PointHelper} pointHelper A Lore.Helpers.PointHelper object.\r\n     */\r\n    static fromPointHelper(pointHelper, options = {}) {\r\n      let renderer = pointHelper.renderer;\r\n      let geometryName = pointHelper.geometry.name + '_Coordinates';\r\n\r\n      let opts = {\r\n        axis: {\r\n          x: { length: Math.abs(pointHelper.getDimensions().max.getX()) + Math.abs(pointHelper.getDimensions().min.getX()) },\r\n          y: { length: Math.abs(pointHelper.getDimensions().max.getY()) + Math.abs(pointHelper.getDimensions().min.getY()) },\r\n          z: { length: Math.abs(pointHelper.getDimensions().max.getZ()) + Math.abs(pointHelper.getDimensions().min.getZ()) }\r\n        }\r\n      }\r\n\r\n\r\n      opts = Utils.extend(true, opts, options);\r\n\r\n      return new CoordinatesHelper(renderer, geometryName, opts)\r\n    }\r\n}\r\n\r\nmodule.exports = CoordinatesHelper\r\n","//@ts-check\r\n\r\nconst Shader = require('../Core/Shader');\r\nconst Geometry = require('../Core/Geometry');\r\nconst Node = require('../Core/Node');\r\nconst Shaders = require('../Shaders');\r\n\r\n/** \r\n * The base class for helper classes.\r\n * \r\n * @property {Renderer} renderer An instance of Lore.Renderer.\r\n * @property {Shader} shader The shader associated with this helper.\r\n * @property {Geometry} geometry The geometry associated with this helper.\r\n */\r\nclass HelperBase extends Node {\r\n  /**\r\n   * Creates an instance of HelperBase.\r\n   * \r\n   * @param {Renderer} renderer A Lore.Renderer object.\r\n   * @param {String} geometryName The name of this geometry.\r\n   * @param {String} shaderName The name of the shader used to render the geometry.\r\n   */\r\n  constructor(renderer, geometryName, shaderName) {\r\n    super();\r\n\r\n    // Check whether the shader requires WebGL 2.0, if it does and the\r\n    // machine doesn't support it, go to callback.\r\n    if (Shaders[shaderName].glVersion === 2 && !renderer.webgl2) {\r\n      console.warn('Switching from ' + shaderName + ' to fallback shader ' + \r\n                   Shaders[shaderName].fallback + ' due to missing WebGL2 support.');\r\n      shaderName = Shaders[shaderName].fallback;\r\n    }\r\n\r\n    this.renderer = renderer;\r\n    this.shader = Shaders[shaderName].clone();\r\n    this.geometry = this.renderer.createGeometry(geometryName, shaderName);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the geometry associated with this helper has an attribute with a given name.\r\n   * \r\n   * @param {String} name The name of the attribute.\r\n   * @returns {boolean} A boolean indicating whether an attribute with a the given name is present.\r\n   */\r\n  hasAttribute(name) {\r\n    return name in this.geometry.attributes;\r\n  }\r\n\r\n  /**\r\n   * Set the value (a typed array) of an attribute.\r\n   * \r\n   * @param {String} name The name of the attribute. \r\n   * @param {number[]|Array|Float32Array} data A typed array containing the attribute values.\r\n   */\r\n  setAttribute(name, data) {\r\n    this.geometry.addAttribute(name, data);\r\n  }\r\n\r\n  /**\r\n   * Get the value of an attribute (usually a typed array).\r\n   * \r\n   * @param {String} name The name of the attribute.\r\n   * @returns {number[]|Array|Float32Array} Usually, a typed array containing the attribute values.\r\n   */\r\n  getAttribute(name) {\r\n    return this.geometry.attributes[name].data;\r\n  }\r\n\r\n  /**\r\n   * Update a the value of an attribute at a specific index and marks the attribute as stale.\r\n   * \r\n   * @param {String} name The name of the attribute.\r\n   * @param {Number} index The index of the value to be updated.\r\n   * @param {number[]|Array|Float32Array} value Usually, a typed array or array with the length of the attribute values (3 for x, y, z coordinates) containing the new values.\r\n   */\r\n  updateAttribute(name, index, value) {\r\n    let attr = this.geometry.attributes[name];\r\n\r\n    let j = index * attr.attributeLength;\r\n\r\n    for (let i = 0; i < attr.attributeLength; i++) {\r\n      attr.data[j + i] = value[i] || attr.data[j + i];\r\n    }\r\n\r\n    attr.stale = true;\r\n  }\r\n\r\n  /**\r\n   * Updates all the values in the attribute and marks the attribute as stale.\r\n   * \r\n   * @param {String} name The name of the attribute.\r\n   * @param {number[]|Array|Float32Array} values A typed array containing the new attribute values.\r\n   */\r\n  updateAttributeAll(name, values) {\r\n    let attr = this.geometry.attributes[name];\r\n\r\n    for (let i = 0; i < attr.data.length; i++) {\r\n      attr.data[i] = values[i];\r\n    }\r\n\r\n    attr.stale = true;\r\n  }\r\n\r\n  /**\r\n   * Calls the draw method of the underlying geometry.\r\n   */\r\n  draw() {\r\n    this.geometry.draw(this.renderer);\r\n  }\r\n\r\n  /**\r\n   * Destructor for the helper (mainly used for OctreeHelpers to clean up events).\r\n   */\r\n  destruct() {\r\n\r\n  }\r\n}\r\n\r\nmodule.exports = HelperBase","//@ts-check\r\n\r\nconst HelperBase = require(\"./HelperBase\");\r\nconst PointHelper = require(\"./PointHelper\");\r\nconst Octree = require(\"../Spice/Octree\");\r\nconst Raycaster = require(\"../Spice/Raycaster\");\r\nconst DrawModes = require(\"../Core/DrawModes\");\r\nconst Utils = require(\"../Utils/Utils\");\r\nconst Vector3f = require(\"../Math/Vector3f\");\r\nconst AABB = require(\"../Spice/AABB\");\r\nconst Matrix4f = require(\"../Math/Matrix4f\");\r\nconst FilterBase = require(\"../Filters/FilterBase\");\r\nconst Ray = require(\"../Math/Ray\");\r\n\r\n/**\r\n * A helper class to create an octree associated with vertex data.\r\n *\r\n * @property {*} opts An object containing options.\r\n * @property {PointHelper} target The Lore.PointHelper object from which this octree is constructed.\r\n * @property {Renderer} renderer An instance of Lore.Renderer.\r\n * @property {Octree} octree The octree associated with the target.\r\n * @property {Raycaster} raycaster An instance of Lore.Raycaster.\r\n * @property {Object} hovered The currently hovered item.\r\n * @property {Object[]} selected The currently selected items.\r\n */\r\nclass OctreeHelper extends HelperBase {\r\n  /**\r\n   * Creates an instance of OctreeHelper.\r\n   *\r\n   * @param {Renderer} renderer A Lore.Renderer object.\r\n   * @param {String} geometryName The name of this geometry.\r\n   * @param {String} shaderName The name of the shader used to render this octree.\r\n   * @param {PointHelper} target The Lore.PointHelper object from which this octree is constructed.\r\n   * @param {Object} options The options used to draw this octree.\r\n   */\r\n  constructor(renderer, geometryName, shaderName, target, options) {\r\n    super(renderer, geometryName, shaderName);\r\n\r\n    this.defaults = {\r\n      visualize: false,\r\n      multiSelect: true\r\n    };\r\n\r\n    this.opts = Utils.extend(true, this.defaults, options);\r\n    this._eventListeners = {};\r\n    this.target = target;\r\n    this.renderer = renderer;\r\n    this.octree = this.target.octree;\r\n    this.raycaster = new Raycaster(1.0);\r\n    this.hovered = null;\r\n    this.selected = [];\r\n\r\n    // Register this octreeHelper with the pointHelper\r\n    this.target.octreeHelper = this;\r\n\r\n    let that = this;\r\n\r\n    this._clickHandler = function(e) {\r\n      if (\r\n        e.e.mouse.state.middle ||\r\n        e.e.mouse.state.right ||\r\n        !that.target.geometry.isVisible\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      let mouse = e.e.mouse.normalizedPosition;\r\n      let result = that.getIntersections(mouse);\r\n\r\n      if (result.length > 0) that.addSelected(result[0]);\r\n    };\r\n\r\n    renderer.controls.addEventListener(\"click\", this._clickHandler);\r\n\r\n    this._dblclickHandler = function(e) {\r\n      if (\r\n        e.e.mouse.state.middle ||\r\n        e.e.mouse.state.right ||\r\n        !that.target.geometry.isVisible\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      let mouse = e.e.mouse.normalizedPosition;\r\n      let result = that.getIntersections(mouse);\r\n\r\n      if (result.length > 0) that.addSelected(result[0]);\r\n    };\r\n\r\n    renderer.controls.addEventListener(\"dblclick\", this._dblclickHandler);\r\n\r\n    this._mousemoveHandler = function(e) {\r\n      if (\r\n        e.e.mouse.state.left ||\r\n        e.e.mouse.state.middle ||\r\n        e.e.mouse.state.right ||\r\n        !that.target.geometry.isVisible\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      let mouse = e.e.mouse.normalizedPosition;\r\n      let result = that.getIntersections(mouse);\r\n\r\n      if (result.length > 0) {\r\n        if (that.hovered && that.hovered.index === result[0].index) {\r\n          return;\r\n        }\r\n\r\n        that.hovered = result[0];\r\n        that.hovered.screenPosition = that.renderer.camera.sceneToScreen(\r\n          result[0].position,\r\n          renderer\r\n        );\r\n\r\n        that.raiseEvent(\"hoveredchanged\", {\r\n          e: that.hovered\r\n        });\r\n      } else {\r\n        that.hovered = null;\r\n        that.raiseEvent(\"hoveredchanged\", {\r\n          e: null\r\n        });\r\n      }\r\n    };\r\n\r\n    renderer.controls.addEventListener(\"mousemove\", this._mousemoveHandler);\r\n\r\n    this._updatedHandler = function() {\r\n      if (!that.target.geometry.isVisible) {\r\n        return;\r\n      }\r\n\r\n      for (let i = 0; i < that.selected.length; i++) {\r\n        that.selected[i].screenPosition = that.renderer.camera.sceneToScreen(\r\n          that.selected[i].position,\r\n          renderer\r\n        );\r\n      }\r\n\r\n      if (that.hovered) {\r\n        that.hovered.screenPosition = that.renderer.camera.sceneToScreen(\r\n          that.hovered.position,\r\n          renderer\r\n        );\r\n      }\r\n\r\n      that.raiseEvent(\"updated\");\r\n    };\r\n\r\n    renderer.controls.addEventListener(\"updated\", this._updatedHandler);\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Initialize this octree.\r\n   */\r\n  init() {\r\n    if (this.opts.visualize === \"centers\") {\r\n      this.drawCenters();\r\n    } else if (this.opts.visualize === \"cubes\") {\r\n      this.drawBoxes();\r\n    } else {\r\n      this.geometry.isVisible = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the screen position of a vertex by its index.\r\n   *\r\n   * @param {Number} index The index of a vertex.\r\n   * @returns {Number[]} An array containing the screen position. E.g. [122, 290].\r\n   */\r\n  getScreenPosition(index) {\r\n    let positions = this.target.geometry.attributes[\"position\"].data;\r\n    let k = index * 3;\r\n    let p = new Vector3f(positions[k], positions[k + 1], positions[k + 2]);\r\n\r\n    return this.renderer.camera.sceneToScreen(p, this.renderer);\r\n  }\r\n\r\n  /**\r\n   * Adds an object to the selected collection of this Lore.OctreeHelper object.\r\n   *\r\n   * @param {Object|Number} item Either an item (used internally) or the index of a vertex from the associated Lore.PointHelper object.\r\n   */\r\n  addSelected(item) {\r\n    // If item is only the index, create a dummy item\r\n    if (!isNaN(parseFloat(item))) {\r\n      let positions = this.target.geometry.attributes[\"position\"].data;\r\n      let k = item * 3;\r\n\r\n      let color = null;\r\n      if (this.target.hasAttribute('color'))\r\n        color = this.target.getColor(item);\r\n\r\n      item = {\r\n        distance: -1,\r\n        index: item,\r\n        locCode: -1,\r\n        position: new Vector3f(\r\n          positions[k],\r\n          positions[k + 1],\r\n          positions[k + 2]\r\n        ),\r\n        color: color\r\n      };\r\n    }\r\n\r\n    if (this.selectedContains(item.index)) {\r\n      this.raiseEvent(\"reselected\", {\r\n        e: item\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Add a timestamp to every selected item. This can be used to order\r\n    // selected items in a GUI\r\n    item[\"timestamp\"] = Date.now();\r\n\r\n    let index = this.selected.length;\r\n\r\n    if (this.opts.multiSelect) {\r\n      this.selected.push(item);\r\n    } else {\r\n      this.selected[0] = item;\r\n      index = 0;\r\n    }\r\n\r\n    this.selected[index].screenPosition = this.renderer.camera.sceneToScreen(\r\n      item.position,\r\n      this.renderer\r\n    );\r\n    this.raiseEvent(\"selectedchanged\", {\r\n      e: this.selected\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove an item from the selected collection of this Lore.OctreeHelper object.\r\n   *\r\n   * @param {Number} index The index of the item in the selected collection.\r\n   */\r\n  removeSelected(index) {\r\n    this.selected.splice(index, 1);\r\n\r\n    this.raiseEvent(\"selectedchanged\", {\r\n      e: this.selected\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the selected collection of this Lore.OctreeHelper object.\r\n   */\r\n  clearSelected() {\r\n    this.selected = [];\r\n\r\n    this.raiseEvent(\"selectedchanged\", {\r\n      e: this.selected\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check whether or not the selected collection of this Lore.OctreeHelper object contains a vertex with a given index.\r\n   *\r\n   * @param {Number} index The index of a vertex in the associated Lore.PointHelper object.\r\n   * @returns {Boolean} A boolean indicating whether or not the selected collection of this Lore.OctreeHelper contains a vertex with a given index.\r\n   */\r\n  selectedContains(index) {\r\n    for (let i = 0; i < this.selected.length; i++) {\r\n      if (this.selected[i].index === index) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Adds a vertex with a given index to the currently hovered vertex of this Lore.OctreeHelper object.\r\n   *\r\n   * @param {Number} index The index of a vertex in the associated Lore.PointHelper object.\r\n   */\r\n  setHovered(index) {\r\n    if (this.hovered && this.hovered.index === index) {\r\n      return;\r\n    }\r\n\r\n    let k = index * 3;\r\n    let positions = this.target.geometry.attributes[\"position\"].data;\r\n    \r\n    let color = null;\r\n    if (this.target.hasAttribute('color'))\r\n      color = this.target.getColor(index);\r\n\r\n    this.hovered = {\r\n      index: index,\r\n      position: new Vector3f(positions[k], positions[k + 1], positions[k + 2]),\r\n      color: color\r\n    };\r\n\r\n    this.hovered.screenPosition = this.renderer.camera.sceneToScreen(\r\n      this.hovered.position,\r\n      this.renderer\r\n    );\r\n    this.raiseEvent(\"hoveredchanged\", {\r\n      e: this.hovered\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the currently hovered vertex to the collection of selected vertices.\r\n   */\r\n  selectHovered() {\r\n    if (!this.hovered || this.selectedContains(this.hovered.index)) {\r\n      return;\r\n    }\r\n\r\n    this.addSelected({\r\n      distance: this.hovered.distance,\r\n      index: this.hovered.index,\r\n      locCode: this.hovered.locCode,\r\n      position: this.hovered.position,\r\n      color: this.hovered.color\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the centers of the axis-aligned bounding boxes of this octree.\r\n   */\r\n  showCenters() {\r\n    this.opts.visualize = \"centers\";\r\n    this.drawCenters();\r\n    this.geometry.isVisible = true;\r\n  }\r\n\r\n  /**\r\n   * Show the axis-aligned boudning boxes of this octree as cubes.\r\n   */\r\n  showCubes() {\r\n    this.opts.visualize = \"cubes\";\r\n    this.drawBoxes();\r\n    this.geometry.isVisible = true;\r\n  }\r\n\r\n  /**\r\n   * Hide the centers or cubes of the axis-aligned bounding boxes associated with this octree.\r\n   */\r\n  hide() {\r\n    this.opts.visualize = false;\r\n    this.geometry.isVisible = false;\r\n\r\n    this.setAttribute(\"position\", new Float32Array([]));\r\n    this.setAttribute(\"color\", new Float32Array([]));\r\n  }\r\n\r\n  /**\r\n   * Get the indices and distances of the vertices currently intersected by the ray sent from the mouse position.\r\n   *\r\n   * @param {Object} mouse A mouse object containing x and y properties.\r\n   * @returns {Object[]} A distance-sorted (ASC) array containing the interesected vertices.\r\n   */\r\n  getIntersections(mouse) {\r\n    this.raycaster.set(this.renderer.camera, mouse.x, mouse.y);\r\n\r\n    let tmp = this.octree.raySearch(this.raycaster);\r\n    let result = this.rayIntersections(tmp);\r\n\r\n    result.sort(function(a, b) {\r\n      return a.distance - b.distance;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  getVisible() {\r\n    let frustum = this.renderer.camera.getFrustum();\r\n    console.log(frustum[0].toString());\r\n    console.log(frustum[1].toString());\r\n    this.octree.intersectBox(frustum[0], frustum[1]);\r\n  }\r\n\r\n  /**\r\n   * Add an event listener to this Lore.OctreeHelper object.\r\n   *\r\n   * @param {String} eventName The name of the event to listen for.\r\n   * @param {Function} callback A callback function called when an event is fired.\r\n   */\r\n  addEventListener(eventName, callback) {\r\n    if (!this._eventListeners[eventName]) {\r\n      this._eventListeners[eventName] = [];\r\n    }\r\n\r\n    this._eventListeners[eventName].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Raise an event with a given name and send the data to the functions listening for this event.\r\n   *\r\n   * @param {String} eventName The name of the event to be rised.\r\n   * @param {*} [data={}] Data to be sent to the listening functions.\r\n   */\r\n  raiseEvent(eventName, data = {}) {\r\n    if (!this._eventListeners[eventName]) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < this._eventListeners[eventName].length; i++) {\r\n      this._eventListeners[eventName][i](data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a hoveredchanged event to multiple octrees and merges the event property e.\r\n   *\r\n   * @param {OctreeHelper[]} octreeHelpers An array of octree helpers to join.\r\n   * @param {Function} eventListener A event listener for hoveredchanged.\r\n   */\r\n  static joinHoveredChanged(octreeHelpers, eventListener) {\r\n    for (let i = 0; i < octreeHelpers.length; i++) {\r\n      octreeHelpers[i].addEventListener(\"hoveredchanged\", function(e) {\r\n        let result = { e: null, source: null };\r\n        for (let j = 0; j < octreeHelpers.length; j++) {\r\n          if (octreeHelpers[j].hovered !== null) {\r\n            result = { e: octreeHelpers[j].hovered, source: j };\r\n          }\r\n        }\r\n        eventListener(result);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a selectedchanged event to multiple octrees and merges the event property e.\r\n   *\r\n   * @param {OctreeHelper[]} octreeHelpers An array of octree helpers to join.\r\n   * @param {Function} eventListener A event listener for selectedchanged.\r\n   */\r\n  static joinSelectedChanged(octreeHelpers, eventListener) {\r\n    for (let i = 0; i < octreeHelpers.length; i++) {\r\n      octreeHelpers[i].addEventListener(\"selectedchanged\", function(e) {\r\n        let result = [];\r\n        for (let j = 0; j < octreeHelpers.length; j++) {\r\n          for (let k = 0; k < octreeHelpers[j].selected.length; k++)\r\n            result.push({\r\n              timestamp: octreeHelpers[j].selected[k].timestamp,\r\n              item: octreeHelpers[j].selected[k],\r\n              index: k,\r\n              source: j\r\n            });\r\n        }\r\n        eventListener(result);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a reselected event to multiple octrees and merges the event property e.\r\n   *\r\n   * @param {OctreeHelper[]} octreeHelpers An array of octree helpers to join.\r\n   * @param {Function} eventListener A event listener for selectedchanged.\r\n   */\r\n  static joinReselected(octreeHelpers, eventListener) {\r\n    for (let i = 0; i < octreeHelpers.length; i++) {\r\n      octreeHelpers[i].addEventListener(\"reselected\", function(e) {\r\n        let result = [];\r\n        for (let j = 0; j < octreeHelpers.length; j++) {\r\n          result.push({\r\n            item: e,\r\n            source: j\r\n          });\r\n        }\r\n        eventListener(result);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw the centers of the axis-aligned bounding boxes of this octree.\r\n   */\r\n  drawCenters() {\r\n    this.geometry.setMode(DrawModes.points);\r\n\r\n    let aabbs = this.octree.aabbs;\r\n    let length = Object.keys(aabbs).length;\r\n    let colors = new Float32Array(length * 3);\r\n    let positions = new Float32Array(length * 3);\r\n\r\n    let i = 0;\r\n\r\n    for (var key in aabbs) {\r\n      let c = aabbs[key].center.components;\r\n      let k = i * 3;\r\n\r\n      colors[k] = 1;\r\n      colors[k + 1] = 1;\r\n      colors[k + 2] = 1;\r\n\r\n      positions[k] = c[0];\r\n      positions[k + 1] = c[1];\r\n      positions[k + 2] = c[2];\r\n\r\n      i++;\r\n    }\r\n\r\n    this.setAttribute(\"position\", new Float32Array(positions));\r\n    this.setAttribute(\"color\", new Float32Array(colors));\r\n  }\r\n\r\n  /**\r\n   * Draw the axis-aligned bounding boxes of this octree.\r\n   */\r\n  drawBoxes() {\r\n    this.geometry.setMode(DrawModes.lines);\r\n\r\n    let aabbs = this.octree.aabbs;\r\n    let length = Object.keys(aabbs).length;\r\n    let c = new Float32Array(length * 24 * 3);\r\n    let p = new Float32Array(length * 24 * 3);\r\n\r\n    for (let i = 0; i < c.length; i++) {\r\n      c[i] = 255.0;\r\n    }\r\n\r\n    let index = 0;\r\n\r\n    for (var key in aabbs) {\r\n      let corners = AABB.getCorners(aabbs[key]);\r\n\r\n      p[index++] = corners[0][0];\r\n      p[index++] = corners[0][1];\r\n      p[index++] = corners[0][2];\r\n      p[index++] = corners[1][0];\r\n      p[index++] = corners[1][1];\r\n      p[index++] = corners[1][2];\r\n      p[index++] = corners[0][0];\r\n      p[index++] = corners[0][1];\r\n      p[index++] = corners[0][2];\r\n      p[index++] = corners[2][0];\r\n      p[index++] = corners[2][1];\r\n      p[index++] = corners[2][2];\r\n      p[index++] = corners[0][0];\r\n      p[index++] = corners[0][1];\r\n      p[index++] = corners[0][2];\r\n      p[index++] = corners[4][0];\r\n      p[index++] = corners[4][1];\r\n      p[index++] = corners[4][2];\r\n\r\n      p[index++] = corners[1][0];\r\n      p[index++] = corners[1][1];\r\n      p[index++] = corners[1][2];\r\n      p[index++] = corners[3][0];\r\n      p[index++] = corners[3][1];\r\n      p[index++] = corners[3][2];\r\n      p[index++] = corners[1][0];\r\n      p[index++] = corners[1][1];\r\n      p[index++] = corners[1][2];\r\n      p[index++] = corners[5][0];\r\n      p[index++] = corners[5][1];\r\n      p[index++] = corners[5][2];\r\n\r\n      p[index++] = corners[2][0];\r\n      p[index++] = corners[2][1];\r\n      p[index++] = corners[2][2];\r\n      p[index++] = corners[3][0];\r\n      p[index++] = corners[3][1];\r\n      p[index++] = corners[3][2];\r\n      p[index++] = corners[2][0];\r\n      p[index++] = corners[2][1];\r\n      p[index++] = corners[2][2];\r\n      p[index++] = corners[6][0];\r\n      p[index++] = corners[6][1];\r\n      p[index++] = corners[6][2];\r\n\r\n      p[index++] = corners[3][0];\r\n      p[index++] = corners[3][1];\r\n      p[index++] = corners[3][2];\r\n      p[index++] = corners[7][0];\r\n      p[index++] = corners[7][1];\r\n      p[index++] = corners[7][2];\r\n\r\n      p[index++] = corners[4][0];\r\n      p[index++] = corners[4][1];\r\n      p[index++] = corners[4][2];\r\n      p[index++] = corners[5][0];\r\n      p[index++] = corners[5][1];\r\n      p[index++] = corners[5][2];\r\n      p[index++] = corners[4][0];\r\n      p[index++] = corners[4][1];\r\n      p[index++] = corners[4][2];\r\n      p[index++] = corners[6][0];\r\n      p[index++] = corners[6][1];\r\n      p[index++] = corners[6][2];\r\n\r\n      p[index++] = corners[5][0];\r\n      p[index++] = corners[5][1];\r\n      p[index++] = corners[5][2];\r\n      p[index++] = corners[7][0];\r\n      p[index++] = corners[7][1];\r\n      p[index++] = corners[7][2];\r\n\r\n      p[index++] = corners[6][0];\r\n      p[index++] = corners[6][1];\r\n      p[index++] = corners[6][2];\r\n      p[index++] = corners[7][0];\r\n      p[index++] = corners[7][1];\r\n      p[index++] = corners[7][2];\r\n    }\r\n\r\n    this.setAttribute(\"position\", p);\r\n    this.setAttribute(\"color\", c);\r\n  }\r\n\r\n  /**\r\n   * Set the threshold of the raycaster associated with this Lore.OctreeHelper object.\r\n   *\r\n   * @param {Number} threshold The threshold (maximum distance to the ray) of the raycaster.\r\n   */\r\n  setThreshold(threshold) {\r\n    this.raycaster.threshold = threshold;\r\n  }\r\n\r\n  /**\r\n   * Execute a ray intersection search within this octree.\r\n   *\r\n   * @param {Number[]} indices The indices of the octree nodes that are intersected by the ray.\r\n   * @returns {*} An array containing the vertices intersected by the ray.\r\n   */\r\n  rayIntersections(indices) {\r\n    let result = [];\r\n    let inverseMatrix = Matrix4f.invert(this.target.modelMatrix); // this could be optimized, since the model matrix does not change\r\n    let ray = new Ray();\r\n    let threshold = this.raycaster.threshold * this.target.getPointScale();\r\n    let positions = this.target.geometry.attributes[\"position\"].data;    \r\n\r\n    // Only get points further away than the cutoff set in the point HelperBase\r\n    let cutoff = this.target.getCutoff();\r\n\r\n    ray.copyFrom(this.raycaster.ray).applyProjection(inverseMatrix);\r\n\r\n    let localThreshold = threshold; // / ((pointCloud.scale.x + pointCloud.scale.y + pointCloud.scale.z) / 3);\r\n    let localThresholdSq = localThreshold * localThreshold;\r\n\r\n    for (let i = 0; i < indices.length; i++) {\r\n      let index = indices[i].index;\r\n      let locCode = indices[i].locCode;\r\n      let k = index * 3;\r\n      let v = new Vector3f(positions[k], positions[k + 1], positions[k + 2]);\r\n\r\n      let color = null;\r\n      if (this.target.hasAttribute('color'))\r\n        color = this.target.getColor(index);\r\n\r\n      let rayPointDistanceSq = ray.distanceSqToPoint(v);\r\n      if (rayPointDistanceSq < localThresholdSq) {\r\n        let intersectedPoint = ray.closestPointToPoint(v);\r\n        intersectedPoint.applyProjection(this.target.modelMatrix);\r\n        let dist = this.raycaster.ray.source.distanceTo(intersectedPoint);\r\n        let isVisible = FilterBase.isVisible(this.target.geometry, index);\r\n        if (\r\n          dist < this.raycaster.near ||\r\n          dist > this.raycaster.far ||\r\n          dist < cutoff ||\r\n          !isVisible\r\n        )\r\n          continue;\r\n\r\n        result.push({\r\n          distance: dist,\r\n          index: index,\r\n          locCode: locCode,\r\n          position: v,\r\n          color: color\r\n        });\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Remove eventhandlers from associated controls.\r\n   */\r\n  destruct() {\r\n    this.renderer.controls.removeEventListener(\"click\", this._dblclickHandler);\r\n    this.renderer.controls.removeEventListener(\r\n      \"dblclick\",\r\n      this._dblclickHandler\r\n    );\r\n    this.renderer.controls.removeEventListener(\r\n      \"mousemove\",\r\n      this._mousemoveHandler\r\n    );\r\n    this.renderer.controls.removeEventListener(\"updated\", this._updatedHandler);\r\n  }\r\n}\r\n\r\nmodule.exports = OctreeHelper;\r\n","//@ts-check\r\n\r\nconst HelperBase = require('./HelperBase');\r\nconst DrawModes = require('../Core/DrawModes')\r\nconst Color = require('../Core/Color');\r\nconst Utils = require('../Utils/Utils');\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst AABB = require('../Spice/AABB');\r\nconst Octree = require('../Spice/Octree');\r\nconst FilterBase = require('../Filters/FilterBase');\r\n\r\n/** \r\n * A helper class wrapping a point cloud.\r\n * \r\n * @property {Object} opts An object containing options.\r\n * @property {Number[]} indices Indices associated with the data.\r\n * @property {Octree} octree The octree associated with the point cloud.\r\n * @property {OctreeHelper} octreeHelper The octreeHelper associated with the pointHelper.\r\n * @property {Object} filters A map mapping filter names to Lore.Filter instances associated with this helper class.\r\n * @property {Number} pointSize The scaled and constrained point size of this data.\r\n * @property {Number} pointScale The scale of the point size.\r\n * @property {Number} rawPointSize The point size before scaling and constraints.\r\n * @property {Object} dimensions An object with the properties min and max, each a 3D vector containing the extremes.\r\n */\r\nclass PointHelper extends HelperBase {\r\n  /**\r\n   * Creates an instance of PointHelper.\r\n   * @param {Renderer} renderer An instance of Lore.Renderer.\r\n   * @param {String} geometryName The name of this geometry.\r\n   * @param {String} shaderName The name of the shader used to render the geometry.\r\n   * @param {Object} options An object containing options.\r\n   */\r\n  constructor(renderer, geometryName, shaderName, options) {\r\n    super(renderer, geometryName, shaderName);\r\n\r\n    let defaults = {\r\n      octree: true,\r\n      octreeThreshold: 500.0,\r\n      octreeMaxDepth: 8,\r\n      pointScale: 1.0,\r\n      maxPointSize: 100.0\r\n    };\r\n\r\n    this.opts = Utils.extend(true, defaults, options);\r\n    this.indices = null;\r\n    this.octree = null;\r\n    this.octreeHelper = null;\r\n    this.geometry.setMode(DrawModes.points);\r\n    this.initPointSize();\r\n    this.filters = {};\r\n    this.pointScale = this.opts.pointScale;\r\n    this.rawPointSize = 1.0;\r\n    this.pointSize = this.rawPointSize * this.pointScale;\r\n\r\n    this.dimensions = {\r\n      min: new Vector3f(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY),\r\n      max: new Vector3f(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY)\r\n    };\r\n\r\n    let that = this;\r\n    this._zoomchangedHandler = function (zoom) {\r\n      let threshold = that.setPointSize(zoom + 0.1);\r\n      if (that.octreeHelper) {\r\n        that.octreeHelper.setThreshold(threshold);\r\n      }\r\n    };\r\n\r\n    renderer.controls.addEventListener('zoomchanged', this._zoomchangedHandler);\r\n  }\r\n\r\n  /**\r\n   * Get the max length of the length of three arrays.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x \r\n   * @param {Number[]|Array|Float32Array} y \r\n   * @param {Number[]|Array|Float32Array} z \r\n   * @returns {Number} The length of the largest array.\r\n   */\r\n  getMaxLength(x, y, z) {\r\n    return Math.max(x.length, Math.max(y.length, z.length));\r\n  }\r\n\r\n  /**\r\n   * Returns an object containing the dimensions of this point cloud.\r\n   * \r\n   * @returns {Object} An object with the properties min and max, each a 3D vector containing the extremes.\r\n   */\r\n  getDimensions() {\r\n    return this.dimensions;\r\n  }\r\n\r\n  /**\r\n   * Get the center (average) of the point cloud.\r\n   * \r\n   * @returns {Vector3f} The center (average) of the point cloud.\r\n   */\r\n  getCenter() {\r\n    return new Vector3f((this.dimensions.max.getX() + this.dimensions.min.getX()) / 2.0,\r\n      (this.dimensions.max.getY() + this.dimensions.min.getY()) / 2.0,\r\n      (this.dimensions.max.getZ() + this.dimensions.min.getZ()) / 2.0);\r\n  }\r\n\r\n  /**\r\n   * Gets the distance between the center and the point furthest from the center.\r\n   * \r\n   * @return {Number} The maximal radius.\r\n   */\r\n  getMaxRadius() {\r\n    let center = this.getCenter();\r\n    return center.subtract(this.dimensions.max).length();\r\n  }\r\n\r\n  /**\r\n   * Set the positions of points in this point cloud.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} positions The positions (linear array).\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setPositions(positions) {\r\n    // Min, max will NOT be calculated as of now!\r\n    // TODO?\r\n\r\n    this.setAttribute('position', positions);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the positions of points in this point clouds.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x An array containing the x components.\r\n   * @param {Number[]|Array|Float32Array} y An array containing the y components.\r\n   * @param {Number[]|Array|Float32Array} z An array containing the z components.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setPositionsXYZ(x, y, z) {\r\n    const length = x.length;\r\n    let positions = new Float32Array(length * 3);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      let j = 3 * i;\r\n\r\n      positions[j] = x[i] || 0;\r\n      positions[j + 1] = y[i] || 0;\r\n      positions[j + 2] = z[i] || 0;\r\n\r\n      if (x[i] > this.dimensions.max.getX()) {\r\n        this.dimensions.max.setX(x[i]);\r\n      }\r\n\r\n      if (x[i] < this.dimensions.min.getX()) {\r\n        this.dimensions.min.setX(x[i]);\r\n      }\r\n\r\n      if (y[i] > this.dimensions.max.getY()) {\r\n        this.dimensions.max.setY(y[i]);\r\n      }\r\n\r\n      if (y[i] < this.dimensions.min.getY()) {\r\n        this.dimensions.min.setY(y[i]);\r\n      }\r\n\r\n      if (z[i] > this.dimensions.max.getZ()) {\r\n        this.dimensions.max.setZ(z[i]);\r\n      }\r\n\r\n      if (z[i] < this.dimensions.min.getZ()) {\r\n        this.dimensions.min.setZ(z[i]);\r\n      }\r\n    }\r\n\r\n    if (this.opts.octree) {\r\n      let initialBounds = AABB.fromPoints(positions);\r\n      let indices = new Uint32Array(length);\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        indices[i] = i;\r\n      }\r\n\r\n      this.octree = new Octree(this.opts.octreeThreshold, this.opts.octreeMaxDepth);\r\n      this.octree.build(indices, positions, initialBounds);\r\n    }\r\n\r\n    this.setAttribute('position', positions);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the positions (XYZ), the color (RGB) and size (S) of the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x An array containing the x components.\r\n   * @param {Number[]|Array|Float32Array} y An array containing the y components.\r\n   * @param {Number[]|Array|Float32Array} z An array containing the z components.\r\n   * @param {Number[]|Array|Float32Array} r An array containing the r components.\r\n   * @param {Number[]|Array|Float32Array} g An array containing the g components.\r\n   * @param {Number[]|Array|Float32Array} b An array containing the b components.\r\n   * @param {Number} [s=1.0] The size of the points.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setXYZRGBS(x, y, z, r, g, b, s = 1.0) {\r\n    const length = r.length;\r\n    let c = new Float32Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      c[i] = Color.rgbToFloat(r[i], g[i], b[i]);\r\n    }\r\n\r\n    this._setValues(x, y, z, c, s);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the positions (XYZ), the color (RGB) and size (S) of the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x An array containing the x components.\r\n   * @param {Number[]|Array|Float32Array} y An array containing the y components.\r\n   * @param {Number[]|Array|Float32Array} z An array containing the z components.\r\n   * @param {String} hex A hex value.\r\n   * @param {Number} [s=1.0] The size of the points.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setXYZHexS(x, y, z, hex, s = 1.0) {\r\n    const length = x.length;\r\n    let c = new Float32Array(length);\r\n    let floatColor = Color.hexToFloat(hex);\r\n    for (var i = 0; i < length; i++) {\r\n      c[i] = floatColor;\r\n    }\r\n\r\n    this._setValues(x, y, z, c, s);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the positions (XYZ), the hue (H) and size (S) of the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x An array containing the x components.\r\n   * @param {Number[]|Array|Float32Array} y An array containing the y components.\r\n   * @param {Number[]|Array|Float32Array} z An array containing the z components.\r\n   * @param {Number[]|Array|Float32Array|Number} [h=1.0] The hue as a number or an array.\r\n   * @param {Number[]|Array|Float32Array|Number} [s=1.0] The size of the points.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setXYZHS(x, y, z, h = 1.0, s = 1.0) {\r\n    const length = x.length;\r\n    let c = new Float32Array(length);\r\n    \r\n    if (typeof h !== 'number') {\r\n      for (var i = 0; i < length; i++) {\r\n        c[i] = Color.hslToFloat(h[i]);\r\n      }\r\n    } else if (typeof h) {\r\n      h = Color.hslToFloat(h);\r\n      for (var i = 0; i < length; i++) {\r\n        c[i] = h;\r\n      }\r\n    }\r\n\r\n    this._setValues(x, y, z, c, s);\r\n    return this;\r\n  }\r\n\r\n  // TODO: Get rid of saturation\r\n  _setValues(x, y, z, c, s) {\r\n    let length = this.getMaxLength(x, y, z);\r\n    let saturation = new Float32Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      saturation[i] = 0.0;\r\n    }\r\n\r\n    if (typeof s === 'number') {\r\n      let tmpSize = new Float32Array(length);\r\n      for (var i = 0; i < length; i++) {\r\n        tmpSize[i] = s;\r\n      }\r\n      s = tmpSize;\r\n    }\r\n\r\n    this.setPositionsXYZ(x, y, z);\r\n    this.setHSSFromArrays(c, saturation, s);\r\n\r\n    // TODO: Check why the projection matrix update is needed\r\n    this.renderer.camera.updateProjectionMatrix();\r\n    this.renderer.camera.updateViewMatrix();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the positions and the HSS (Hue, Saturation, Size) values of the points in the point cloud.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x An array containing the x components.\r\n   * @param {Number[]|Array|Float32Array} y An array containing the y components.\r\n   * @param {Number[]|Array|Float32Array} z An array containing the z components.\r\n   * @param {Number[]|Array|Float32Array|Number} hue An array containing the hues of the data points.\r\n   * @param {Number[]|Array|Float32Array|Number} saturation An array containing the saturations of the data points.\r\n   * @param {Number[]|Array|Float32Array|Number} size An array containing the sizes of the data points.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setPositionsXYZHSS(x, y, z, hue, saturation, size) {\r\n    console.warn('The method \"setPositionsXYZHSS\" is marked as deprecated.');\r\n    let length = this.getMaxLength(x, y, z);\r\n    saturation = new Float32Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      saturation[i] = 0.0;\r\n    }\r\n\r\n    if (typeof size === 'number') {\r\n      let tmpSize = new Float32Array(length);\r\n      for (var i = 0; i < length; i++) {\r\n        tmpSize[i] = size;\r\n      }\r\n      size = tmpSize;\r\n    }\r\n\r\n    this.setPositionsXYZ(x, y, z);\r\n\r\n    if (typeof hue === 'number' && typeof saturation === 'number' && typeof size === 'number') {\r\n      let rgb = Color.hslToRgb(hue, 1.0, 0.5);\r\n      this.setHSS(Color.rgbToFloat(rgb[0], rgb[1], rgb[2]), saturation, size, length);\r\n    } else if (typeof hue !== 'number' && typeof saturation !== 'number' && typeof size !== 'number') {\r\n      for (var i = 0; i < hue.length; i++) {\r\n        let rgb = Color.hslToRgb(hue[i], 1.0, 0.5);\r\n        hue[i] = Color.rgbToFloat(rgb[0], rgb[1], rgb[2]);\r\n      }\r\n      this.setHSSFromArrays(hue, saturation, size);\r\n    } else {\r\n      if (typeof hue === 'number') {\r\n        let hueTmp = new Float32Array(length);\r\n        let rgb = Color.hslToRgb(hue, 1.0, 0.5);\r\n        hueTmp.fill(Color.rgbToFloat(rgb[0], rgb[1], rgb[2]));\r\n        hue = hueTmp;\r\n      } else if (typeof hue !== 'number') {\r\n        for (var i = 0; i < hue.length; i++) {\r\n          let rgb = Color.hslToRgb(hue[i], 1.0, 0.5);\r\n          hue[i] = Color.rgbToFloat(rgb[0], rgb[1], rgb[2]);\r\n        }\r\n        this.setHSSFromArrays(hue, saturation, size);\r\n      }\r\n\r\n      if (typeof saturation === 'number') {\r\n        let saturationTmp = new Float32Array(length);\r\n        saturationTmp.fill(saturation);\r\n        saturation = saturationTmp;\r\n      }\r\n\r\n      if (typeof size === 'number') {\r\n        let sizeTmp = new Float32Array(length);\r\n        sizeTmp.fill(size);\r\n        size = sizeTmp;\r\n      }\r\n\r\n      this.setHSSFromArrays(hue, saturation, size);\r\n    }\r\n\r\n    // TODO: Check why the projection matrix update is needed\r\n    this.renderer.camera.updateProjectionMatrix();\r\n    this.renderer.camera.updateViewMatrix();\r\n\r\n    return this;\r\n  }\r\n  \r\n\r\n  /**\r\n   * Set the colors (HSS) for the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} colors An array containing the HSS values.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setColors(colors) {\r\n    this.setAttribute('color', colors);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Update the colors (HSS) for the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} colors An array containing the HSS values.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  updateColors(colors) {\r\n    this.updateAttributeAll('color', colors);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Update the color (HSS) at a specific index.\r\n   * \r\n   * @param {Number} index The index of the data point.\r\n   * @param {Color} color An instance of Lore.Color containing HSS values.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  updateColor(index, color) {\r\n    console.warn('The method \"updateColor\" is marked as deprecated.');\r\n    this.updateAttribute('color', index, color.components);\r\n\r\n    return this;\r\n  }\r\n  \r\n\r\n  /**\r\n   * Update the color (HSS) at a specific index.\r\n   * \r\n   * @param {Number} index The index of the data point.\r\n   * @param {Color} color An instance of Lore.Color containing HSS values.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setColor(index, color) {\r\n    let c = new Color(color.toFloat(), this.getSaturation(index), this.getSize(index));\r\n    this.updateAttribute('color', index, c.components);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the global point size.\r\n   * \r\n   * @param {Number} size The global point size.\r\n   * @returns {Number} The threshold for the raycaster.\r\n   */\r\n  setPointSize(size) {\r\n    this.rawPointSize = size;\r\n\r\n    this.updatePointSize();\r\n\r\n    let pointSize = this.rawPointSize * this.opts.pointScale;\r\n\r\n    if (pointSize > this.opts.maxPointSize) {\r\n      return 0.5 * (this.opts.maxPointSize / pointSize);\r\n    } else {\r\n      return 0.5;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the displayed point size.\r\n   */\r\n  updatePointSize() {\r\n    let pointSize = this.rawPointSize * this.opts.pointScale;\r\n\r\n    if (pointSize > this.opts.maxPointSize) {\r\n      this.pointSize = this.opts.maxPointSize;\r\n    } else {\r\n      this.pointSize = pointSize;\r\n    }\r\n\r\n    this.geometry.shader.uniforms.size.value = this.pointSize;\r\n  }\r\n\r\n  /**\r\n   * Get the global point size.\r\n   * \r\n   * @returns {Number} The global point size.\r\n   */\r\n  getPointSize() {\r\n    return this.geometry.shader.uniforms.size.value;\r\n  }\r\n\r\n  /**\r\n   * Get the global point scale.\r\n   * \r\n   * @returns {Number} The global point size.\r\n   */\r\n  getPointScale() {\r\n    return this.opts.pointScale;\r\n  }\r\n\r\n  /**\r\n   * Sets the global point scale.\r\n   * \r\n   * @param {Number} pointScale The global point size.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setPointScale(pointScale) {\r\n    this.opts.pointScale = pointScale;\r\n    this.updatePointSize();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the fog colour and it's density, as seen from the camera.\r\n   * \r\n   * @param {any} color An array or hex string defining the rgba values of the fog colour.\r\n   * @param {Number} fogDensity The density of the fog.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setFog(color, fogDensity = 6.0) {\r\n    if (!this.geometry.shader.uniforms.clearColor || !this.geometry.shader.uniforms.fogDensity) {\r\n      console.warn('Shader \"' + this.geometry.shader.name + '\" does not support fog.');\r\n      return this;\r\n    }\r\n\r\n    // If the color is passed as a string, convert the hex value to an array\r\n    if (typeof color === 'string') {\r\n      let c = Color.fromHex(color);\r\n      color = [c.getR(), c.getG(), c.getB(), 1.0];\r\n    }\r\n\r\n    this.geometry.shader.uniforms.clearColor.value = color;\r\n    this.geometry.shader.uniforms.fogDensity.value = fogDensity;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initialize the point size based on the current zoom.\r\n   * \r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  initPointSize() {\r\n    this.setPointSize(this.renderer.camera.zoom + 0.1);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the current cutoff value.\r\n   * \r\n   * @returns {Number} The current cutoff value.\r\n   */\r\n  getCutoff() {\r\n    return this.geometry.shader.uniforms.cutoff.value;\r\n  }\r\n\r\n  /**\r\n   * Set the cutoff value.\r\n   * \r\n   * @param {Number} cutoff A cutoff value.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setCutoff(cutoff) {\r\n    this.geometry.shader.uniforms.cutoff.value = cutoff;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the hue for a given index.\r\n   * \r\n   * @param {Number} index An index.\r\n   * @returns {Number} The hue of the specified index.\r\n   */\r\n  getHue(index) {\r\n    console.warn('The method \"getHue\" is marked as deprecated. Please use \"getColor\".');\r\n    let colors = this.getAttribute('color');\r\n\r\n    return Color.floatToHsl(colors[index * 3]);\r\n  }\r\n\r\n   /**\r\n   * Get the color for a given index.\r\n   * \r\n   * @param {Number} index An index.\r\n   * @returns {Number[]|Array} The color of the specified index in RGB.\r\n   */\r\n  getColor(index) {\r\n    let colors = this.getAttribute('color');\r\n\r\n    return Color.floatToRgb(colors[index * 3]);\r\n  }\r\n\r\n  /**\r\n   * Get the saturation for a given index.\r\n   * \r\n   * @param {Number} index An index.\r\n   * @returns {Number} The saturation of the specified index.\r\n   */\r\n  getSaturation(index) {\r\n    let colors = this.getAttribute('color');\r\n\r\n    return colors[index * 3 + 1];\r\n  }\r\n\r\n  /**\r\n   * Get the size for a given index.\r\n   * \r\n   * @param {Number} index An index.\r\n   * @returns {Number} The size of the specified index.\r\n   */\r\n  getSize(index) {\r\n    let colors = this.getAttribute('color');\r\n\r\n    return colors[index * 3 + 2];\r\n  }\r\n\r\n  /**\r\n   * Get the position for a given index.\r\n   * \r\n   * @param {Number} index An index.\r\n   * @returns {Vector3f} The position of the specified index.\r\n   */\r\n  getPosition(index) {\r\n    let positions = this.getAttribute('position');\r\n\r\n    return new Vector3f(positions[index * 3], positions[index * 3 + 1],\r\n      positions[index * 3 + 2]);\r\n  }\r\n\r\n  /**\r\n   * Set the hue. If a number is supplied, all the hues are set to the supplied number.\r\n   * \r\n   * @param {Number[]|Array|Float32Array|Number} hue The hue to be set. If a number is supplied, all hues are set to its value.\r\n   */\r\n  setHue(hue) {\r\n    let colors = this.getAttribute('color');\r\n    let index = 0;\r\n\r\n    if (typeof hue === 'number') {\r\n      hue = Color.hslToFloat(hue);\r\n\r\n      for (let i = 0; i < colors.length; i++) {\r\n        colors[i * 3] = hue;\r\n      }\r\n    } else {\r\n      for (let i = 0; i < hue.length; i++) {\r\n        colors[i * 3] = Color.hslToFloat(hue[i]);\r\n      }\r\n    }\r\n\r\n    this.setColors(colors);\r\n  }\r\n\r\n  /**\r\n   * Set the saturation. If a number is supplied, all the saturations are set to the supplied number.\r\n   * \r\n   * @param {Number[]|Array|Float32Array|Number} saturation The saturation to be set. If a number is supplied, all saturations are set to its value.\r\n   */\r\n  setSaturation(saturation) {\r\n    let colors = this.getAttribute('color');\r\n    let c = null;\r\n    let index = 0;\r\n\r\n    if (typeof saturation === 'number') {\r\n      let length = colors.length;\r\n\r\n      c = new Float32Array(length * 3);\r\n\r\n      for (let i = 0; i < length * 3; i += 3) {\r\n        c[i] = colors[i];\r\n        c[i + 1] = saturation;\r\n        c[i + 2] = colors[i + 2];\r\n      }\r\n    } else {\r\n      let length = saturation.length;\r\n\r\n      c = new Float32Array(length * 3);\r\n\r\n      for (let i = 0; i < length * 3; i += 3) {\r\n        c[i] = colors[i];\r\n        c[i + 1] = saturation[index++];\r\n        c[i + 2] = colors[i + 2];\r\n      }\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Set the size. If a number is supplied, all the sizes are set to the supplied number.\r\n   * \r\n   * @param {Number[]|Array|Float32Array|Number} size The size to be set. If a number is supplied, all sizes are set to its value.\r\n   */\r\n  setSize(size) {\r\n    let colors = this.getAttribute('color');\r\n    let c = null;\r\n    let index = 0;\r\n\r\n    if (typeof size === 'number') {\r\n      let length = colors.length;\r\n\r\n      c = new Float32Array(length * 3);\r\n\r\n      for (let i = 0; i < length * 3; i += 3) {\r\n        c[i] = colors[i];\r\n        c[i + 1] = colors[i + 1];\r\n        c[i + 2] = size;\r\n      }\r\n    } else {\r\n      let length = size.length;\r\n\r\n      c = new Float32Array(length * 3);\r\n\r\n      for (let i = 0; i < length * 3; i += 3) {\r\n        c[i] = colors[i];\r\n        c[i + 1] = colors[i + 1];\r\n        c[i + 2] = size[index++];\r\n      }\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Set the HSS values. Sets all indices to the same values.\r\n   * \r\n   * @param {Number} hue A hue value.\r\n   * @param {Number} saturation A saturation value.\r\n   * @param {Number} size A size value.\r\n   * @param {Number} length The length of the arrays.\r\n   */\r\n  setHSS(hue, saturation, size, length) {\r\n    let c = new Float32Array(length * 3);\r\n\r\n    for (let i = 0; i < length * 3; i += 3) {\r\n      c[i] = hue;\r\n      c[i + 1] = saturation;\r\n      c[i + 2] = size;\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n  \r\n  /**\r\n   * Set the color from RGB values. Sets all indices to the same values.\r\n   * \r\n   * @param {Number} r The red colour component.\r\n   * @param {Number} g The green colour component.\r\n   * @param {Number} b The blue colour component.\r\n   */\r\n  setRGB(r, g, b) {\r\n    let c = this.getAttribute('color');\r\n\r\n    for (let i = 0; i < c.length; i++) {\r\n      c[i * 3] = Color.rgbToFloat(r, g, b);\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Set the color from RGB values. Sets all indices to the same values.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} r The red colour component.\r\n   * @param {Number[]|Array|Float32Array} g The green colour component.\r\n   * @param {Number[]|Array|Float32Array} b The blue colour component.\r\n   */\r\n  setRGBFromArrays(r, g, b) {\r\n    const length = Math.min(Math.min(r.length, g.length), b.length);\r\n    let c = this.getAttribute('color');\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      c[i * 3] = Color.rgbToFloat(r[i], g[i], b[i]);\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Set the HSS values.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} hue An array of hue values.\r\n   * @param {Number[]|Array|Float32Array} saturation An array of saturation values.\r\n   * @param {Number[]|Array|Float32Array} size An array of size values.\r\n   */\r\n  setHSSFromArrays(hue, saturation, size) {\r\n    let length = hue.length;\r\n    let c = new Float32Array(length * 3);\r\n    let index = 0;\r\n\r\n    if (hue.length !== length && saturation.length !== length && size.length !== length) {\r\n      throw 'Hue, saturation and size have to be arrays of length \"length\" (' + length + ').';\r\n    }\r\n\r\n    for (let i = 0; i < length * 3; i += 3) {\r\n      c[i] = hue[index];\r\n      c[i + 1] = saturation[index];\r\n      c[i + 2] = size[index];\r\n\r\n      index++;\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Add a filter to this point helper.\r\n   * \r\n   * @param {String} name The name of the filter.\r\n   * @param {FilterBase} filter A filter instance.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  addFilter(name, filter) {\r\n    filter.setGeometry(this.geometry);\r\n    this.filters[name] = filter;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove a filter by name.\r\n   * \r\n   * @param {String} name The name of the filter to be removed.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  removeFilter(name) {\r\n    delete this.filters[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get a filter by name.\r\n   * \r\n   * @param {String} name The name of a filter.\r\n   * @returns {FilterBase} A filter instance.\r\n   */\r\n  getFilter(name) {\r\n    return this.filters[name];\r\n  }\r\n\r\n  /**\r\n   * Hide the geometry associated with this pointHelper.\r\n   */\r\n  show() {\r\n    this.geometry.show();\r\n  }\r\n\r\n  /**\r\n   * Show the geometry associated with this pointHelper.\r\n   */\r\n  hide() {\r\n    this.geometry.hide();\r\n  }\r\n\r\n  /**\r\n   * Remove eventhandlers from associated controls.\r\n   */\r\n  destruct() {\r\n    this.renderer.controls.removeEventListener('zoomchanged', this._zoomchangedHandler);\r\n  }\r\n}\r\n\r\nmodule.exports = PointHelper","//@ts-check\r\n\r\nconst HelperBase = require('./HelperBase');\r\nconst DrawModes = require('../Core/DrawModes')\r\nconst Color = require('../Core/Color');\r\nconst Utils = require('../Utils/Utils');\r\n\r\nclass TreeHelper extends HelperBase {\r\n\r\n  constructor(renderer, geometryName, shaderName, options) {\r\n    super(renderer, geometryName, shaderName);\r\n\r\n    this.defaults = {\r\n      pointScale: 1.0,\r\n      maxPointSize: 100.0\r\n    }\r\n\r\n    this.opts = Utils.extend(true, this.defaults, options);\r\n    this.indices = null;\r\n    this.geometry.setMode(DrawModes.lines);\r\n    this.initPointSize();\r\n    this.filters = {};\r\n  }\r\n\r\n  getMaxLength(x, y, z) {\r\n    return Math.max(x.length, Math.max(y.length, z.length));\r\n  }\r\n\r\n  setPositions(positions) {\r\n    this.setAttribute('position', positions);\r\n  }\r\n\r\n  setPositionsXYZ(x, y, z) {\r\n    const length = x.length;\r\n    let positions = new Float32Array(length * 3);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      let j = 3 * i;\r\n\r\n      positions[j] = x[i] || 0;\r\n      positions[j + 1] = y[i] || 0;\r\n      positions[j + 2] = z[i] || 0;\r\n    }\r\n\r\n    this.setAttribute('position', positions);\r\n  }\r\n\r\n  /**\r\n   * Set the positions (XYZ), the color (RGB) and size (S) of the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x An array containing the x components.\r\n   * @param {Number[]|Array|Float32Array} y An array containing the y components.\r\n   * @param {Number[]|Array|Float32Array} z An array containing the z components.\r\n   * @param {Number[]|Array|Float32Array} r An array containing the r components.\r\n   * @param {Number[]|Array|Float32Array} g An array containing the g components.\r\n   * @param {Number[]|Array|Float32Array} b An array containing the b components.\r\n   * @param {Number} [s=1.0] The size of the points.\r\n   * @returns {TreeHelper} Itself.\r\n   */\r\n  setXYZRGBS(x, y, z, r, g, b, s = 1.0) {\r\n    const length = r.length;\r\n    let c = new Float32Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      c[i] = Color.rgbToFloat(r[i], g[i], b[i]);\r\n    }\r\n\r\n    this._setValues(x, y, z, c, s);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the positions (XYZ), the color (RGB) and size (S) of the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x An array containing the x components.\r\n   * @param {Number[]|Array|Float32Array} y An array containing the y components.\r\n   * @param {Number[]|Array|Float32Array} z An array containing the z components.\r\n   * @param {String} hex A hex value.\r\n   * @param {Number} [s=1.0] The size of the points.\r\n   * @returns {TreeHelper} Itself.\r\n   */\r\n  setXYZHexS(x, y, z, hex, s = 1.0) {\r\n    const length = x.length;\r\n    let c = new Float32Array(length);\r\n    let floatColor = Color.hexToFloat(hex);\r\n    for (var i = 0; i < length; i++) {\r\n      c[i] = floatColor;\r\n    }\r\n\r\n    this._setValues(x, y, z, c, s);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the positions (XYZ), the hue (H) and size (S) of the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x An array containing the x components.\r\n   * @param {Number[]|Array|Float32Array} y An array containing the y components.\r\n   * @param {Number[]|Array|Float32Array} z An array containing the z components.\r\n   * @param {Number[]|Array|Float32Array|Number} [h=1.0] The hue as a number or an array.\r\n   * @param {Number[]|Array|Float32Array|Number} [s=1.0] The size of the points.\r\n   * @returns {TreeHelper} Itself.\r\n   */\r\n  setXYZHS(x, y, z, h = 1.0, s = 1.0) {\r\n    const length = x.length;\r\n    let c = new Float32Array(length);\r\n    \r\n    if (typeof h !== 'number') {\r\n      for (var i = 0; i < length; i++) {\r\n        c[i] = Color.hslToFloat(h[i]);\r\n      }\r\n    } else if (typeof h) {\r\n      h = Color.hslToFloat(h);\r\n      for (var i = 0; i < length; i++) {\r\n        c[i] = h;\r\n      }\r\n    }\r\n\r\n    this._setValues(x, y, z, c, s);\r\n    return this;\r\n  }\r\n\r\n  // TODO: Get rid of saturation\r\n  _setValues(x, y, z, c, s) {\r\n    let length = this.getMaxLength(x, y, z);\r\n    let saturation = new Float32Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      saturation[i] = 0.0;\r\n    }\r\n\r\n    if (typeof s === 'number') {\r\n      let tmpSize = new Float32Array(length);\r\n      for (var i = 0; i < length; i++) {\r\n        tmpSize[i] = s;\r\n      }\r\n      s = tmpSize;\r\n    }\r\n\r\n    this.setPositionsXYZ(x, y, z);\r\n    this.setHSSFromArrays(c, saturation, s);\r\n\r\n    // TODO: Check why the projection matrix update is needed\r\n    this.renderer.camera.updateProjectionMatrix();\r\n    this.renderer.camera.updateViewMatrix();\r\n\r\n    return this;\r\n  }\r\n\r\n  setPositionsXYZHSS(x, y, z, hue, saturation, size) {\r\n    console.warn('The method \"setPositionsXYZHSS\" is marked as deprecated.');\r\n    let length = this.getMaxLength(x, y, z);\r\n\r\n    this.setPositionsXYZ(x, y, z, length);\r\n    this.setHSS(hue, saturation, size, length);\r\n  }\r\n\r\n  setColors(colors) {\r\n    this.setAttribute('color', colors);\r\n  }\r\n\r\n  updateColors(colors) {\r\n    this.updateAttributeAll('color', colors);\r\n  }\r\n\r\n  updateColor(index, color) {\r\n    this.updateAttribute('color', index, color.components);\r\n  }\r\n\r\n  setPointSize(size) {\r\n    if (size * this.opts.pointScale > this.opts.maxPointSize) {\r\n      return;\r\n    }\r\n\r\n    this.geometry.shader.uniforms.size.value = size * this.opts.pointScale;\r\n  }\r\n\r\n  getPointSize() {\r\n    return this.geometry.shader.uniforms.size.value;\r\n  }\r\n\r\n  setFogDistance(fogStart, fogEnd) {\r\n    console.warn('This function is deprecated.');\r\n    // this.geometry.shader.uniforms.fogStart.value = fogStart;\r\n    // this.geometry.shader.uniforms.fogEnd.value = fogEnd;\r\n  }\r\n\r\n  initPointSize() {\r\n    this.geometry.shader.uniforms.size.value = this.renderer.camera.zoom * this.opts.pointScale;\r\n  }\r\n\r\n  getCutoff() {\r\n    return this.geometry.shader.uniforms.cutoff.value;\r\n  }\r\n\r\n  setCutoff(cutoff) {\r\n    this.geometry.shader.uniforms.cutoff.value = cutoff;\r\n  }\r\n\r\n  getHue(index) {\r\n    let colors = this.getAttribute('color');\r\n\r\n    return colors[index * 3];\r\n  }\r\n\r\n  setHSS(hue, saturation, size, length) {\r\n    let c = new Float32Array(length * 3);\r\n\r\n    for (let i = 0; i < length * 3; i += 3) {\r\n      c[i] = hue;\r\n      c[i + 1] = saturation;\r\n      c[i + 2] = size;\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Sets the fog colour and it's density, as seen from the camera.\r\n   * \r\n   * @param {Array} color An array defining the rgba values of the fog colour.\r\n   * @param {Number} fogDensity The density of the fog.\r\n   * @returns {TreeHelper} Itself.\r\n   */\r\n  setFog(color, fogDensity = 6.0) {\r\n    if (!this.geometry.shader.uniforms.clearColor || !this.geometry.shader.uniforms.fogDensity) {\r\n      console.warn('Shader \"' + this.geometry.shader.name + '\" does not support fog.');\r\n      return this;\r\n    }\r\n\r\n    this.geometry.shader.uniforms.clearColor.value = color;\r\n    this.geometry.shader.uniforms.fogDensity.value = fogDensity;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the HSS values.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} hue An array of hue values.\r\n   * @param {Number[]|Array|Float32Array} saturation An array of saturation values.\r\n   * @param {Number[]|Array|Float32Array} size An array of size values.\r\n   */\r\n  setHSSFromArrays(hue, saturation, size) {\r\n    let length = hue.length;\r\n    let c = new Float32Array(length * 3);\r\n    let index = 0;\r\n\r\n    if (hue.length !== length && saturation.length !== length && size.length !== length) {\r\n      throw 'Hue, saturation and size have to be arrays of length \"length\" (' + length + ').';\r\n    }\r\n\r\n    for (let i = 0; i < length * 3; i += 3) {\r\n      c[i] = hue[index];\r\n      c[i + 1] = saturation[index];\r\n      c[i + 2] = size[index];\r\n\r\n      index++;\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  addFilter(name, filter) {\r\n    filter.setGeometry(this.geometry);\r\n    this.filters[name] = filter;\r\n  }\r\n\r\n  removeFilter(name) {\r\n    delete this.filters[name];\r\n  }\r\n\r\n  getFilter(name) {\r\n    return this.filters[name];\r\n  }\r\n}\r\n\r\nmodule.exports = TreeHelper","const AABBHelper = require('./AABBHelper');\r\nconst CoordinatesHelper = require('./CoordinatesHelper');\r\nconst HelperBase = require('./HelperBase');\r\nconst OctreeHelper = require('./OctreeHelper');\r\nconst PointHelper = require('./PointHelper');\r\nconst TreeHelper = require('./TreeHelper');\r\n\r\nmodule.exports = {\r\n  AABBHelper,\r\n  CoordinatesHelper,\r\n  HelperBase,\r\n  OctreeHelper,\r\n  PointHelper,\r\n  TreeHelper\r\n}","//@ts-check\r\n\r\nconst FileReaderBase = require('./FileReaderBase');\r\nconst Utils = require('../Utils/Utils');\r\n\r\n/** A class representing a CSV file reader. */\r\nclass CsvFileReader extends FileReaderBase {\r\n    /**\r\n     * Creates an instance of CsvFileReader.\r\n     * @param {String} source The source of the file. This is either a input element (type=file) or a URL. If it is a URL, set local to true.\r\n     * @param {any} options Options. See documentation for details.\r\n     * @param {boolean} [local=true] A boolean indicating whether or not the source is local (a file input) or remote (a url).\r\n     */\r\n    constructor(source, options, local = true) {\r\n        super(source, local);\r\n\r\n        this.defaults = {\r\n            separator: ',',\r\n            cols: [],\r\n            types: [],\r\n            header: true\r\n        }\r\n\r\n        this.opts = Utils.extend(true, this.defaults, options);\r\n        this.columns = {};\r\n        this.headers = [];\r\n        this.types = this.opts.types;\r\n        this.cols = this.opts.cols;\r\n    }\r\n\r\n    /**\r\n     * Called when the data is loaded, will raise the \"loaded\" event.\r\n     * \r\n     * @param {any} data The data loaded from the file or url.\r\n     * @returns {CsvFileReader} Itself.\r\n     */\r\n    loaded(data) {\r\n        data = data.replace('\\n\\n', '\\n');\r\n        data = data.replace(/^\\s+|\\s+$/g, '');\r\n\r\n        let lines = data.split('\\n');\r\n        let length = lines.length;\r\n        let init = true;\r\n        let h = this.opts.header ? 1 : 0;\r\n\r\n        if (this.cols.length !== 0) {\r\n            if (this.types.length !== this.cols.length) {\r\n                throw 'Types and cols must have the same number of elements.'\r\n            }\r\n        } else {\r\n            if (this.types.length !== this.cols.length || this.types.length + this.cols.length === 0) {\r\n                let values = lines[h].split(this.opts.separator);\r\n                \r\n                this.types = [];\r\n                for (let i = 0; i < values.length; i++) {\r\n                    if(Utils.isFloat(parseFloat(values[i], 10))) {\r\n                        this.types.push('Float32Array');\r\n                    } else if (Utils.isInt(parseFloat(values[i], 10))) {\r\n                        this.types.push('Int32Array');\r\n                    } else {\r\n                        this.types.push('StringArray');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.cols.length === 0) {\r\n            let values = lines[0].split(this.opts.separator);\r\n            \r\n            for (let i = 0; i < values.length; i++) {\r\n                this.cols.push(i);\r\n            }\r\n        }\r\n\r\n        if (h) {\r\n            let headerNames = lines[0].split(this.opts.separator);\r\n\r\n            for (let i = 0; i < this.cols.length; i++) {\r\n                this.headers[i] = headerNames[this.cols[i]].trim();\r\n            }\r\n        } else {\r\n            for (let i = 0; i < this.cols.length; i++) {\r\n                this.headers[i] = i;\r\n            }\r\n        }\r\n        \r\n        for (let i = h; i < length; i++) {\r\n            let values = lines[i].split(this.opts.separator);\r\n\r\n            if (this.cols.length == 0)\r\n                for (let j = 0; j < values.length; j++) {\r\n                    this.cols.push[j];\r\n                }\r\n\r\n            if (init) {\r\n                for (let j = 0; j < this.cols.length; j++) {\r\n                    this._createArray(this.headers[j], this.types[j], length - h);\r\n                }\r\n\r\n                init = false;\r\n            }\r\n\r\n            for (let j = 0; j < this.cols.length; j++) {\r\n                this.columns[this.headers[j]][i - h] = values[this.cols[j]];\r\n            }\r\n        }\r\n\r\n        this.raiseEvent('loaded', this.columns);\r\n        \r\n        return this;\r\n    }\r\n\r\n    _createArray(index, type, length) {\r\n        if (type == 'Int8Array') {\r\n            this.columns[index] = new Int8Array(length);\r\n        } else if (type == 'Uint8Array') {\r\n            this.columns[index] = new Uint8Array(length);\r\n        } else if (type == 'Uint8ClampedArray') {\r\n            this.columns[index] = new Uint8ClampedArray(length);\r\n        } else if (type == 'Int16Array') {\r\n            this.columns[index] = new Int16Array(length);\r\n        } else if (type == 'Uint16Array') {\r\n            this.columns[index] = new Uint16Array(length);\r\n        } else if (type == 'Int32Array') {\r\n            this.columns[index] = new Int32Array(length);\r\n        } else if (type == 'Uint32Array') {\r\n            this.columns[index] = new Uint32Array(length);\r\n        } else if (type == 'Float32Array') {\r\n            this.columns[index] = new Float32Array(length);\r\n        } else if (type == 'Float64Array') {\r\n            this.columns[index] = new Float64Array(length);\r\n        } else {\r\n            this.columns[index] = new Array(length);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = CsvFileReader","//@ts-check\r\n\r\nconst Utils = require('../Utils/Utils');\r\n\r\n/** \r\n * An abstract class representing the base for file reader implementations. \r\n * \r\n * @property {String} source The source of the file. This is either a input element (type=file) or a URL. If it is a URL, set local to true.\r\n * */\r\nclass FileReaderBase {\r\n    /**\r\n     * Creates an instance of FileReaderBase.\r\n     * \r\n     * @param {String} source The source of the file. This is either a input element (type=file) or a URL. If it is a URL, set local to true.\r\n     * @param {Boolean} [local=true] A boolean indicating whether or not the source is local (a file input) or remote (a url).\r\n     */\r\n    constructor(source, local = true) {\r\n        this.source = source;\r\n        this._eventListeners = {};\r\n        \r\n        let that = this;\r\n\r\n        if (local) {\r\n            this.element = document.getElementById(this.source);\r\n\r\n            this.element.addEventListener('click', function() {\r\n                this.value = null;\r\n            });\r\n\r\n            this.element.addEventListener('change', function() {\r\n                let fileReader = new FileReader();\r\n\r\n                fileReader.onload = function() {\r\n                    that.loaded(fileReader.result);\r\n                }\r\n\r\n                fileReader.readAsBinaryString(this.files[0]);\r\n            });\r\n        } else {\r\n            Utils.jsonp(source, function(response) {\r\n                that.loaded(response);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an event listener.\r\n     * \r\n     * @param {String} eventName The name of the event.\r\n     * @param {Function} callback A callback function associated with the event name.\r\n     */\r\n    addEventListener(eventName, callback) {\r\n        if(!this._eventListeners[eventName]) {\r\n            this._eventListeners[eventName] = [];\r\n        }\r\n\r\n        this._eventListeners[eventName].push(callback);\r\n    }\r\n\r\n    /**\r\n     * Raise an event. To be called by inheriting classes.\r\n     * \r\n     * @param {String} eventName The name of the event.\r\n     * @param {any} data Data to be passed to the handler.\r\n     */\r\n    raiseEvent(eventName, data) {\r\n        if(!this._eventListeners[eventName]) {\r\n            return;\r\n        }\r\n\r\n        for(let i = 0; i < this._eventListeners[eventName].length; i++) {\r\n            this._eventListeners[eventName][i](data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To be overwritten by inheriting classes.\r\n     * \r\n     * @param {any} data \r\n     */\r\n    loaded(data) {\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = FileReaderBase","//@ts-check\r\n\r\nconst FileReaderBase = require('./FileReaderBase');\r\nconst Utils = require('../Utils/Utils');\r\n\r\n/** A class representing a matrix file reader. */\r\nclass MatrixFileReader extends FileReaderBase {\r\n    /**\r\n     * Creates an instance of MatrixFileReader.\r\n     * @param {String} source The source of the file. This is either a input element (type=file) or a URL. If it is a URL, set local to true.\r\n     * @param {any} options Options. See documentation for details.\r\n     * @param {boolean} [local=true] A boolean indicating whether or not the source is local (a file input) or remote (a url).\r\n     */\r\n    constructor(source, options, local = true) {\r\n        super(source, local);\r\n\r\n        this.defaults = {\r\n            elementSeperator: '\\t',\r\n            valueSeparator: ';',\r\n            replaceNaNWith: 'NaN',\r\n            skipNaN: true,\r\n            types: []\r\n        }\r\n\r\n        this.opts = Utils.extend(true, this.defaults, options);\r\n        this.types = this.opts.types;\r\n        this.columns = {};\r\n\r\n        if (this.types.length === 0) {\r\n            throw('When reading data from a file, the types have to be specified.');\r\n        }\r\n\r\n        // Add the types for the indices\r\n        this.opts.types.unshift('Int32Array');\r\n        this.opts.types.unshift('Int32Array');\r\n        this.opts.types.unshift('Int32Array');\r\n    }\r\n\r\n    /**\r\n     * Called when the data is loaded, will raise the \"loaded\" event.\r\n     * \r\n     * @param {any} data The data loaded from the file or url.\r\n     * @returns {MatrixFileReader} Itself.\r\n     */\r\n    loaded(data) {\r\n        data = data.replace('\\n\\n', '\\n');\r\n        data = data.replace(/^\\s+|\\s+$/g, '');\r\n\r\n        if (this.opts.replaceNaNWith !== 'NaN') {\r\n            data = data.replace('NaN', this.opts.replaceNaNWith);\r\n        }\r\n\r\n        let lines = data.split('\\n');\r\n        let nRows = lines.length;\r\n        let nColumns = lines[0].split(this.opts.elementSeperator).length;\r\n        // Including the indices (x, y, z), therefore + 3\r\n        let nValues = lines[0].split(this.opts.elementSeperator)[0].split(this.opts.valueSeparator).length + 3;\r\n        \r\n        if (this.types.length !== nValues || this.types.length + nValues === 0) {\r\n            let values = lines[0].split(this.opts.valueSeparator);\r\n            \r\n            this.types = [];\r\n            for (let i = 0; i < values.length; i++) {\r\n                if(Utils.isFloat(parseFloat(values[i], 10))) {\r\n                    this.types.push('Float32Array');\r\n                } else if (Utils.isInt(parseFloat(values[i], 10))) {\r\n                    this.types.push('Int32Array');\r\n                } else {\r\n                    this.types.push('StringArray');\r\n                }\r\n            }\r\n        }\r\n        \r\n        for (var i = 0; i < nValues; i++) {\r\n            this._createArray(i, this.types[i], nRows * nColumns);\r\n        }\r\n\r\n        let actualLength = 0;\r\n\r\n        for (var i = 0; i < nRows; i++) {\r\n            let row = lines[i].split(this.opts.elementSeperator);\r\n\r\n            if (row.length === 0) {\r\n                continue;\r\n            }\r\n\r\n            for (var j = 0; j < nColumns; j++) {\r\n                if(!row[j]) {\r\n                    continue;\r\n                }\r\n                \r\n                let values = row[j].split(this.opts.valueSeparator);\r\n\r\n                if (this.opts.skipNaN) {\r\n                    let skip = false;\r\n\r\n                    for (var k = 0; k < values.length; k++) {\r\n                        if (isNaN(values[k])) {\r\n                            skip = true;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (skip) {\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                this.columns[0][actualLength] = i;\r\n                this.columns[1][actualLength] = j;\r\n                // Set zero for 2D matrix\r\n                this.columns[2][actualLength] = 0;\r\n\r\n                for (var k = 0; k < values.length; k++) {\r\n                    this.columns[k + 3][actualLength] = values[k];\r\n                }\r\n\r\n                actualLength++;\r\n            }\r\n        }\r\n\r\n        this._resizeArrays(actualLength);\r\n\r\n        this.raiseEvent('loaded', this.columns);\r\n        \r\n        return this;\r\n    }\r\n\r\n    _resizeArrays(length) {\r\n        // Might need polyfill\r\n        for (var i = 0; i < this.columns.length; i++) {\r\n            this.columns[i] = this.columns[i].slice(0, length);\r\n        }\r\n    }\r\n\r\n    _createArray(index, type, length) {\r\n        if (type == 'Int8Array') {\r\n            this.columns[index] = new Int8Array(length);\r\n        } else if (type == 'Uint8Array') {\r\n            this.columns[index] = new Uint8Array(length);\r\n        } else if (type == 'Uint8ClampedArray') {\r\n            this.columns[index] = new Uint8ClampedArray(length);\r\n        } else if (type == 'Int16Array') {\r\n            this.columns[index] = new Int16Array(length);\r\n        } else if (type == 'Uint16Array') {\r\n            this.columns[index] = new Uint16Array(length);\r\n        } else if (type == 'Int32Array') {\r\n            this.columns[index] = new Int32Array(length);\r\n        } else if (type == 'Uint32Array') {\r\n            this.columns[index] = new Uint32Array(length);\r\n        } else if (type == 'Float32Array') {\r\n            this.columns[index] = new Float32Array(length);\r\n        } else if (type == 'Float64Array') {\r\n            this.columns[index] = new Float64Array(length);\r\n        } else {\r\n            this.columns[index] = new Array(length);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = MatrixFileReader","const CsvFileReader = require('./CsvFileReader');\r\nconst FileReaderBase = require('./FileReaderBase');\r\nconst MatrixFileReader = require('./MatrixFileReader');\r\n\r\nmodule.exports = {\r\n  CsvFileReader,\r\n  FileReaderBase,\r\n  MatrixFileReader\r\n}","const Core = require('./Core');\r\nconst Controls = require('./Controls');\r\nconst Cameras = require('./Cameras');\r\nconst Filters = require('./Filters');\r\nconst Helpers = require('./Helpers');\r\nconst IO = require('./IO');\r\nconst Math = require('./Math');\r\nconst Shaders = require('./Shaders');\r\nconst Spice = require('./Spice');\r\nconst Utils = require('./Utils').Utils\r\n\r\nmodule.exports = {\r\n  Cameras,\r\n  Controls,\r\n  Core,\r\n  Filters,\r\n  Helpers,\r\n  IO,\r\n  Math,\r\n  Shaders,\r\n  Spice,\r\n  Utils\r\n}","//@ts-check\r\n\r\n\r\n\r\n/** A class representing a 3x3 float matrix */\r\nclass Matrix3f {\r\n    /**\r\n     * The constructor for the class Matrix3f.\r\n     *\r\n     * @param {Float32Array} [entries=new Float32Array()] The Float32Array to which the entries will be set. If no value is provided, the matrix will be initialized to the identity matrix.\r\n     */\r\n    constructor(entries = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1])) {\r\n        this.entries = entries;\r\n    }\r\n\r\n    /**\r\n     * Clones the matrix and returns the clone as a new Matrix3f object.\r\n     *\r\n     * @returns {Matrix3f} The clone.\r\n     */\r\n    clone() {\r\n        return new Matrix3f(new Float32Array(this.entries));\r\n    }\r\n\r\n    /**\r\n     * Compares this matrix to another matrix.\r\n     *\r\n     * @param {Matrix3f} mat A matrix to be compared to this matrix.\r\n     * @returns {boolean} A boolean indicating whether or not the two matrices are identical.\r\n     */\r\n    equals(mat) {\r\n        for (let i = 0; i < this.entries.length; i++) {\r\n            if (this.entries[i] !== mat.entries[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nmodule.exports = Matrix3f","//@ts-check\r\n\r\nconst Vector3f = require('./Vector3f');\r\n\r\n/** A class representing a 4x4 float matrix */\r\nclass Matrix4f {\r\n  // Do NOT go double precision on GPUs!!!\r\n  // See:\r\n  // http://stackoverflow.com/questions/2079906/float-vs-double-on-graphics-hardware\r\n\r\n  /**\r\n   * Creates an instance of Matrix4f.\r\n   * @param {Float32Array} [entries=new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])] \r\n   */\r\n  constructor(entries = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])) {\r\n    this.entries = entries;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {Number} m00 A matrix entry.\r\n   * @param {Number} m10 A matrix entry.\r\n   * @param {Number} m20 A matrix entry.\r\n   * @param {Number} m30 A matrix entry.\r\n   * @param {Number} m01 A matrix entry.\r\n   * @param {Number} m11 A matrix entry.\r\n   * @param {Number} m21 A matrix entry.\r\n   * @param {Number} m31 A matrix entry.\r\n   * @param {Number} m02 A matrix entry.\r\n   * @param {Number} m12 A matrix entry.\r\n   * @param {Number} m22 A matrix entry.\r\n   * @param {Number} m32 A matrix entry.\r\n   * @param {Number} m03 A matrix entry.\r\n   * @param {Number} m13 A matrix entry.\r\n   * @param {Number} m23 A matrix entry.\r\n   * @param {Number} m33 A matrix entry.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\r\n    this.entries.set([m00, m10, m20, m30,\r\n      m01, m11, m21, m31,\r\n      m02, m12, m22, m32,\r\n      m03, m13, m23, m33\r\n    ]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets all entries in the matrix to zero.\r\n   * \r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  setZero() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiplies this matrix with another matrix (a * b).\r\n   * \r\n   * @param {any} b Another matrix.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  multiplyA(b) {\r\n    // First, store the values in local variables.\r\n    // See:\r\n    // http://blog.tojicode.com/2010/06/stupidly-fast-webgl-matricies.html\r\n\r\n    let a00 = this.entries[0],\r\n      a01 = this.entries[4],\r\n      a02 = this.entries[8],\r\n      a03 = this.entries[12];\r\n    let a10 = this.entries[1],\r\n      a11 = this.entries[5],\r\n      a12 = this.entries[9],\r\n      a13 = this.entries[13];\r\n    let a20 = this.entries[2],\r\n      a21 = this.entries[6],\r\n      a22 = this.entries[10],\r\n      a23 = this.entries[14];\r\n    let a30 = this.entries[3],\r\n      a31 = this.entries[7],\r\n      a32 = this.entries[11],\r\n      a33 = this.entries[15];\r\n\r\n    let b00 = b.entries[0],\r\n      b01 = b.entries[4],\r\n      b02 = b.entries[8],\r\n      b03 = b.entries[12];\r\n    let b10 = b.entries[1],\r\n      b11 = b.entries[5],\r\n      b12 = b.entries[9],\r\n      b13 = b.entries[13];\r\n    let b20 = b.entries[2],\r\n      b21 = b.entries[6],\r\n      b22 = b.entries[10],\r\n      b23 = b.entries[14];\r\n    let b30 = b.entries[3],\r\n      b31 = b.entries[7],\r\n      b32 = b.entries[11],\r\n      b33 = b.entries[15];\r\n\r\n    this.entries[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;\r\n    this.entries[1] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;\r\n    this.entries[2] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;\r\n    this.entries[3] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;\r\n    this.entries[4] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;\r\n    this.entries[5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;\r\n    this.entries[6] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;\r\n    this.entries[7] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;\r\n    this.entries[8] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;\r\n    this.entries[9] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;\r\n    this.entries[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;\r\n    this.entries[11] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;\r\n    this.entries[12] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;\r\n    this.entries[13] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;\r\n    this.entries[14] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;\r\n    this.entries[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiplies another matrix with this matrix (a * b).\r\n   * \r\n   * @param {any} a Another matrix.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  multiplyB(a) {\r\n    // First, store the values in local variables.\r\n    // See:\r\n    // http://blog.tojicode.com/2010/06/stupidly-fast-webgl-matricies.html\r\n\r\n    let a00 = a.entries[0],\r\n      a01 = a.entries[4],\r\n      a02 = a.entries[8],\r\n      a03 = a.entries[12];\r\n    let a10 = a.entries[1],\r\n      a11 = a.entries[5],\r\n      a12 = a.entries[9],\r\n      a13 = a.entries[13];\r\n    let a20 = a.entries[2],\r\n      a21 = a.entries[6],\r\n      a22 = a.entries[10],\r\n      a23 = a.entries[14];\r\n    let a30 = a.entries[3],\r\n      a31 = a.entries[7],\r\n      a32 = a.entries[11],\r\n      a33 = a.entries[15];\r\n\r\n    let b00 = this.entries[0],\r\n      b01 = this.entries[4],\r\n      b02 = this.entries[8],\r\n      b03 = this.entries[12];\r\n    let b10 = this.entries[1],\r\n      b11 = this.entries[5],\r\n      b12 = this.entries[9],\r\n      b13 = this.entries[13];\r\n    let b20 = this.entries[2],\r\n      b21 = this.entries[6],\r\n      b22 = this.entries[10],\r\n      b23 = this.entries[14];\r\n    let b30 = this.entries[3],\r\n      b31 = this.entries[7],\r\n      b32 = this.entries[11],\r\n      b33 = this.entries[15];\r\n\r\n    this.entries[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;\r\n    this.entries[1] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;\r\n    this.entries[2] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;\r\n    this.entries[3] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;\r\n    this.entries[4] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;\r\n    this.entries[5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;\r\n    this.entries[6] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;\r\n    this.entries[7] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;\r\n    this.entries[8] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;\r\n    this.entries[9] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;\r\n    this.entries[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;\r\n    this.entries[11] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;\r\n    this.entries[12] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;\r\n    this.entries[13] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;\r\n    this.entries[14] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;\r\n    this.entries[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the scale component of this matrix.\r\n   * \r\n   * @param {Vector3f} vec The scaling vector.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  scale(vec) {\r\n    let x = vec.components[0];\r\n    let y = vec.components[1];\r\n    let z = vec.components[2];\r\n\r\n    this.entries[0] *= x;\r\n    this.entries[1] *= x;\r\n    this.entries[2] *= x;\r\n    this.entries[3] *= x;\r\n\r\n    this.entries[4] *= y;\r\n    this.entries[5] *= y;\r\n    this.entries[6] *= y;\r\n    this.entries[7] *= y;\r\n\r\n    this.entries[8] *= z;\r\n    this.entries[9] *= z;\r\n    this.entries[10] *= z;\r\n    this.entries[11] *= z;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the position component of this matrix.\r\n   * \r\n   * @param {any} vec The position vector.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  setPosition(vec) {\r\n    this.entries[12] = vec.components[0];\r\n    this.entries[13] = vec.components[1];\r\n    this.entries[14] = vec.components[2];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation component of this matrix.\r\n   * \r\n   * @param {Quaternion} q A quaternion representing the rotation.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  setRotation(q) {\r\n    let x = q.components[0];\r\n    let y = q.components[1];\r\n    let z = q.components[2];\r\n    let w = q.components[3];\r\n\r\n    let x2 = x + x,\r\n      y2 = y + y,\r\n      z2 = z + z;\r\n    let xx = x * x2,\r\n      xy = x * y2,\r\n      xz = x * z2;\r\n    let yy = y * y2,\r\n      yz = y * z2,\r\n      zz = z * z2;\r\n    let wx = w * x2,\r\n      wy = w * y2,\r\n      wz = w * z2;\r\n\r\n    this.entries[0] = 1 - (yy + zz);\r\n    this.entries[1] = xy + wz;\r\n    this.entries[2] = xz - wy;\r\n    this.entries[4] = xy - wz;\r\n    this.entries[5] = 1 - (xx + zz);\r\n    this.entries[6] = yz + wx;\r\n    this.entries[8] = xz + wy;\r\n    this.entries[9] = yz - wx;\r\n    this.entries[10] = 1 - (xx + yy);\r\n\r\n    this.entries[3] = 0.0;\r\n    this.entries[7] = 0.0;\r\n    this.entries[11] = 0.0;\r\n    this.entries[12] = 0.0;\r\n    this.entries[13] = 0.0;\r\n    this.entries[14] = 0.0;\r\n    this.entries[15] = 1.0;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the determinant of the matrix.\r\n   * \r\n   * @returns {Number} The determinant of this matrix.\r\n   */\r\n  determinant() {\r\n    let a = this.entries;\r\n    \r\n    let a00 = a.entries[0],\r\n      a01 = a.entries[4],\r\n      a02 = a.entries[8],\r\n      a03 = a.entries[12];\r\n    let a10 = a.entries[1],\r\n      a11 = a.entries[5],\r\n      a12 = a.entries[9],\r\n      a13 = a.entries[13];\r\n    let a20 = a.entries[2],\r\n      a21 = a.entries[6],\r\n      a22 = a.entries[10],\r\n      a23 = a.entries[14];\r\n    let a30 = a.entries[3],\r\n      a31 = a.entries[7],\r\n      a32 = a.entries[11],\r\n      a33 = a.entries[15];\r\n\r\n    return (\r\n      a30 * (\r\n        a03 * a12 * a21 - a02 * a13 * a21 -\r\n        a03 * a11 * a22 + a01 * a13 * a22 +\r\n        a02 * a11 * a23 - a01 * a12 * a23\r\n      ) +\r\n      a31 * (\r\n        a00 * a12 * a23 - a00 * a13 * a22 +\r\n        a03 * a10 * a22 - a02 * a10 * a23 +\r\n        a02 * a13 * a20 - a03 * a12 * a20\r\n      ) +\r\n      a32 * (\r\n        a00 * a13 * a21 - a00 * a11 * a23 -\r\n        a03 * a10 * a21 + a01 * a10 * a23 +\r\n        a03 * a11 * a20 - a01 * a13 * a20\r\n      ) +\r\n      a33 * (-a02 * a11 * a20 - a00 * a12 * a21 +\r\n        a00 * a11 * a22 + a02 * a10 * a21 -\r\n        a01 * a10 * a22 + a01 * a12 * a20\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Decomposes the matrix into its positional, rotational and scaling component.\r\n   * \r\n   * @param {Vector3f} outPosition The positional component will be written to this vector.\r\n   * @param {Quaternion} outQuaternion The rotational component will be written to this quaternion.\r\n   * @param {Vector3f} outScale The scaling component will be written to this vector.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  decompose(outPosition, outQuaternion, outScale) {\r\n    let m = new Matrix4f();\r\n\r\n    // The position is the simple one\r\n    outPosition.set(this.entries[12], this.entries[13], this.entries[14]);\r\n\r\n    // Calculate the scale\r\n    let sx = Math.sqrt(this.entries[0] * this.entries[0] +\r\n      this.entries[1] * this.entries[1] +\r\n      this.entries[2] * this.entries[2]);\r\n\r\n    let sy = Math.sqrt(this.entries[4] * this.entries[4] +\r\n      this.entries[5] * this.entries[5] +\r\n      this.entries[6] * this.entries[6]);\r\n\r\n    let sz = Math.sqrt(this.entries[8] * this.entries[8] +\r\n      this.entries[9] * this.entries[9] +\r\n      this.entries[10] * this.entries[10]);\r\n\r\n    let det = this.determinant();\r\n\r\n    if (det < 0) {\r\n      sx = -sx;\r\n    }\r\n\r\n    // Set the scale\r\n    outScale.set(sx, sy, sz);\r\n\r\n    // Get the info for the quaternion, this involves scaling the rotation\r\n    // See:\r\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\r\n    let isx = 1.0 / sx;\r\n    let isy = 1.0 / sy;\r\n    let isz = 1.0 / sz;\r\n\r\n    m.entries.set(this.entries);\r\n\r\n    m.entries[0] *= isx;\r\n    m.entries[1] *= isx;\r\n    m.entries[2] *= isx;\r\n\r\n    m.entries[4] *= isy;\r\n    m.entries[5] *= isy;\r\n    m.entries[6] *= isy;\r\n\r\n    m.entries[8] *= isz;\r\n    m.entries[9] *= isz;\r\n    m.entries[10] *= isz;\r\n\r\n    outQuaternion.setFromMatrix(m);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Composes the matrix from the positional, rotational and scaling components.\r\n   * \r\n   * @param {Vector3f} position The positional component.\r\n   * @param {Quaternion} quaternion The rotational component.\r\n   * @param {Vector3f} scale The scaling component.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  compose(position, quaternion, scale) {\r\n    this.setRotation(quaternion);\r\n    this.scale(scale);\r\n    this.setPosition(position);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inverts this matrix.\r\n   * \r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  invert() {\r\n    // Fugly implementation lifted from MESA (originally in C++)\r\n    let im = new Matrix4f();\r\n    let m = this.entries;\r\n\r\n    im.entries[0] = m[5] * m[10] * m[15] -\r\n      m[5] * m[11] * m[14] -\r\n      m[9] * m[6] * m[15] +\r\n      m[9] * m[7] * m[14] +\r\n      m[13] * m[6] * m[11] -\r\n      m[13] * m[7] * m[10];\r\n\r\n    im.entries[4] = -m[4] * m[10] * m[15] +\r\n      m[4] * m[11] * m[14] +\r\n      m[8] * m[6] * m[15] -\r\n      m[8] * m[7] * m[14] -\r\n      m[12] * m[6] * m[11] +\r\n      m[12] * m[7] * m[10];\r\n\r\n    im.entries[8] = m[4] * m[9] * m[15] -\r\n      m[4] * m[11] * m[13] -\r\n      m[8] * m[5] * m[15] +\r\n      m[8] * m[7] * m[13] +\r\n      m[12] * m[5] * m[11] -\r\n      m[12] * m[7] * m[9];\r\n\r\n    im.entries[12] = -m[4] * m[9] * m[14] +\r\n      m[4] * m[10] * m[13] +\r\n      m[8] * m[5] * m[14] -\r\n      m[8] * m[6] * m[13] -\r\n      m[12] * m[5] * m[10] +\r\n      m[12] * m[6] * m[9];\r\n\r\n    im.entries[1] = -m[1] * m[10] * m[15] +\r\n      m[1] * m[11] * m[14] +\r\n      m[9] * m[2] * m[15] -\r\n      m[9] * m[3] * m[14] -\r\n      m[13] * m[2] * m[11] +\r\n      m[13] * m[3] * m[10];\r\n\r\n    im.entries[5] = m[0] * m[10] * m[15] -\r\n      m[0] * m[11] * m[14] -\r\n      m[8] * m[2] * m[15] +\r\n      m[8] * m[3] * m[14] +\r\n      m[12] * m[2] * m[11] -\r\n      m[12] * m[3] * m[10];\r\n\r\n    im.entries[9] = -m[0] * m[9] * m[15] +\r\n      m[0] * m[11] * m[13] +\r\n      m[8] * m[1] * m[15] -\r\n      m[8] * m[3] * m[13] -\r\n      m[12] * m[1] * m[11] +\r\n      m[12] * m[3] * m[9];\r\n\r\n    im.entries[13] = m[0] * m[9] * m[14] -\r\n      m[0] * m[10] * m[13] -\r\n      m[8] * m[1] * m[14] +\r\n      m[8] * m[2] * m[13] +\r\n      m[12] * m[1] * m[10] -\r\n      m[12] * m[2] * m[9];\r\n\r\n    im.entries[2] = m[1] * m[6] * m[15] -\r\n      m[1] * m[7] * m[14] -\r\n      m[5] * m[2] * m[15] +\r\n      m[5] * m[3] * m[14] +\r\n      m[13] * m[2] * m[7] -\r\n      m[13] * m[3] * m[6];\r\n\r\n    im.entries[6] = -m[0] * m[6] * m[15] +\r\n      m[0] * m[7] * m[14] +\r\n      m[4] * m[2] * m[15] -\r\n      m[4] * m[3] * m[14] -\r\n      m[12] * m[2] * m[7] +\r\n      m[12] * m[3] * m[6];\r\n\r\n    im.entries[10] = m[0] * m[5] * m[15] -\r\n      m[0] * m[7] * m[13] -\r\n      m[4] * m[1] * m[15] +\r\n      m[4] * m[3] * m[13] +\r\n      m[12] * m[1] * m[7] -\r\n      m[12] * m[3] * m[5];\r\n\r\n    im.entries[14] = -m[0] * m[5] * m[14] +\r\n      m[0] * m[6] * m[13] +\r\n      m[4] * m[1] * m[14] -\r\n      m[4] * m[2] * m[13] -\r\n      m[12] * m[1] * m[6] +\r\n      m[12] * m[2] * m[5];\r\n\r\n    im.entries[3] = -m[1] * m[6] * m[11] +\r\n      m[1] * m[7] * m[10] +\r\n      m[5] * m[2] * m[11] -\r\n      m[5] * m[3] * m[10] -\r\n      m[9] * m[2] * m[7] +\r\n      m[9] * m[3] * m[6];\r\n\r\n    im.entries[7] = m[0] * m[6] * m[11] -\r\n      m[0] * m[7] * m[10] -\r\n      m[4] * m[2] * m[11] +\r\n      m[4] * m[3] * m[10] +\r\n      m[8] * m[2] * m[7] -\r\n      m[8] * m[3] * m[6];\r\n\r\n    im.entries[11] = -m[0] * m[5] * m[11] +\r\n      m[0] * m[7] * m[9] +\r\n      m[4] * m[1] * m[11] -\r\n      m[4] * m[3] * m[9] -\r\n      m[8] * m[1] * m[7] +\r\n      m[8] * m[3] * m[5];\r\n\r\n    im.entries[15] = m[0] * m[5] * m[10] -\r\n      m[0] * m[6] * m[9] -\r\n      m[4] * m[1] * m[10] +\r\n      m[4] * m[2] * m[9] +\r\n      m[8] * m[1] * m[6] -\r\n      m[8] * m[2] * m[5];\r\n\r\n    let det = m[0] * im.entries[0] +\r\n      m[1] * im.entries[4] +\r\n      m[2] * im.entries[8] +\r\n      m[3] * im.entries[12];\r\n\r\n    if (det == 0) {\r\n      throw 'Determinant is zero.';\r\n    }\r\n\r\n    det = 1.0 / det;\r\n\r\n    for (let i = 0; i < 16; i++) {\r\n      this.entries[i] = im.entries[i] * det;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Projects the vector from world space into camera space.\r\n   * \r\n   * @param {Vector3f} v A vector to project.\r\n   * @param {CameraBase} camera A camera instance.\r\n   * @returns {Vector3f} The vector in camera space.\r\n   */\r\n  static projectVector(v, camera) {\r\n      return v.applyProjection(Matrix4f.multiply(camera.projectionMatrix, Matrix4f.invert(camera.modelMatrix)));\r\n  }\r\n\r\n  /**\r\n   * Projects the vector from camera space into world space.\r\n   * \r\n   * @param {Vector3f} v A vector to unproject.\r\n   * @param {CameraBase} camera A camera instance.\r\n   * @returns {Vector3f} The vector in world space.\r\n   */\r\n  static unprojectVector(v, camera) {\r\n      return v.applyProjection(Matrix4f.multiply(camera.modelMatrix, Matrix4f.invert(camera.projectionMatrix)));\r\n  }\r\n\r\n  /**\r\n   * Clones this matrix.\r\n   * \r\n   * @returns {Matrix4f} A clone of the matrix.\r\n   */\r\n  clone() {\r\n    return new Matrix4f(new Float32Array(this.entries));\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not the entries of the two matrices match.\r\n   * \r\n   * @param {Matrix4f} a A matrix.\r\n   * @returns {Boolean} A boolean indicating whether or not the entries of the two matrices match.\r\n   */\r\n  equals(a) {\r\n    for (let i = 0; i < this.entries.length; i++) {\r\n      if (this.entries[i] !== a.entries[i]) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of the matrix.\r\n   * \r\n   * @returns {String} The string representation of this matrix.\r\n   */\r\n  toString() {\r\n    let str = this.entries[0] + ', ' + this.entries[4] + ', ' + this.entries[8] + ', ' + this.entries[12] + '\\n';\r\n    str += this.entries[1] + ', ' + this.entries[5] + ', ' + this.entries[9] + ', ' + this.entries[13] + '\\n';\r\n    str += this.entries[2] + ', ' + this.entries[6] + ', ' + this.entries[10] + ', ' + this.entries[14] + '\\n';\r\n    str += this.entries[3] + ', ' + this.entries[7] + ', ' + this.entries[11] + ', ' + this.entries[15] + '\\n';\r\n\r\n    return str;\r\n  }\r\n\r\n  /**\r\n   * Multiply the two matrices (a * b).\r\n   * \r\n   * @static\r\n   * @param {any} a A matrix to be multiplied.\r\n   * @param {any} b A matrix to be multiplied.\r\n   * @returns {Matrix4f} A matrix.\r\n   */\r\n  static multiply(a, b) {\r\n    // First, store the values in local variables.\r\n    // See:\r\n    // http://blog.tojicode.com/2010/06/stupidly-fast-webgl-matricies.html\r\n\r\n    let a00 = a.entries[0],\r\n      a01 = a.entries[4],\r\n      a02 = a.entries[8],\r\n      a03 = a.entries[12];\r\n    let a10 = a.entries[1],\r\n      a11 = a.entries[5],\r\n      a12 = a.entries[9],\r\n      a13 = a.entries[13];\r\n    let a20 = a.entries[2],\r\n      a21 = a.entries[6],\r\n      a22 = a.entries[10],\r\n      a23 = a.entries[14];\r\n    let a30 = a.entries[3],\r\n      a31 = a.entries[7],\r\n      a32 = a.entries[11],\r\n      a33 = a.entries[15];\r\n\r\n    let b00 = b.entries[0],\r\n      b01 = b.entries[4],\r\n      b02 = b.entries[8],\r\n      b03 = b.entries[12];\r\n    let b10 = b.entries[1],\r\n      b11 = b.entries[5],\r\n      b12 = b.entries[9],\r\n      b13 = b.entries[13];\r\n    let b20 = b.entries[2],\r\n      b21 = b.entries[6],\r\n      b22 = b.entries[10],\r\n      b23 = b.entries[14];\r\n    let b30 = b.entries[3],\r\n      b31 = b.entries[7],\r\n      b32 = b.entries[11],\r\n      b33 = b.entries[15];\r\n\r\n    return new Matrix4f(new Float32Array([\r\n      a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30,\r\n      a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30,\r\n      a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30,\r\n      a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30,\r\n      a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31,\r\n      a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31,\r\n      a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31,\r\n      a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31,\r\n      a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32,\r\n      a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32,\r\n      a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32,\r\n      a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32,\r\n      a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33,\r\n      a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33,\r\n      a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33,\r\n      a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33\r\n    ]));\r\n  }\r\n\r\n  /**\r\n   * Initialize a matrix from a quaternion.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Matrix4f} A matrix.\r\n   */\r\n  static fromQuaternion(q) {\r\n    // First, store the values in local variables.\r\n    // See:\r\n    // http://blog.tojicode.com/2010/06/stupidly-fast-webgl-matricies.html\r\n    // https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\r\n    let x = q.components[0],\r\n      y = q.components[1],\r\n      z = q.components[2],\r\n      w = q.components[3];\r\n    let x2 = x + x,\r\n      y2 = y + y,\r\n      z2 = z + z;\r\n    let xx = x * x2,\r\n      xy = x * y2,\r\n      xz = x * z2;\r\n    let yy = y * y2,\r\n      yz = y * z2,\r\n      zz = z * z2;\r\n    let wx = w * x2,\r\n      wy = w * y2,\r\n      wz = w * z2;\r\n\r\n    return new Matrix4f(new Float32Array([\r\n      1 - (yy + zz), xy + wz, xz - wy, 0,\r\n      xy - wz, 1 - (xx + zz), yz + wx, 0,\r\n      xz + wy, yz - wx, 1 - (xx + yy), 0,\r\n      0, 0, 0, 1\r\n    ]));\r\n  }\r\n\r\n  /**\r\n   * Create a lookat matrix for a camera.\r\n   * \r\n   * @static\r\n   * @param {Vector3f} cameraPosition The position of the camera.\r\n   * @param {Vector3f} target The lookat (target) of the camera.\r\n   * @param {Vector3f} up The up vector of the camera node.\r\n   * @returns {Matrix4f} A matrix.\r\n   */\r\n  static lookAt(cameraPosition, target, up) {\r\n    // See here in order to return a quaternion directly:\r\n    // http://www.euclideanspace.com/maths/algebra/vectors/lookat/\r\n    let z = Vector3f.subtract(cameraPosition, target).normalize();\r\n\r\n    if (z.lengthSq() === 0.0) {\r\n      z.components[2] = 1.0\r\n    }\r\n\r\n    let x = Vector3f.cross(up, z).normalize();\r\n\r\n    if (x.lengthSq() === 0.0) {\r\n      z.components[2] += 0.0001;\r\n      x = Vector3f.cross(up, z).normalize();\r\n    }\r\n\r\n    let y = Vector3f.cross(z, x);\r\n\r\n    return new Matrix4f(new Float32Array([\r\n      x.components[0], x.components[1], x.components[2], 0,\r\n      y.components[0], y.components[1], y.components[2], 0,\r\n      z.components[0], z.components[1], z.components[2], 0,\r\n      0, 0, 0, 1\r\n    ]));\r\n  }\r\n\r\n  /**\r\n   * Composes a matrix from the positional, rotational and scaling components.\r\n   * \r\n   * @param {Vector3f} position The positional component.\r\n   * @param {Quaternion} quaternion The rotational component.\r\n   * @param {Vector3f} scale The scaling component.\r\n   * @returns {Matrix4f} A matrix.\r\n   */\r\n  static compose(position, quaternion, scale) {\r\n    let m = new Matrix4f();\r\n\r\n    m.setRotation(quaternion);\r\n    m.scale(scale);\r\n    m.setPosition(position);\r\n\r\n    return m;\r\n  }\r\n\r\n  /**\r\n   * Inverts a matrix.\r\n   * \r\n   * @static\r\n   * @param {Matrix4f} matrix A matrix to be inverted.\r\n   * @returns The inverted matrix.\r\n   */\r\n  static invert(matrix) {\r\n    // Fugly implementation lifted from MESA (originally in C++)\r\n    let im = new Matrix4f();\r\n\r\n    let m = matrix.entries;\r\n\r\n    im.entries[0] = m[5] * m[10] * m[15] -\r\n      m[5] * m[11] * m[14] -\r\n      m[9] * m[6] * m[15] +\r\n      m[9] * m[7] * m[14] +\r\n      m[13] * m[6] * m[11] -\r\n      m[13] * m[7] * m[10];\r\n\r\n    im.entries[4] = -m[4] * m[10] * m[15] +\r\n      m[4] * m[11] * m[14] +\r\n      m[8] * m[6] * m[15] -\r\n      m[8] * m[7] * m[14] -\r\n      m[12] * m[6] * m[11] +\r\n      m[12] * m[7] * m[10];\r\n\r\n    im.entries[8] = m[4] * m[9] * m[15] -\r\n      m[4] * m[11] * m[13] -\r\n      m[8] * m[5] * m[15] +\r\n      m[8] * m[7] * m[13] +\r\n      m[12] * m[5] * m[11] -\r\n      m[12] * m[7] * m[9];\r\n\r\n    im.entries[12] = -m[4] * m[9] * m[14] +\r\n      m[4] * m[10] * m[13] +\r\n      m[8] * m[5] * m[14] -\r\n      m[8] * m[6] * m[13] -\r\n      m[12] * m[5] * m[10] +\r\n      m[12] * m[6] * m[9];\r\n\r\n    im.entries[1] = -m[1] * m[10] * m[15] +\r\n      m[1] * m[11] * m[14] +\r\n      m[9] * m[2] * m[15] -\r\n      m[9] * m[3] * m[14] -\r\n      m[13] * m[2] * m[11] +\r\n      m[13] * m[3] * m[10];\r\n\r\n    im.entries[5] = m[0] * m[10] * m[15] -\r\n      m[0] * m[11] * m[14] -\r\n      m[8] * m[2] * m[15] +\r\n      m[8] * m[3] * m[14] +\r\n      m[12] * m[2] * m[11] -\r\n      m[12] * m[3] * m[10];\r\n\r\n    im.entries[9] = -m[0] * m[9] * m[15] +\r\n      m[0] * m[11] * m[13] +\r\n      m[8] * m[1] * m[15] -\r\n      m[8] * m[3] * m[13] -\r\n      m[12] * m[1] * m[11] +\r\n      m[12] * m[3] * m[9];\r\n\r\n    im.entries[13] = m[0] * m[9] * m[14] -\r\n      m[0] * m[10] * m[13] -\r\n      m[8] * m[1] * m[14] +\r\n      m[8] * m[2] * m[13] +\r\n      m[12] * m[1] * m[10] -\r\n      m[12] * m[2] * m[9];\r\n\r\n    im.entries[2] = m[1] * m[6] * m[15] -\r\n      m[1] * m[7] * m[14] -\r\n      m[5] * m[2] * m[15] +\r\n      m[5] * m[3] * m[14] +\r\n      m[13] * m[2] * m[7] -\r\n      m[13] * m[3] * m[6];\r\n\r\n    im.entries[6] = -m[0] * m[6] * m[15] +\r\n      m[0] * m[7] * m[14] +\r\n      m[4] * m[2] * m[15] -\r\n      m[4] * m[3] * m[14] -\r\n      m[12] * m[2] * m[7] +\r\n      m[12] * m[3] * m[6];\r\n\r\n    im.entries[10] = m[0] * m[5] * m[15] -\r\n      m[0] * m[7] * m[13] -\r\n      m[4] * m[1] * m[15] +\r\n      m[4] * m[3] * m[13] +\r\n      m[12] * m[1] * m[7] -\r\n      m[12] * m[3] * m[5];\r\n\r\n    im.entries[14] = -m[0] * m[5] * m[14] +\r\n      m[0] * m[6] * m[13] +\r\n      m[4] * m[1] * m[14] -\r\n      m[4] * m[2] * m[13] -\r\n      m[12] * m[1] * m[6] +\r\n      m[12] * m[2] * m[5];\r\n\r\n    im.entries[3] = -m[1] * m[6] * m[11] +\r\n      m[1] * m[7] * m[10] +\r\n      m[5] * m[2] * m[11] -\r\n      m[5] * m[3] * m[10] -\r\n      m[9] * m[2] * m[7] +\r\n      m[9] * m[3] * m[6];\r\n\r\n    im.entries[7] = m[0] * m[6] * m[11] -\r\n      m[0] * m[7] * m[10] -\r\n      m[4] * m[2] * m[11] +\r\n      m[4] * m[3] * m[10] +\r\n      m[8] * m[2] * m[7] -\r\n      m[8] * m[3] * m[6];\r\n\r\n    im.entries[11] = -m[0] * m[5] * m[11] +\r\n      m[0] * m[7] * m[9] +\r\n      m[4] * m[1] * m[11] -\r\n      m[4] * m[3] * m[9] -\r\n      m[8] * m[1] * m[7] +\r\n      m[8] * m[3] * m[5];\r\n\r\n    im.entries[15] = m[0] * m[5] * m[10] -\r\n      m[0] * m[6] * m[9] -\r\n      m[4] * m[1] * m[10] +\r\n      m[4] * m[2] * m[9] +\r\n      m[8] * m[1] * m[6] -\r\n      m[8] * m[2] * m[5];\r\n\r\n    let det = m[0] * im.entries[0] +\r\n      m[1] * im.entries[4] +\r\n      m[2] * im.entries[8] +\r\n      m[3] * im.entries[12];\r\n\r\n    if (det == 0) {\r\n      throw 'Determinant is zero.';\r\n    }\r\n\r\n    det = 1.0 / det;\r\n\r\n    for (let i = 0; i < 16; i++) {\r\n      im.entries[i] = im.entries[i] * det;\r\n    }\r\n\r\n    return im;\r\n  }\r\n}\r\n\r\nmodule.exports = Matrix4f","//@ts-check\r\n\r\nconst Matrix4f = require('./Matrix4f');\r\nconst Utils = require('../Utils/Utils');\r\n\r\n/** A class representing a projection matrix */\r\nclass ProjectionMatrix extends Matrix4f {\r\n    /**\r\n     * Set the projection matrix to an orthographic projection.\r\n     *\r\n     * @param {number} left The left edge.\r\n     * @param {number} right The right edge.\r\n     * @param {number} top The top edge.\r\n     * @param {number} bottom The bottom edge.\r\n     * @param {number} near The near-cutoff value.\r\n     * @param {number} far The far-cutoff value.\r\n     * @returns {ProjectionMatrix} Returns this projection matrix.\r\n     */\r\n    setOrthographic(left, right, top, bottom, near, far) {\r\n        let w = 1.0 / (right - left);\r\n        let h = 1.0 / (top - bottom);\r\n        let d = 1.0 / (far - near);\r\n\r\n        let x = (right + left) * w;\r\n        let y = (top + bottom) * h;\r\n        let z = (far + near) * d;\r\n\r\n        this.setZero();\r\n\r\n        this.entries[0] = 2 * w;\r\n        this.entries[4] = 0;\r\n        this.entries[8] = 0;\r\n        this.entries[12] = -x;\r\n        this.entries[1] = 0;\r\n        this.entries[5] = 2 * h;\r\n        this.entries[9] = 0;\r\n        this.entries[13] = -y;\r\n        this.entries[2] = 0;\r\n        this.entries[6] = 0;\r\n        this.entries[10] = -2 * d;\r\n        this.entries[14] = -z;\r\n        this.entries[3] = 0;\r\n        this.entries[7] = 0;\r\n        this.entries[11] = 0;\r\n        this.entries[15] = 1;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the projection matrix to a perspective projection.\r\n     *\r\n     * @param {number} fov The field of view.\r\n     * @param {number} aspect The aspect ratio (width / height).\r\n     * @param {number} near The near-cutoff value.\r\n     * @param {number} far The far-cutoff value.\r\n     * @returns {ProjectionMatrix} Returns this projection matrix.\r\n     */\r\n    setPerspective(fov, aspect, near, far) {\r\n        let range = near - far;\r\n        let tanHalfFov = Math.tan(Utils.DEG2RAD * 0.5 * fov);\r\n        \r\n        let top = near * tanHalfFov;\r\n        let height = 2.0 * top;\r\n        let width = aspect * height;\r\n        let left = -width / 2.0;\r\n        let right = left + width;\r\n        let bottom = top - height;\r\n        // let bottom = -top;\r\n        // let right = top * aspect;\r\n        // let left = -right;\r\n\r\n        let x = 2.0 * near / (right - left);\r\n        let y = 2.0 * near / (top - bottom);\r\n\r\n        let a = (right + left) / (right - left);\r\n        let b = (top + bottom) / (top - bottom);\r\n        let c = -(far + near) / (far - near);\r\n        let d = -2 * far * near / (far - near);\r\n        \r\n        this.setZero();\r\n\r\n        this.entries[0] = x;\r\n        this.entries[4] = 0;\r\n        this.entries[8] = a;\r\n        this.entries[12] = 0;\r\n        this.entries[1] = 0;\r\n        this.entries[5] = y;\r\n        this.entries[9] = b;\r\n        this.entries[13] = 0;\r\n        this.entries[2] = 0;\r\n        this.entries[6] = 0;\r\n        this.entries[10] = c;\r\n        this.entries[14] = d;\r\n        this.entries[3] = 0;\r\n        this.entries[7] = 0;\r\n        this.entries[11] = -1;\r\n        this.entries[15] = 0;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = ProjectionMatrix","//@ts-check\r\n\r\nconst Vector3f = require('./Vector3f');\r\nconst Matrix4f = require('./Matrix4f');\r\n\r\n/** \r\n * A class representing a quaternion.\r\n * \r\n * @property {Float32Array} components A typed array storing the components of this quaternion.\r\n */\r\nclass Quaternion {\r\n  /**\r\n   * Creates an instance of Quaternion.\r\n   * @param {Number} x The x component of the quaternion.\r\n   * @param {Number} y The y component of the quaternion.\r\n   * @param {Number} z The z component of the quaternion.\r\n   * @param {Number} w The w component of the quaternion.\r\n   */\r\n  constructor(x, y, z, w) {\r\n    if (arguments.length === 1) {\r\n      this.components = new Float32Array(x);\r\n    } else if (arguments.length === 2) {\r\n      this.components = new Float32Array(4);\r\n      this.setFromAxisAngle(x, y);\r\n    } else {\r\n      this.components = new Float32Array(4);\r\n      this.components[0] = x || 0.0;\r\n      this.components[1] = y || 0.0;\r\n      this.components[2] = z || 0.0;\r\n      this.components[3] = (w !== undefined) ? w : 1.0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the x component of this quaternion.\r\n   * \r\n   * @returns {Number} The x component of this quaternion.\r\n   */\r\n  getX() {\r\n    return this.components[0];\r\n  }\r\n\r\n  /**\r\n   * Get the y component of this quaternion.\r\n   * \r\n   * @returns {Number} The y component of this quaternion.\r\n   */\r\n  getY() {\r\n    return this.components[1];\r\n  }\r\n\r\n  /**\r\n   * Get the z component of this quaternion.\r\n   * \r\n   * @returns {Number} The z component of this quaternion.\r\n   */\r\n  getZ() {\r\n    return this.components[2];\r\n  }\r\n\r\n  /**\r\n   * Get the w component of this quaternion.\r\n   * \r\n   * @returns {Number} The w component of this quaternion.\r\n   */\r\n  getW() {\r\n    return this.components[3];\r\n  }\r\n\r\n  /**\r\n   * Set the components of this quaternion.\r\n   * \r\n   * @param {Number} x The x component of this quaternion.\r\n   * @param {Number} y The y component of this quaternion.\r\n   * @param {Number} z The z component of this quaternion.\r\n   * @param {Number} w The w component of this quaternion.\r\n   * \r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  set(x, y, z, w) {\r\n    this.components[0] = x;\r\n    this.components[1] = y;\r\n    this.components[2] = z;\r\n    this.components[3] = w;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the x component of this quaternion.\r\n   * \r\n   * @param {Number} x The x component of this quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setX(x) {\r\n    this.components[0] = x;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the y component of this quaternion.\r\n   * \r\n   * @param {Number} y The y component of this quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setY(y) {\r\n    this.components[1] = y;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the z component of this quaternion.\r\n   * \r\n   * @param {Number} z The z component of this quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setZ(z) {\r\n    this.components[2] = z;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the w component of this quaternion.\r\n   * \r\n   * @param {Number} w The w component of this quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setW(w) {\r\n    this.components[3] = w;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the quaternion from the axis angle representation.\r\n   * \r\n   * @param {Vector3f} axis The axis component.\r\n   * @param {Number} angle The angle component.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setFromAxisAngle(axis, angle) {\r\n    // See:\r\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n    // Normalize the axis. The resulting quaternion will be normalized as well\r\n    let normAxis = Vector3f.normalize(axis);\r\n    let halfAngle = angle / 2.0;\r\n    let sinHalfAngle = Math.sin(halfAngle);\r\n\r\n    this.components[0] = normAxis.components[0] * sinHalfAngle;\r\n    this.components[1] = normAxis.components[1] * sinHalfAngle;\r\n    this.components[2] = normAxis.components[2] * sinHalfAngle;\r\n    this.components[3] = Math.cos(halfAngle);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the quaternion from unit vectors.\r\n   * \r\n   * @param {Vector3f} from The from vector.\r\n   * @param {Vector3f} to The to vector.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setFromUnitVectors(from, to) {\r\n    let v = null;\r\n    let r = from.dot(to) + 1;\r\n\r\n    if (r < 0.000001) {\r\n      v = new Vector3f(0.0, 0.0, 0.0);\r\n      r = 0;\r\n      if (Math.abs(from.components[0]) > Math.abs(from.components[2]))\r\n        v.set(-from.components[1], from.components[0], 0);\r\n      else\r\n        v.set(0, -from.components[2], from.components[1]);\r\n    } else {\r\n      v = Vector3f.cross(from, to);\r\n    }\r\n\r\n    this.set(v.components[0], v.components[1], v.components[2], r);\r\n    this.normalize();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the quaternion based facing in a destionation direction.\r\n   * \r\n   * @param {Vector3f} source The source vector (the position).\r\n   * @param {Vector3f} dest The destination vector.\r\n   * @param {Vector3f} up The up vector of the source.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  lookAt(source, dest, up) {\r\n    this.setFromMatrix(Matrix4f.lookAt(source, dest, up));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the square length of the quaternion.\r\n   * \r\n   * @returns {Number} The square of the length.\r\n   */\r\n  lengthSq() {\r\n    return this.components[0] * this.components[0] +\r\n      this.components[1] * this.components[1] +\r\n      this.components[2] * this.components[2] +\r\n      this.components[3] * this.components[3];\r\n  }\r\n\r\n  /**\r\n   * Get the length of this quaternion.\r\n   * \r\n   * @returns {Number} The length.\r\n   */\r\n  length() {\r\n    return Math.sqrt(this.lengthSq());\r\n  }\r\n\r\n  /**\r\n   * Get the inverse of this quaternion.\r\n   * \r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  inverse() {\r\n    return this.conjugate().normalize();\r\n  }\r\n\r\n  /**\r\n   * Normalizes this quaternion.\r\n   * \r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  normalize() {\r\n    let length = this.length();\r\n\r\n    if (length === 0) {\r\n      this.components[0] = 0.0;\r\n      this.components[1] = 0.0;\r\n      this.components[2] = 0.0;\r\n      this.components[3] = 1.0;\r\n    } else {\r\n      let inv = 1 / length;\r\n      this.components[0] *= inv;\r\n      this.components[1] *= inv;\r\n      this.components[2] *= inv;\r\n      this.components[3] *= inv;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the dot product of this and another quaternion.\r\n   * \r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Number} The dot product.\r\n   */\r\n  dot(q) {\r\n    return this.components[0] * q.components[0] +\r\n      this.components[1] * q.components[1] +\r\n      this.components[2] * q.components[2] +\r\n      this.components[3] * q.components[3];\r\n  }\r\n\r\n  /**\r\n   * Multiply this quaternion with another (a * b).\r\n   * \r\n   * @param {Quaternion} b Another quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  multiplyA(b) {\r\n    // See:\r\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n    let x = this.components[0] * b.components[3] + this.components[3] * b.components[0] + this.components[1] * b.components[2] - this.components[2] * b.components[1];\r\n    let y = this.components[1] * b.components[3] + this.components[3] * b.components[1] + this.components[2] * b.components[0] - this.components[0] * b.components[2];\r\n    let z = this.components[2] * b.components[3] + this.components[3] * b.components[2] + this.components[0] * b.components[1] - this.components[1] * b.components[0];\r\n    let w = this.components[3] * b.components[3] - this.components[0] * b.components[0] - this.components[1] * b.components[1] - this.components[2] * b.components[2];\r\n\r\n    this.components[0] = x;\r\n    this.components[1] = y;\r\n    this.components[2] = z;\r\n    this.components[3] = w;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiply another with this quaternion (a * b).\r\n   * \r\n   * @param {Quaternion} a Another quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  multiplyB(a) {\r\n    // See:\r\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n    let x = a.components[0] * this.components[3] + a.components[3] * this.components[0] + a.components[1] * this.components[2] - a.components[2] * this.components[1];\r\n    let y = a.components[1] * this.components[3] + a.components[3] * this.components[1] + a.components[2] * this.components[0] - a.components[0] * this.components[2];\r\n    let z = a.components[2] * this.components[3] + a.components[3] * this.components[2] + a.components[0] * this.components[1] - a.components[1] * this.components[0];\r\n    let w = a.components[3] * this.components[3] - a.components[0] * this.components[0] - a.components[1] * this.components[1] - a.components[2] * this.components[2];\r\n\r\n    this.components[0] = x;\r\n    this.components[1] = y;\r\n    this.components[2] = z;\r\n    this.components[3] = w;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiply this quaternion with a scalar.\r\n   * \r\n   * @param {Number} s A scalar.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  multiplyScalar(s) {\r\n    this.components[0] *= s;\r\n    this.components[1] *= s;\r\n    this.components[2] *= s;\r\n    this.components[3] *= s;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Conjugate (* -1) this quaternion.\r\n   * \r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  conjugate() {\r\n    // See:\r\n    // http://www.3dgep.com/understanding-quaternions/#Quaternion_Conjugate\r\n    this.components[0] *= -1;\r\n    this.components[1] *= -1;\r\n    this.components[2] *= -1;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add another quaternion to this one.\r\n   * \r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  add(q) {\r\n    this.components[0] += q.components[0];\r\n    this.components[1] += q.components[1];\r\n    this.components[2] += q.components[2];\r\n    this.components[3] += q.components[3];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subtract another quaternion from this one.\r\n   * \r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  subtract(q) {\r\n    this.components[0] -= q.components[0];\r\n    this.components[1] -= q.components[1];\r\n    this.components[2] -= q.components[2];\r\n    this.components[3] -= q.components[3];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Rotate this quaternion around the x axis.\r\n   * \r\n   * @param {Number} angle An angle in radians.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  rotateX(angle) {\r\n    let halfAngle = angle / 2.0;\r\n    return this.multiplyA(\r\n      new Quaternion(Math.sin(halfAngle), 0.0, 0.0, Math.cos(halfAngle))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Rotate this quaternion around the y axis.\r\n   * \r\n   * @param {Number} angle An angle in radians.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  rotateY(angle) {\r\n    let halfAngle = angle / 2.0;\r\n    return this.multiplyA(\r\n      new Quaternion(0.0, Math.sin(halfAngle), 0.0, Math.cos(halfAngle))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Rotate this quaternion around the y axis.\r\n   * \r\n   * @param {Number} angle An angle in radians.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  rotateZ(angle) {\r\n    let halfAngle = angle / 2.0;\r\n    return this.multiplyA(\r\n      new Quaternion(0.0, 0.0, Math.sin(halfAngle), Math.cos(halfAngle))\r\n    );\r\n  }\r\n\r\n  toAxisAngle() {\r\n    // It seems like this isn't numerically stable. This could be solved\r\n    // by some checks as described here:\r\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/\r\n    // or here:\r\n    // https://www.flipcode.com/documents/matrfaq.html#Q57\r\n    // However, this function currently isn't used.\r\n    console.warn('The method toAxisAngle() has not been implemented.')\r\n  }\r\n\r\n  /**\r\n   * Create a rotation matrix from this quaternion.\r\n   * \r\n   * @returns {Matrix4f} A rotation matrix representation of this quaternion.\r\n   */\r\n  toRotationMatrix() {\r\n    let i = this.components[0];\r\n    let j = this.components[1];\r\n    let k = this.components[2];\r\n    let r = this.components[3];\r\n\r\n    let ii = i * i;\r\n    let ij = i * j;\r\n    let ik = i * k;\r\n    let ir = i * r;\r\n\r\n    let jr = j * r;\r\n    let jj = j * j;\r\n    let jk = j * k;\r\n\r\n    let kk = k * k;\r\n    let kr = k * r;\r\n\r\n    let mat = new Matrix4f();\r\n\r\n    mat.entries[0] = 1 - 2 * (jj + kk);\r\n    mat.entries[1] = 2 * (ij + kr);\r\n    mat.entries[2] = 2 * (ik - jr);\r\n    mat.entries[4] = 2 * (jk - kr);\r\n    mat.entries[5] = 1 - 2 * (ii + kk);\r\n    mat.entries[6] = 2 * (jk + ir);\r\n    mat.entries[8] = 2 * (ik + jr);\r\n    mat.entries[9] = 2 * (jk - ir);\r\n    mat.entries[10] = 1 - 2 * (ii + jj);\r\n\r\n    return mat;\r\n  }\r\n\r\n  /**\r\n   * Set this quaternion from a (rotation) matrix.\r\n   * \r\n   * @param {Matrix4f} m \r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setFromMatrix(m) {\r\n    // As in three.js, this is an implementation straight from:\r\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n    // Get the rotation matrix (if m is a Matrix4f)\r\n    let m00 = m.entries[0],\r\n      m01 = m.entries[4],\r\n      m02 = m.entries[8];\r\n    let m10 = m.entries[1],\r\n      m11 = m.entries[5],\r\n      m12 = m.entries[9];\r\n    let m20 = m.entries[2],\r\n      m21 = m.entries[6],\r\n      m22 = m.entries[10];\r\n\r\n    let t = m00 + m11 + m22;\r\n\r\n    if (t > 0) {\r\n      let s = 0.5 / Math.sqrt(t + 1.0);\r\n      this.components[0] = (m21 - m12) * s;\r\n      this.components[1] = (m02 - m20) * s;\r\n      this.components[2] = (m10 - m01) * s;\r\n      this.components[3] = 0.25 / s;\r\n    } else if (m00 > m11 && m00 > m22) {\r\n      let s = 2.0 * Math.sqrt(1.0 + m00 - m11 - m22);\r\n      this.components[0] = 0.25 * s;\r\n      this.components[1] = (m01 + m10) / s;\r\n      this.components[2] = (m02 + m20) / s;\r\n      this.components[3] = (m21 - m12) / s;\r\n    } else if (m11 > m22) {\r\n      let s = 2.0 * Math.sqrt(1.0 + m11 - m00 - m22);\r\n      this.components[0] = (m01 + m10) / s;\r\n      this.components[1] = 0.25 * s;\r\n      this.components[2] = (m12 + m21) / s;\r\n      this.components[3] = (m02 - m20) / s;\r\n    } else {\r\n      let s = 2.0 * Math.sqrt(1.0 + m22 - m00 - m11);\r\n      this.components[0] = (m02 + m20) / s;\r\n      this.components[1] = (m12 + m21) / s;\r\n      this.components[2] = 0.25 * s;\r\n      this.components[3] = (m10 - m01) / s;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Clone this quaternion.\r\n   * \r\n   * @returns {Quaternion} A clone of this quaternion.\r\n   */\r\n  clone() {\r\n    return new Quaternion(this.components[0], this.components[1],\r\n      this.components[2], this.components[3]);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the entries of this quaternion match another one.\r\n   * \r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Boolean} A boolean representing whether the entries of the two quaternions match.\r\n   */\r\n  equals(q) {\r\n    return this.components[0] === q.components[0] &&\r\n      this.components[1] === q.components[1] &&\r\n      this.components[2] === q.components[2] &&\r\n      this.components[3] === q.components[3];\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of this quaternion.\r\n   * \r\n   * @returns {String} A string representing this quaternion.\r\n   */\r\n  toString() {\r\n    return 'x: ' + this.getX() + ', y: ' + this.getY() + ', z: ' +\r\n      this.getZ() + ', w: ' + this.getW();\r\n  }\r\n\r\n  /**\r\n   * Calculate the dot product of two quaternions.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @param {Quaternion} p A quaternion.\r\n   * @returns {Number} The dot product.\r\n   */\r\n  static dot(q, p) {\r\n    return new Quaternion(q.components[0] * p.components[0] +\r\n      q.components[1] * p.components[1] +\r\n      q.components[2] * p.components[2] +\r\n      q.components[3] * p.components[3]);\r\n  }\r\n\r\n  /**\r\n   * Multiply (cross product) two quaternions.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} a A quaternion.\r\n   * @param {Quaternion} b A quaternion.\r\n   * @returns {Quaternion} The cross product quaternion.\r\n   */\r\n  static multiply(a, b) {\r\n    return new Quaternion(\r\n      a.components[0] * b.components[3] + a.components[3] * b.components[0] +\r\n      a.components[1] * b.components[2] - a.components[2] * b.components[1],\r\n      a.components[1] * b.components[3] + a.components[3] * b.components[1] +\r\n      a.components[2] * b.components[0] - a.components[0] * b.components[2],\r\n      a.components[2] * b.components[3] + a.components[3] * b.components[2] +\r\n      a.components[0] * b.components[1] - a.components[1] * b.components[0],\r\n      a.components[3] * b.components[3] + a.components[0] * b.components[0] +\r\n      a.components[1] * b.components[1] - a.components[2] * b.components[2]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Multiplies a quaternion with a scalar.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @param {Number} s A scalar.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static multiplyScalar(q, s) {\r\n    return new Quaternion(q.components[0] * s, q.components[1] * s,\r\n      q.components[2] * s, q.components[3] * s);\r\n  }\r\n\r\n  /**\r\n   * Inverse a quaternion.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static inverse(q) {\r\n    let p = new Quaternion(q.components);\r\n    return p.conjugate().normalize();\r\n  }\r\n\r\n  /**\r\n   * Normalize a quaternion.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static normalize(q) {\r\n    let length = q.length();\r\n\r\n    if (length === 0) {\r\n      return new Quaternion(0.0, 0.0, 0.0, 1.0);\r\n    } else {\r\n      let inv = 1 / length;\r\n      return new Quaternion(q.components[0] * inv, q.components[1] * inv,\r\n        q.components[2] * inv, q.components[3] * inv);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Conjugate (* -1) a quaternion.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static conjugate(q) {\r\n    return new Quaternion(q.components[0] * -1, q.components[1] * -1,\r\n      q.components[2] * -1, q.components[3]);\r\n  }\r\n\r\n  /**\r\n   * Sum two quaternions.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @param {Quaternion} p A quaternion.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static add(q, p) {\r\n    return new Quaternion(q.components[0] + p.components[0],\r\n      q.components[1] + p.components[1],\r\n      q.components[2] + p.components[2],\r\n      q.components[3] + p.components[3]);\r\n  }\r\n\r\n  /**\r\n   * Subtract a quaternion from another (q - p).\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @param {Quaternion} p A quaternion.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static subtract(q, p) {\r\n    return new Quaternion(q.components[0] - p.components[0],\r\n      q.components[1] - p.components[1],\r\n      q.components[2] - p.components[2],\r\n      q.components[3] - p.components[3]);\r\n  }\r\n\r\n  /**\r\n   * Create a quaternion from a matrix.\r\n   * \r\n   * @static\r\n   * @param {Matrix4f} m A matrix.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static fromMatrix(m) {\r\n    let q = new Quaternion();\r\n    q.setFromMatrix(m);\r\n    return q;\r\n  }\r\n\r\n  /**\r\n   * Interpolate between two quaternions (t is between 0 and 1).\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q The source quaternion.\r\n   * @param {Quaternion} p The target quaternion.\r\n   * @param {Number} t The interpolation value / percentage (between 0 an 1).\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static slerp(q, p, t) {\r\n    // See:\r\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n    if (t === 0) return new Quaternion(q.components);\r\n    if (t === 1) return new Quaternion(p.components);\r\n\r\n    let tmp = new Quaternion(p.components);\r\n\r\n    // The angle between quaternions\r\n    let cosHalfTheta = q.components[0] * tmp.components[0] +\r\n      q.components[1] * tmp.components[1] +\r\n      q.components[2] * tmp.components[2] +\r\n      q.components[3] * tmp.components[3];\r\n\r\n    if (cosHalfTheta < 0) {\r\n      tmp.multiplyScalar(-1);\r\n      cosHalfTheta = -cosHalfTheta;\r\n    }\r\n\r\n    if (Math.abs(cosHalfTheta) >= 1.0) {\r\n      return new Quaternion(q.components);\r\n    }\r\n\r\n    let halfTheta = Math.acos(cosHalfTheta);\r\n    let sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\r\n\r\n    if (Math.abs(sinHalfTheta) < 0.001) {\r\n      return new Quaternion(q.components[0] * 0.5 + tmp.components[0] * 0.5,\r\n        q.components[1] * 0.5 + tmp.components[1] * 0.5,\r\n        q.components[2] * 0.5 + tmp.components[2] * 0.5,\r\n        q.components[3] * 0.5 + tmp.components[3] * 0.5);\r\n    }\r\n\r\n    let ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;\r\n    let ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\r\n\r\n    return new Quaternion(q.components[0] * ratioA + tmp.components[0] * ratioB,\r\n      q.components[1] * ratioA + tmp.components[1] * ratioB,\r\n      q.components[2] * ratioA + tmp.components[2] * ratioB,\r\n      q.components[3] * ratioA + tmp.components[3] * ratioB);\r\n  }\r\n}\r\n\r\nmodule.exports = Quaternion","//@ts-check\r\n\r\n/** A class wrapping a radix sort for floats. */\r\nclass RadixSort {\r\n    /**\r\n     * Creates an instance of RadixSort.\r\n     * \r\n     */\r\n    constructor() {\r\n        this.max = undefined;\r\n        this.mask = undefined;\r\n        this.histograms = undefined;\r\n        this.indices = undefined;\r\n        this.tmpIndices = undefined;\r\n    }\r\n\r\n    /**\r\n     * Sorts a 32-bit float array using radix sort.\r\n     * \r\n     * @param {Float32Array} arr The array to be sorted.\r\n     * @param {Boolean} [copyArray=false] A boolean indicating whether to perform the sorting directly on the array or copy it.\r\n     * @returns {Object} The result in the form { array: sortedArray, indices: sortedIndices }.\r\n     * \r\n     */\r\n    sort(arr, copyArray = false) {\r\n        let array = null;\r\n\r\n        if (copyArray) {\r\n            array = new arr.constructor(arr.length);\r\n            array.set(arr);\r\n        } else {\r\n            array = arr;\r\n        }\r\n\r\n        this.max = 1 << 11; // = 2^11 = 2048 = 0x00000800\r\n        this.mask = this.max - 1; // = 2047 = 0x000007FF\r\n        this.histograms = new Int32Array(this.max * Math.ceil(64 / 11));\r\n\r\n        let input = new Int32Array(array.buffer, array.byteOffset, array.byteLength >> 2);\r\n        let nPasses = Math.ceil(array.BYTES_PER_ELEMENT * 8 / 11);\r\n        let maxOffset = this.max * (nPasses - 1);\r\n        let msbMask = 1 << ((array.BYTES_PER_ELEMENT * 8 - 1) % 11);\r\n        let lastMask = (msbMask << 1) - 1;\r\n        let tmp = null;\r\n        let aux = new input.constructor(input.length);\r\n\r\n        // In order to keep track of the indices\r\n        this.indices = new Uint32Array(input.length);\r\n        this.tmpIndices = new Uint32Array(input.length);\r\n\r\n        let normIndices = new Uint32Array(input.length);\r\n        let n = this.max * nPasses;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            this.histograms[i] = 0;\r\n        }\r\n\r\n        // Create the histogram\r\n        this.initHistograms(input, maxOffset, lastMask);\r\n\r\n        // Create the offset table\r\n        for (let i = 0; i <= maxOffset; i += this.max) {\r\n            let sum = 0;\r\n\r\n            for (let j = i; j < i + this.max; j++) {\r\n                let tmpSum = this.histograms[j] + sum;\r\n\r\n                this.histograms[j] = sum - 1;\r\n                sum = tmpSum;\r\n            }\r\n        }\r\n\r\n        // Sort by least significant byte\r\n        this.lsbPass(input, aux);\r\n        tmp = aux;\r\n        aux = input;\r\n        input = tmp;\r\n\r\n        this.pass(input, aux);\r\n        tmp = aux;\r\n        aux = input;\r\n        input = tmp;\r\n\r\n        // Sort by most significant byte\r\n        this.msbPass(input, aux, msbMask);\r\n\r\n        // This part is not needed, why was it still in???\r\n\r\n        // \"Normalize\" the indices, since they are split up just like the floats\r\n        // so 0, 1 -> 0, 2, 3 -> 2, etc.\r\n        // use multiplications not divisions for the second index -> speeeeed\r\n        // Also, invert it\r\n        // for(let i = 0; i < normIndices.length; i++) {\r\n        // \tnormIndices[normIndices.length - i] = this.indices[i];\r\n        // }\r\n\r\n        return {\r\n            array: new Float32Array(aux.buffer, aux.byteOffset, array.length),\r\n            indices: this.indices // instead of normIndices\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The lsb (least significant bit) pass of the algorithm.\r\n     * \r\n     * @param {Float32Array} arr The array.\r\n     * @param {Float32Array} aux An auxilliary array.\r\n     * \r\n     */\r\n    lsbPass(arr, aux) {\r\n        for (let i = 0, n = arr.length; i < n; i++) {\r\n            let val = arr[i];\r\n            let sign = val >> 31;\r\n\r\n            val ^= sign | 0x80000000;\r\n\r\n            let x = ++this.histograms[val & this.mask];\r\n\r\n            this.indices[x] = i;\r\n            aux[x] = val;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The main pass of the algorithm.\r\n     * \r\n     * @param {Float32Array} arr The array.\r\n     * @param {Float32Array} aux An auxilliary array.\r\n     * \r\n     */\r\n    pass(arr, aux) {\r\n        let n = arr.length;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let val = arr[i];\r\n            let x = ++this.histograms[this.max + (val >>> 11 & this.mask)];\r\n\r\n            this.tmpIndices[x] = this.indices[i];\r\n            aux[x] = val;\r\n        }\r\n\r\n        this.indices.set(this.tmpIndices);\r\n    }\r\n\r\n    /**\r\n     * The msb (most significant bit) pass of the algorithm.\r\n     * \r\n     * @param {Float32Array} arr The array.\r\n     * @param {Float32Array} aux An auxilliary array.\r\n     * \r\n     */\r\n    msbPass(arr, aux, msbMask) {\r\n        let lastMask = (msbMask << 1) - 1;\r\n        let n = arr.length;\r\n        let offset = 2 * this.max;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let val = arr[i];\r\n            let sign = val >> 31;\r\n            let x = ++this.histograms[offset + (val >>> 22 & lastMask)];\r\n\r\n            this.tmpIndices[x] = this.indices[i];\r\n            aux[x] = val ^ (~sign | 0x80000000);\r\n        }\r\n\r\n        this.indices.set(this.tmpIndices);\r\n    }\r\n    \r\n    /**\r\n     * Initialize the histogram used by the algorithm.\r\n     * \r\n     * @param {Float32Array} arr The array to be sorted.\r\n     * @param {Number} maxOffset The maximum offset.\r\n     * @param {Number} lastMask The last max, based on the msb (most significant bit) mask.\r\n     * \r\n     */\r\n    initHistograms(arr, maxOffset, lastMask) {\r\n        let n = arr.length;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let val = arr[i];\r\n            let sign = val >> 31;\r\n\r\n            val ^= sign | 0x80000000;\r\n            \r\n            let j = 0;\r\n            let k = 0;\r\n\r\n            for (; j < maxOffset; j += this.max, k += 11) {\r\n                this.histograms[j + (val >>> k & this.mask)]++;\r\n            }\r\n\r\n            this.histograms[j + (val >>> k & lastMask)]++;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = RadixSort","//@ts-check\r\n\r\nconst Vector3f = require('./Vector3f');\r\nconst ProjectionMatrix = require('./ProjectionMatrix');\r\nconst Matrix4f = require('./Matrix4f');\r\n\r\n/** A class representing a ray */\r\nclass Ray {\r\n\r\n    /**\r\n     * Creates an instance of Ray.\r\n     * @param {Vector3f} [source = new Vector3f(0.0, 0.0, 0.0)] The source of the ray.\r\n     * @param {Vector3f} [direction = new Vector3f(0.0, 0.0, 0.0)] The direction of the ray.\r\n     */\r\n    constructor(source = new Vector3f(0.0, 0.0, 0.0), direction = new Vector3f(0.0, 0.0, 0.0)) {\r\n        this.source = source;\r\n        this.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Copy the values from another ray.\r\n     * \r\n     * @param {Ray} r A ray.\r\n     * @returns {Ray} Returns itself.\r\n     */\r\n    copyFrom(r) {\r\n        this.source.copyFrom(r.source);\r\n        this.direction.copyFrom(r.direction);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Apply a projection matrix to this ray.\r\n     * \r\n     * @param {Matrix4f|ProjectionMatrix} m A matrix / projection matrix.\r\n     * @returns {Ray} Returns itself.\r\n     */\r\n    applyProjection(m) {\r\n        this.direction.add(this.source).applyProjection(m);\r\n        this.source.applyProjection(m);\r\n        this.direction.subtract(this.source);\r\n        this.direction.normalize();\r\n\r\n        return this;\r\n    }\r\n\r\n    // See if the two following functions can be optimized\r\n    /**\r\n     * The square of the distance of a vector to this ray.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Number} The square pf the distance between the point and this ray.\r\n     */\r\n    distanceSqToPoint(v) {\r\n        let tmp = Vector3f.subtract(v, this.source);\r\n        let directionDistance = tmp.dot(this.direction);\r\n\r\n        if (directionDistance < 0) {\r\n            return this.source.distanceToSq(v);\r\n        }\r\n\r\n        tmp.copyFrom(this.direction).multiplyScalar(directionDistance).add(this.source);\r\n\r\n        return tmp.distanceToSq(v);\r\n    }\r\n\r\n    /**\r\n     * Find a point on the ray that is closest to a supplied vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} The cloest point on the ray to the supplied point.\r\n     */\r\n    closestPointToPoint(v) {\r\n        let result = Vector3f.subtract(v, this.source);\r\n        let directionDistance = result.dot(this.direction);\r\n\r\n        if (directionDistance < 0) {\r\n            return result.copyFrom(this.source);\r\n        }\r\n\r\n        return result.copyFrom(this.direction).multiplyScalar(directionDistance).add(this.source);\r\n    }\r\n}\r\n\r\nmodule.exports = Ray","//@ts-check\r\n\r\nconst Vector3f = require('./Vector3f')\r\n\r\n/** A class representing spherical coordinates. */\r\nclass SphericalCoords {\r\n    /**\r\n     * Creates an instance of SphericalCoords.\r\n     * @param {Number} [radius=1.0] The radius.\r\n     * @param {Number} [phi=0.0] Phi in radians.\r\n     * @param {Number} [theta=0.0] Theta in radians.\r\n     */\r\n    constructor(radius = 1.0, phi = 0.0, theta = 0.0) {\r\n        this.components = new Float32Array(3);\r\n        this.radius = radius;\r\n        this.phi = phi;\r\n        this.theta = theta;\r\n    }\r\n\r\n    /**\r\n     * Set the spherical coordinates from the radius, the phi angle and the theta angle.\r\n     * \r\n     * @param {Number} radius \r\n     * @param {Number} phi \r\n     * @param {Number} theta \r\n     * @returns {SphericalCoords} Returns itself.\r\n     */\r\n    set(radius, phi, theta) {\r\n        this.components[0] = radius;\r\n        this.components[1] = phi;\r\n        this.components[2] = theta;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Avoid overflows.\r\n     * \r\n     * @returns {SphericalCoords} Returns itself.\r\n     */\r\n    secure() {\r\n        this.components[1] = Math.max(0.000001, Math.min(Math.PI - 0.000001, this.components[1]));\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the spherical coordaintes from a vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {SphericalCoords} Returns itself.\r\n     */\r\n    setFromVector(v) {\r\n        this.components[0] = v.length();\r\n\r\n        if (this.components[0] === 0.0) {\r\n            this.components[1] = 0.0;\r\n            this.components[2] = 0.0;\r\n        } else {\r\n            this.components[1] = Math.acos(Math.max(-1.0, Math.min(1.0, v.components[1] /\r\n                this.components[0])));\r\n            this.components[2] = Math.atan2(v.components[0], v.components[2]);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Limit the rotation by setting maxima and minima for phi and theta.\r\n     * \r\n     * @param {Number} phiMin The minimum for phi.\r\n     * @param {Number} phiMax The maximum for phi.\r\n     * @param {Number} thetaMin The minimum for theta.\r\n     * @param {Number} thetaMax The maximum for theta.\r\n     * @returns {SphericalCoords} Returns itself.\r\n     */\r\n    limit(phiMin, phiMax, thetaMin, thetaMax) {\r\n        // Limits for orbital controls\r\n        this.components[1] = Math.max(phiMin, Math.min(phiMax, this.components[1]));\r\n        this.components[2] = Math.max(thetaMin, Math.min(thetaMax, this.components[2]));\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone this spherical coordinates object.\r\n     * \r\n     * @returns {SphericalCoords} A clone of the spherical coordinates object.\r\n     */\r\n    clone() {\r\n        return new SphericalCoords(this.radius, this.phi, this.theta);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of these spherical coordinates.\r\n     * \r\n     * @returns {String} A string representing spherical coordinates.\r\n     */\r\n    toString() {\r\n        return '(' + this.components[0] + ', ' +\r\n            this.components[1] + ', ' + this.components[2] + ')';\r\n    }\r\n}\r\n\r\nmodule.exports = SphericalCoords","//@ts-check\r\n\r\n/** A helper class containing statistics methods. */\r\nclass Statistics {\r\n    /**\r\n     * Transposes an array of arrays (2d array).\r\n     \r\n     * @param {Array} arr The 2d array to be transposed.\r\n     * @returns {Array} The transpose of the 2d array.\r\n     */\r\n    static transpose2dArray(arr) {\r\n      return arr[0].map((col, i) => arr.map(row => row[i]));\r\n    }\r\n\r\n    /**\r\n     * Returns a normally distributed (pseudo) random number.\r\n     * \r\n     * @returns {Number} A normally distributed (pseudo) random number.\r\n     */\r\n    static randomNormal() {\r\n        let val, u, v, s, mul;\r\n\r\n        if (Statistics.spareRandomNormal !== null) {\r\n            val = Statistics.spareRandomNormal;\r\n            Statistics.spareRandomNormal = null;\r\n        } else {\r\n            do {\r\n                u = Math.random() * 2 - 1;\r\n                v = Math.random() * 2 - 1;\r\n\r\n                s = u * u + v * v;\r\n            } while (s === 0 || s >= 1);\r\n\r\n            mul = Math.sqrt(-2 * Math.log(s) / s);\r\n            val = u * mul;\r\n            Statistics.spareRandomNormal = v * mul;\r\n        }\r\n\r\n        return val / 14;\r\n    }\r\n\r\n    /**\r\n     * Returns a normally distributed (pseudo) random number within a range.\r\n     * \r\n     * @param {Number} a The start of the range.\r\n     * @param {Number} b The end of the range.\r\n     * @returns {Number} A normally distributed (pseudo) random number within a range.\r\n     */\r\n    static randomNormalInRange(a, b) {\r\n        let val;\r\n\r\n        do {\r\n            val = Statistics.randomNormal();\r\n        } while (val < a || val > b);\r\n\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Returns a normally distributed (pseudo) random number around a mean with a standard deviation.\r\n     * \r\n     * @param {Number} mean The mean.\r\n     * @param {Number} sd The standard deviation.\r\n     * @returns {Number} A normally distributed (pseudo) random number around a mean with a standard deviation.\r\n     */\r\n    static randomNormalScaled(mean, sd) {\r\n        let r = Statistics.randomNormalInRange(-1, 1);\r\n        \r\n        return r * sd + mean;\r\n    }\r\n\r\n    /**\r\n     * Normalize / scale an array between 0 and 1.\r\n     * \r\n     * @param {Number[]} arr An array.\r\n     * @returns {Number[]} The normalized / scaled array.\r\n     */\r\n    static normalize(arr) {\r\n        let newArr = arr.slice();\r\n        let max = Number.NEGATIVE_INFINITY;\r\n        let min = Number.POSITIVE_INFINITY;\r\n\r\n        for (let i = 0; i < newArr.length; i++) {\r\n            let val = newArr[i];\r\n            if (val > max) max = val;\r\n            if (val < min) min = val;\r\n        }\r\n\r\n        let diff = max - min;\r\n\r\n        for (let i = 0; i < newArr.length; i++) {\r\n            newArr[i] = (newArr[i] - min) / diff;\r\n        }\r\n        \r\n        return newArr;\r\n    }\r\n\r\n    /**\r\n     * Normalize / scale an array between 0 and 1 (outliers will be set to max or min respectively).\r\n     * The IQR method is used for outlier detection.\r\n     * \r\n     * @param {Number[]} arr An array.\r\n     * @param {Number} q1 The q1 percentage.\r\n     * @param {Number} q3 The q3 percentage.\r\n     * @param {Number} k The IQR scaling factor.\r\n     * @returns {Number[]} The normalized / scaled array.\r\n     */\r\n    static normalizeNoOutliers(arr, q1 = 0.25, q3 = 0.75, k = 1.5) {\r\n        let newArr = arr.slice();\r\n\r\n        newArr.sort((a, b) => a - b);\r\n\r\n        let a = Statistics.getPercentile(newArr, q1);\r\n        let b = Statistics.getPercentile(newArr, q3);\r\n        let iqr = b - a;\r\n        let lower = a - (iqr * k);\r\n        let upper = b + (iqr * k);\r\n        \r\n        let diff = upper - lower;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i] < lower) {\r\n                newArr[i] = 0.0;\r\n            } else if (arr[i] > upper) {\r\n                newArr[i] = 1.0;\r\n            } else {\r\n                newArr[i] = (arr[i] - lower) / diff;\r\n            }\r\n        }\r\n        \r\n        return newArr;\r\n    }\r\n\r\n    /**\r\n     * Gets the percentile from a sorted array.\r\n     * \r\n     * @param {Number[]} arr A sorted array.\r\n     * @param {Number} percentile The percentile (e.g. 0.25).\r\n     * @returns {Number} The percentile value.\r\n     */\r\n    static getPercentile(arr, percentile) {\r\n        let index = percentile * arr.length;\r\n\r\n        if (Math.floor(index) === index) {\r\n            return (arr[index - 1] + arr[index]) / 2.0;\r\n        } else {\r\n            return arr[Math.floor(index)];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scales a number to within a given scale.\r\n     * \r\n     * @param {Number} value The number.\r\n     * @param {Number} oldMin The current minimum.\r\n     * @param {Number} oldMax The current maximum.\r\n     * @param {Number} newMin The cnew minimum.\r\n     * @param {Number} newMax The new maximum.\r\n     * @returns {Number} The scaled number.\r\n     */\r\n    static scale(value, oldMin, oldMax, newMin, newMax) {\r\n        return (newMax - newMin) * (value - oldMin) / (oldMax - oldMin) + newMin;\r\n    }\r\n}\r\n\r\nStatistics.spareRandomNormal = null;\r\n\r\nmodule.exports = Statistics\r\n","//@ts-check\r\n\r\nconst SphericalCoordinates = require('./SphericalCoords');\r\n\r\n/** \r\n * A class representing 3D float vector.\r\n * \r\n * @property {Float32Array} components A typed array storing the components of this vector.\r\n */\r\nclass Vector3f {\r\n    /**\r\n     * Creates an instance of Vector3f.\r\n     * @param {Number} x The x component of the vector.\r\n     * @param {Number} y The y component of the vector.\r\n     * @param {Number} z The z component of the vector.\r\n     */\r\n    constructor(x, y, z) {\r\n        if (arguments.length === 1) {\r\n            this.components = new Float32Array(x);\r\n        } else {\r\n            this.components = new Float32Array(3);\r\n            this.components[0] = x || 0.0;\r\n            this.components[1] = y || 0.0;\r\n            this.components[2] = z || 0.0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the x, y and z components of this vector.\r\n     * \r\n     * @param {Number} x The x component of the vector.\r\n     * @param {Number} y The y component of the vector.\r\n     * @param {Number} z The z component of the vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    set(x, y, z) {\r\n        this.components[0] = x;\r\n        this.components[1] = y;\r\n        this.components[2] = z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the x component of this vector.\r\n     * \r\n     * @returns {Number} The x component of this vector.\r\n     */\r\n    getX() {\r\n        return this.components[0];\r\n    }\r\n\r\n     /**\r\n     * Gets the y component of this vector.\r\n     * \r\n     * @returns {Number} The y component of this vector.\r\n     */\r\n    getY() {\r\n        return this.components[1];\r\n    }\r\n\r\n     /**\r\n     * Gets the z component of this vector.\r\n     * \r\n     * @returns {Number} The z component of this vector.\r\n     */\r\n    getZ() {\r\n        return this.components[2];\r\n    }\r\n\r\n    /**\r\n     * Sets the x component of this vector.\r\n     * \r\n     * @param {Number} x The value to which the x component of this vectors will be set.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    setX(x) {\r\n        this.components[0] = x;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the y component of this vector.\r\n     * \r\n     * @param {Number} y The value to which the y component of this vectors will be set.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    setY(y) {\r\n        this.components[1] = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the z component of this vector.\r\n     * \r\n     * @param {Number} z The value to which the z component of this vectors will be set.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    setZ(z) {\r\n        this.components[2] = z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets this vector from spherical coordinates.\r\n     * \r\n     * @param {SphericalCoordinates} s A spherical coordinates object.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    setFromSphericalCoords(s) {\r\n        var radius = s.components[0];\r\n        var phi = s.components[1];\r\n        var theta = s.components[2];\r\n\r\n        var t = Math.sin(phi) * radius;\r\n\r\n        this.components[0] = Math.sin(theta) * t;\r\n        this.components[1] = Math.cos(phi) * radius;\r\n        this.components[2] = Math.cos(theta) * t;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the values from another vector\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    copyFrom(v) {\r\n        this.components[0] = v.components[0];\r\n        this.components[1] = v.components[1];\r\n        this.components[2] = v.components[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the length / magnitude of the vector.\r\n     * \r\n     * @param {Number} length The length / magnitude to set the vector to.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    setLength(length) {\r\n        return this.multiplyScalar(length / this.length());\r\n    }\r\n\r\n    /**\r\n     * Get the square of the length / magnitude of the vector.\r\n     * \r\n     * @returns {Number} The square of length / magnitude of the vector.\r\n     */\r\n    lengthSq() {\r\n        return this.components[0] * this.components[0] +\r\n            this.components[1] * this.components[1] +\r\n            this.components[2] * this.components[2];\r\n    }\r\n\r\n    /**\r\n     * The length / magnitude of the vector.\r\n     * \r\n     * @returns {Number} The length / magnitude of the vector.\r\n     */\r\n    length() {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    /**\r\n     * Normalizes the vector.\r\n     * \r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    normalize() {\r\n        return this.divideScalar(this.length());\r\n    }\r\n\r\n    /**\r\n     * Multiply the vector with another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    multiply(v) {\r\n        this.components[0] *= v.components[0];\r\n        this.components[1] *= v.components[1];\r\n        this.components[2] *= v.components[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies this vector with a scalar.\r\n     * \r\n     * @param {Number} s A scalar.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    multiplyScalar(s) {\r\n        this.components[0] *= s;\r\n        this.components[1] *= s;\r\n        this.components[2] *= s;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the vector by another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    divide(v) {\r\n        this.components[0] /= v.components[0];\r\n        this.components[1] /= v.components[1];\r\n        this.components[2] /= v.components[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the vector by a scalar.\r\n     * \r\n     * @param {Number} s A scalar.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    divideScalar(s) {\r\n        this.components[0] /= s;\r\n        this.components[1] /= s;\r\n        this.components[2] /= s;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sums the vector with another.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    add(v) {\r\n        this.components[0] += v.components[0];\r\n        this.components[1] += v.components[1];\r\n        this.components[2] += v.components[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Substracts a vector from this one.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    subtract(v) {\r\n        this.components[0] -= v.components[0];\r\n        this.components[1] -= v.components[1];\r\n        this.components[2] -= v.components[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculates the dot product for the vector with another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Number} The dot product of the two vectors.\r\n     */\r\n    dot(v) {\r\n        return this.components[0] * v.components[0] +\r\n            this.components[1] * v.components[1] +\r\n            this.components[2] * v.components[2];\r\n    }\r\n\r\n    /**\r\n     * Calculates the cross product for the vector with another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} The cross product of the two vectors.\r\n     */\r\n    cross(v) {\r\n        return new Vector3f(\r\n            this.components[1] * v.components[2] - this.components[2] * v.components[1],\r\n            this.components[2] * v.components[0] - this.components[0] * v.components[2],\r\n            this.components[0] * v.components[1] - this.components[1] * v.components[0]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Applies a projection matrix to the vector.\r\n     * \r\n     * @param {Matrix4f} m A (projection) matrix.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    applyProjection(m) {\r\n        var x = this.components[0];\r\n        var y = this.components[1];\r\n        var z = this.components[2];\r\n\r\n        var e = m.entries;\r\n        var p = 1.0 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\r\n\r\n        this.components[0] = (e[0] * x + e[4] * y + e[8] * z + e[12]) * p;\r\n        this.components[1] = (e[1] * x + e[5] * y + e[9] * z + e[13]) * p;\r\n        this.components[2] = (e[2] * x + e[6] * y + e[10] * z + e[14]) * p;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates the vector into the direction defined by the rotational component of a matrix.\r\n     * \r\n     * @param {Matrix4f} m A matrix.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    toDirection(m) {\r\n        var x = this.components[0];\r\n        var y = this.components[1];\r\n        var z = this.components[2];\r\n\r\n        var e = m.entries;\r\n\r\n        this.components[0] = e[0] * x + e[4] * y + e[8] * z;\r\n        this.components[1] = e[1] * x + e[5] * y + e[9] * z;\r\n        this.components[2] = e[2] * x + e[6] * y + e[10] * z;\r\n\r\n        this.normalize();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies a quaternion to the vector (usually a rotation).\r\n     * \r\n     * @param {Quaternion} q Quaternion.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    applyQuaternion(q) {\r\n        var x = this.components[0];\r\n        var y = this.components[1];\r\n        var z = this.components[2];\r\n\r\n        var qx = q.components[0];\r\n        var qy = q.components[1];\r\n        var qz = q.components[2];\r\n        var qw = q.components[3];\r\n\r\n        var ix = qw * x + qy * z - qz * y;\r\n        var iy = qw * y + qz * x - qx * z;\r\n        var iz = qw * z + qx * y - qy * x;\r\n        var iw = -qx * x - qy * y - qz * z;\r\n\r\n        this.components[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        this.components[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        this.components[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculates the square of the distance to another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Number} The square of the distance to the other vector.\r\n     */\r\n    distanceToSq(v) {\r\n        var dx = this.components[0] - v.components[0];\r\n        var dy = this.components[1] - v.components[1];\r\n        var dz = this.components[2] - v.components[2];\r\n\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance to another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Number} The distance to the other vector.\r\n     */\r\n    distanceTo(v) {\r\n        return Math.sqrt(this.distanceToSq(v));\r\n    }\r\n\r\n    /**\r\n     * Clones this vector.\r\n     * \r\n     * @returns {Vector3f} A clone of this vector.\r\n     */\r\n    clone() {\r\n        return new Vector3f(this.components[0], this.components[1],\r\n            this.components[2]);\r\n    }\r\n\r\n    /**\r\n     * Compares the components of the vector to those of another.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Boolean} A vector indicating whether or not the two vectors are equal.\r\n     */\r\n    equals(v) {\r\n        return this.components[0] === v.components[0] &&\r\n            this.components[1] === v.components[1] &&\r\n            this.components[2] === v.components[2];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the vector.\r\n     * \r\n     * @returns {String} A string representation of the vector.\r\n     */\r\n    toString() {\r\n        return '(' + this.components[0] + ', ' + this.components[1] + ', ' +\r\n            this.components[2] + ')';\r\n    }\r\n\r\n    /**\r\n     * Normalizes a vector.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The noramlized vector.\r\n     */\r\n    static normalize(v) {\r\n        return Vector3f.divideScalar(v, v.length());\r\n    }\r\n\r\n    /**\r\n     * Multiplies two vectors.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The product of the two vectors.\r\n     */\r\n    static multiply(u, v) {\r\n        return new Vector3f(u.components[0] * v.components[0],\r\n            u.components[1] * v.components[1],\r\n            u.components[2] * v.components[2]);\r\n    }\r\n\r\n    /**\r\n     * Multiplies a vector with a scalar.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} v A vector. \r\n     * @param {Number} s A scalar.\r\n     * @returns {Vector3f} The vector multiplied by the scalar.\r\n     */\r\n    static multiplyScalar(v, s) {\r\n        return new Vector3f(v.components[0] * s,\r\n            v.components[1] * s,\r\n            v.components[2] * s);\r\n    }\r\n\r\n    /**\r\n     * Divides a vector by another vector (u / v).\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The fraction vector.\r\n     */\r\n    static divide(u, v) {\r\n        return new Vector3f(u.components[0] / v.components[0],\r\n            u.components[1] / v.components[1],\r\n            u.components[2] / v.components[2]);\r\n    }\r\n\r\n    /**\r\n     * Divides a vector by a scalar.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} v A vector. \r\n     * @param {Number} s A scalar.\r\n     * @returns {Vector3f} The vector divided by the scalar.\r\n     */\r\n    static divideScalar(v, s) {\r\n        return new Vector3f(v.components[0] / s,\r\n            v.components[1] / s,\r\n            v.components[2] / s);\r\n    }\r\n\r\n    /**\r\n     * Sums two vectors.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The sum of the two vectors.\r\n     */\r\n    static add(u, v) {\r\n        return new Vector3f(u.components[0] + v.components[0],\r\n            u.components[1] + v.components[1],\r\n            u.components[2] + v.components[2]);\r\n    }\r\n\r\n    /**\r\n     * Subtracts one vector from another (u - v)\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The difference between the two vectors.\r\n     */\r\n    static subtract(u, v) {\r\n        return new Vector3f(u.components[0] - v.components[0],\r\n            u.components[1] - v.components[1],\r\n            u.components[2] - v.components[2]);\r\n    }\r\n\r\n    /**\r\n     * Calculates the cross product of two vectors.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The cross product of the two vectors.\r\n     */\r\n    static cross(u, v) {\r\n        return new Vector3f(\r\n            u.components[1] * v.components[2] - u.components[2] * v.components[1],\r\n            u.components[2] * v.components[0] - u.components[0] * v.components[2],\r\n            u.components[0] * v.components[1] - u.components[1] * v.components[0]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Calculates the dot product of two vectors.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Number} The dot product of the two vectors.\r\n     */\r\n    static dot(u, v) {\r\n        return u.components[0] * v.components[0] +\r\n            u.components[1] * v.components[1] +\r\n            u.components[2] * v.components[2];\r\n    }\r\n\r\n    /**\r\n     * Calculates the midpoint between two vectors.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The midpoint between the two vectors.\r\n     */\r\n     static midpoint(u, v) {\r\n        return new Vector3f(\r\n            u.components[0] + v.components[0] / 2.0,\r\n            u.components[1] + v.components[1] / 2.0,\r\n            u.components[2] + v.components[2] / 2.0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns the forward vector (0, 0, 1).\r\n     * \r\n     * @static\r\n     * @returns {Vector3f} The forward vector.\r\n     */\r\n    static forward() {\r\n        return new Vector3f(0, 0, 1);\r\n    }\r\n\r\n    /**\r\n     * Returns the up vector (0, 1, 0).\r\n     * \r\n     * @static\r\n     * @returns {Vector3f} The up vector.\r\n     */\r\n    static up() {\r\n        return new Vector3f(0, 1, 0);\r\n    }\r\n\r\n    /**\r\n     * Returns the right vector (1, 0, 0).\r\n     * \r\n     * @static\r\n     * @returns {Vector3f} The right vector.\r\n     */\r\n    static right() {\r\n        return new Vector3f(1, 0, 0);\r\n    }\r\n}\r\n\r\nmodule.exports = Vector3f\r\n","const Matrix3f = require('./Matrix3f');\r\nconst Matrix4f = require('./Matrix4f');\r\nconst ProjectionMatrix = require('./ProjectionMatrix');\r\nconst Quaternion = require('./Quaternion');\r\nconst RadixSort = require('./RadixSort');\r\nconst Ray = require('./Ray');\r\nconst SphericalCoords = require('./SphericalCoords');\r\nconst Statistics = require('./Statistics');\r\nconst Vector3f = require('./Vector3f');\r\n\r\nmodule.exports = {\r\n  Matrix3f,\r\n  Matrix4f,\r\n  ProjectionMatrix,\r\n  Quaternion,\r\n  RadixSort,\r\n  Ray,\r\n  SphericalCoords,\r\n  Statistics,\r\n  Vector3f\r\n}","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('circle', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                           cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                           clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                           fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 floatToRgb(float n) {',\r\n        'float b = floor(n / 65536.0);',\r\n        'float g = floor((n - b * 65536.0) / 256.0);',\r\n        'float r = floor(n - b * 65536.0 - g * 256.0);',\r\n        'return vec3(r / 255.0, g / 255.0, b / 255.0);',\r\n    '}',\r\n    'void main() {',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0 || mv_pos.z > 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = point_size * size;',\r\n        'vColor = floatToRgb(color.r);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'float rand(vec2 co) {',\r\n        'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\r\n    '}',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'vec3 N;',\r\n        'N.xy = gl_PointCoord * 2.0 - vec2(1.0);',\r\n        'float mag = dot(N.xy, N.xy);',\r\n        'if (mag > 1.0) discard;   // discard fragments outside circle',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'gl_FragColor = mix(clearColor, vec4(vColor, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('coordinates', 1, { }, [\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'void main() {',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'gl_PointSize = 1.0;',\r\n        'vColor = color;',\r\n    '}'\r\n], [\r\n    'varying vec3 vColor;',\r\n    'void main() {',\r\n        'gl_FragColor = vec4(vColor, 1.0);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('default', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                            type: new Uniform('type', 0.0, 'float'),\r\n                                            cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                            clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                            fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 floatToRgb(float n) {',\r\n        'float b = floor(n / 65536.0);',\r\n        'float g = floor((n - b * 65536.0) / 256.0);',\r\n        'float r = floor(n - b * 65536.0 - g * 256.0);',\r\n        'return vec3(r / 255.0, g / 255.0, b / 255.0);',\r\n    '}',\r\n    'float rand(vec2 co) {',\r\n        'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\r\n    '}',\r\n    'void main() {',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = point_size * size;',\r\n        'vColor = floatToRgb(color.r);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'gl_FragColor = mix(clearColor, vec4(vColor, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('defaultAnimated', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                                    cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                                    time: new Uniform('time', 0.0, 'float'),\r\n                                                    clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                                    fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'uniform float time;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 rgb2hsv(vec3 c) {',\r\n        'vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);',\r\n        'vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));',\r\n        'vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));',\r\n\r\n        'float d = q.x - min(q.w, q.y);',\r\n        'float e = 1.0e-10;',\r\n        'return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);',\r\n    '}',\r\n    'vec3 hsv2rgb(vec3 c) {',\r\n        'vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);',\r\n        'vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);',\r\n        'return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);',\r\n    '}',\r\n    'void main() {',\r\n        'vec3 hsv = vec3(color.r, color.g, 1.0);',\r\n        'float saturation = color.g;',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = size;',\r\n        'hsv.g *= max(0.15, abs(sin(time * 0.002)));',\r\n        'vColor = hsv2rgb(hsv);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'gl_FragColor = mix(clearColor, vec4(vColor, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('defaultEffect', 1, {}, [\r\n    'attribute vec2 v_coord;',\r\n    'uniform sampler2D fbo_texture;',\r\n    'varying vec2 f_texcoord;',\r\n    'void main() {',\r\n        'gl_Position = vec4(v_coord, 0.0, 1.0);',\r\n        'f_texcoord = (v_coord + 1.0) / 2.0;',\r\n    '}'\r\n], [\r\n    'uniform sampler2D fbo_texture;',\r\n    'varying vec2 f_texcoord;',\r\n    'void main(void) {',\r\n        'vec4 color = texture2D(fbo_texture, f_texcoord);',\r\n        'gl_FragColor = color;',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('FXAAEffect', 1, { resolution: new Uniform('resolution', [ 500.0, 500.0 ], 'float_vec2') }, [\r\n    'attribute vec2 v_coord;',\r\n    'uniform sampler2D fbo_texture;',\r\n    'uniform vec2 resolution;',\r\n    'varying vec2 f_texcoord;',\r\n    'void main() {',\r\n        'gl_Position = vec4(v_coord, 0.0, 1.0);',\r\n        'f_texcoord = (v_coord + 1.0) / 2.0;',\r\n    '}'\r\n], /*\r\n[\r\n    '#define FXAA_REDUCE_MIN   (1.0/ 128.0)',\r\n    '#define FXAA_REDUCE_MUL   (1.0 / 8.0)',\r\n    '#define FXAA_SPAN_MAX     8.0',\r\n\r\n    'vec4 applyFXAA(vec2 fragCoord, sampler2D tex, vec2 resolution)',\r\n    '{',\r\n        'fragCoord = fragCoord * resolution;',\r\n        'vec2 inverseVP = vec2(1.0 / 500.0, 1.0 / 500.0);',\r\n        'vec3 rgbNW = texture2D(tex, (fragCoord.xy + vec2(-1.0, -1.0)) * inverseVP).xyz;',\r\n        'vec3 rgbNE = texture2D(tex, (fragCoord.xy + vec2(1.0, -1.0)) * inverseVP).xyz;',\r\n        'vec3 rgbSW = texture2D(tex, (fragCoord.xy + vec2(-1.0, 1.0)) * inverseVP).xyz;',\r\n        'vec3 rgbSE = texture2D(tex, (fragCoord.xy + vec2(1.0, 1.0)) * inverseVP).xyz;',\r\n        'vec4 rgbaM  = texture2D(tex, fragCoord.xy  * inverseVP);',\r\n        'vec3 rgbM = rgbaM.xyz;',\r\n        'float opacity = rgbaM.w;',\r\n        'vec3 luma = vec3(0.299, 0.587, 0.114);',\r\n        'float lumaNW = dot(rgbNW, luma);',\r\n        'float lumaNE = dot(rgbNE, luma);',\r\n        'float lumaSW = dot(rgbSW, luma);',\r\n        'float lumaSE = dot(rgbSE, luma);',\r\n        'float lumaM  = dot(rgbM,  luma);',\r\n        'float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));',\r\n        'float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));',\r\n\r\n        'vec2 dir;',\r\n        'dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));',\r\n        'dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));',\r\n\r\n        'float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);',\r\n        'float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);',\r\n\r\n        'dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * inverseVP;',\r\n\r\n        'vec3 rgbA = 0.5 * (texture2D(tex, fragCoord.xy * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +',\r\n                           'texture2D(tex, fragCoord.xy * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);',\r\n\r\n        'vec3 rgbB = rgbA * 0.5 + 0.25 * (texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +',\r\n                                         'texture2D(tex, fragCoord.xy * inverseVP + dir * 0.5).xyz);',\r\n\r\n        'float lumaB = dot(rgbB, luma);',\r\n        'if ((lumaB < lumaMin) || (lumaB > lumaMax))',\r\n            'return vec4(rgbA, 1.0);',\r\n        'else',\r\n            'return vec4(rgbB, 1.0);',\r\n    '}',\r\n\r\n    'uniform sampler2D fbo_texture;',\r\n    'varying vec2 f_texcoord;',\r\n    'void main(void) {',\r\n        'gl_FragColor = applyFXAA(f_texcoord, fbo_texture, vec2(500.0, 500.0));',\r\n    '}'\r\n]);\r\n*/\r\n[\r\n    '#define fxaaTexture2D(t, p, o, r) texture2D(t, p + (o * r), 0.0)',\r\n    '#define fxaaSat(x) clamp(x, 0.0, 1.0)',\r\n\r\n    '#define FXAA_QUALITY_PS 8',\r\n    '#define FXAA_QUALITY_P0 1.0',\r\n    '#define FXAA_QUALITY_P1 1.5',\r\n    '#define FXAA_QUALITY_P2 2.0',\r\n    '#define FXAA_QUALITY_P3 2.0',\r\n    '#define FXAA_QUALITY_P4 2.0',\r\n    '#define FXAA_QUALITY_P5 2.0',\r\n    '#define FXAA_QUALITY_P6 4.0',\r\n    '#define FXAA_QUALITY_P7 12.0',\r\n\r\n    'vec4 fxaa(vec2 pos, sampler2D tex, vec2 resolution,',\r\n          'float subpixQuality, float edgeThreshold, float edgeThresholdMin) {',\r\n        'vec2 posM;',\r\n        'posM.x = pos.x;',\r\n        'posM.y = pos.y;',\r\n\r\n        'vec4 rgbyM = texture2D(tex, posM);',\r\n        'vec3 luma = vec3(0.299, 0.587, 0.114);',\r\n        'float lumaM = dot(rgbyM.xyz, luma);',\r\n\r\n        'float lumaS = dot(fxaaTexture2D(tex, posM, vec2(0, 1), resolution.xy).xyz, luma);',\r\n        'float lumaE = dot(fxaaTexture2D(tex, posM, vec2(1, 0), resolution.xy).xyz, luma);',\r\n        'float lumaN = dot(fxaaTexture2D(tex, posM, vec2(0, -1), resolution.xy).xyz, luma);',\r\n        'float lumaW = dot(fxaaTexture2D(tex, posM, vec2(-1, 0), resolution.xy).xyz, luma);',\r\n\r\n        'float maxSM = max(lumaS, lumaM);',\r\n        'float minSM = min(lumaS, lumaM);',\r\n        'float maxESM = max(lumaE, maxSM);',\r\n        'float minESM = min(lumaE, minSM);',\r\n        'float maxWN = max(lumaN, lumaW);',\r\n        'float minWN = min(lumaN, lumaW);',\r\n        'float rangeMax = max(maxWN, maxESM);',\r\n        'float rangeMin = min(minWN, minESM);',\r\n        'float rangeMaxScaled = rangeMax * edgeThreshold;',\r\n        'float range = rangeMax - rangeMin;',\r\n        'float rangeMaxClamped = max(edgeThresholdMin, rangeMaxScaled);',\r\n        'bool earlyExit = range < rangeMaxClamped;',\r\n        \r\n        '// maybe return rgbyM -> leave unchanged',\r\n        'if(earlyExit) return rgbyM;',\r\n\r\n        'float lumaNW = dot(fxaaTexture2D(tex, posM, vec2(-1, -1), resolution.xy).xyz, luma);',\r\n        'float lumaSE = dot(fxaaTexture2D(tex, posM, vec2(1, 1), resolution.xy).xyz, luma);',\r\n        'float lumaNE = dot(fxaaTexture2D(tex, posM, vec2(1, -1), resolution.xy).xyz, luma);',\r\n        'float lumaSW = dot(fxaaTexture2D(tex, posM, vec2(-1, 1), resolution.xy).xyz, luma);',\r\n\r\n        'float lumaNS = lumaN + lumaS;',\r\n        'float lumaWE = lumaW + lumaE;',\r\n        'float subpixRcpRange = 1.0 / range;',\r\n        'float subpixNSWE = lumaNS + lumaWE;',\r\n        'float edgeHorz1 = (-2.0 * lumaM) + lumaNS;',\r\n        'float edgeVert1 = (-2.0 * lumaM) + lumaWE;',\r\n\r\n        'float lumaNESE = lumaNE + lumaSE;',\r\n        'float lumaNWNE = lumaNW + lumaNE;',\r\n        'float edgeHorz2 = (-2.0 * lumaE) + lumaNESE;',\r\n        'float edgeVert2 = (-2.0 * lumaN) + lumaNWNE;',\r\n\r\n        'float lumaNWSW = lumaNW + lumaSW;',\r\n        'float lumaSWSE = lumaSW + lumaSE;',\r\n        'float edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);',\r\n        'float edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);',\r\n        'float edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;',\r\n        'float edgeVert3 = (-2.0 * lumaS) + lumaSWSE;',\r\n        'float edgeHorz = abs(edgeHorz3) + edgeHorz4;',\r\n        'float edgeVert = abs(edgeVert3) + edgeVert4;',\r\n\r\n        'float subpixNWSWNESE = lumaNWSW + lumaNESE;',\r\n        'float lengthSign = resolution.x;',\r\n        'bool horzSpan = edgeHorz >= edgeVert;',\r\n        'float subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;',\r\n\r\n        'if(!horzSpan) lumaN = lumaW;',\r\n        'if(!horzSpan) lumaS = lumaE;',\r\n        'if(horzSpan) lengthSign = resolution.y;',\r\n        'float subpixB = (subpixA * (1.0/12.0)) - lumaM;',\r\n\r\n        'float gradientN = lumaN - lumaM;',\r\n        'float gradientS = lumaS - lumaM;',\r\n        'float lumaNN = lumaN + lumaM;',\r\n        'float lumaSS = lumaS + lumaM;',\r\n        'bool pairN = abs(gradientN) >= abs(gradientS);',\r\n        'float gradient = max(abs(gradientN), abs(gradientS));',\r\n        'if(pairN) lengthSign = -lengthSign;',\r\n        'float subpixC = fxaaSat(abs(subpixB) * subpixRcpRange);',\r\n\r\n        'vec2 posB;',\r\n        'posB.x = posM.x;',\r\n        'posB.y = posM.y;',\r\n        'vec2 offNP;',\r\n        'offNP.x = (!horzSpan) ? 0.0 : resolution.x;',\r\n        'offNP.y = ( horzSpan) ? 0.0 : resolution.y;',\r\n        'if(!horzSpan) posB.x += lengthSign * 0.5;',\r\n        'if( horzSpan) posB.y += lengthSign * 0.5;',\r\n\r\n        'vec2 posN;',\r\n        'posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;',\r\n        'posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;',\r\n        'vec2 posP;',\r\n        'posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;',\r\n        'posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;',\r\n        'float subpixD = ((-2.0)*subpixC) + 3.0;',\r\n        'float lumaEndN = texture2D(tex, posN).w;',\r\n        'float subpixE = subpixC * subpixC;',\r\n        'float lumaEndP = texture2D(tex, posP).w;',\r\n\r\n        'if(!pairN) lumaNN = lumaSS;',\r\n        'float gradientScaled = gradient * 1.0/4.0;',\r\n        'float lumaMM = lumaM - lumaNN * 0.5;',\r\n        'float subpixF = subpixD * subpixE;',\r\n        'bool lumaMLTZero = lumaMM < 0.0;',\r\n\r\n        'lumaEndN -= lumaNN * 0.5;',\r\n        'lumaEndP -= lumaNN * 0.5;',\r\n        'bool doneN = abs(lumaEndN) >= gradientScaled;',\r\n        'bool doneP = abs(lumaEndP) >= gradientScaled;',\r\n        'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;',\r\n        'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;',\r\n        'bool doneNP = (!doneN) || (!doneP);',\r\n        'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;',\r\n        'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;',\r\n\r\n        'if(doneNP) {',\r\n            'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n            'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n            'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            'doneN = abs(lumaEndN) >= gradientScaled;',\r\n            'doneP = abs(lumaEndP) >= gradientScaled;',\r\n            'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;',\r\n            'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;',\r\n            'doneNP = (!doneN) || (!doneP);',\r\n            'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;',\r\n            'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;',\r\n\r\n            '#if (FXAA_QUALITY_PS > 3)',\r\n            'if(doneNP) {',\r\n                'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;',\r\n                'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;',\r\n                'doneNP = (!doneN) || (!doneP);',\r\n                'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;',\r\n                'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;',\r\n\r\n                '#if (FXAA_QUALITY_PS > 4)',\r\n                'if(doneNP) {',\r\n                    'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                    'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                    'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                    'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                    'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                    'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                    'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;',\r\n                    'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;',\r\n                    'doneNP = (!doneN) || (!doneP);',\r\n                    'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;',\r\n                    'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;',\r\n\r\n                    '#if (FXAA_QUALITY_PS > 5)',\r\n                    'if(doneNP) {',\r\n                        'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                        'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                        'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                        'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                        'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                        'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                        'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;',\r\n                        'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;',\r\n                        'doneNP = (!doneN) || (!doneP);',\r\n                        'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;',\r\n                        'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;',\r\n\r\n                        '#if (FXAA_QUALITY_PS > 6)',\r\n                        'if(doneNP) {',\r\n                            'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                            'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                            'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                            'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                            'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                            'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                            'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;',\r\n                            'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;',\r\n                            'doneNP = (!doneN) || (!doneP);',\r\n                            'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;',\r\n                            'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;',\r\n\r\n                            '#if (FXAA_QUALITY_PS > 7)',\r\n                            'if(doneNP) {',\r\n                                'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                                'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                                'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                                'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                                'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                                'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                                'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;',\r\n                                'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;',\r\n                                'doneNP = (!doneN) || (!doneP);',\r\n                                'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;',\r\n                                'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;',\r\n\r\n        '#if (FXAA_QUALITY_PS > 8)',\r\n        'if(doneNP) {',\r\n            'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n            'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n            'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            'doneN = abs(lumaEndN) >= gradientScaled;',\r\n            'doneP = abs(lumaEndP) >= gradientScaled;',\r\n            'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;',\r\n            'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;',\r\n            'doneNP = (!doneN) || (!doneP);',\r\n            'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;',\r\n            'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;',\r\n\r\n            '#if (FXAA_QUALITY_PS > 9)',\r\n            'if(doneNP) {',\r\n                'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;',\r\n                'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;',\r\n                'doneNP = (!doneN) || (!doneP);',\r\n                'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;',\r\n                'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;',\r\n\r\n                '#if (FXAA_QUALITY_PS > 10)',\r\n                'if(doneNP) {',\r\n                    'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                    'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                    'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                    'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                    'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                    'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                    'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;',\r\n                    'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;',\r\n                    'doneNP = (!doneN) || (!doneP);',\r\n                    'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;',\r\n                    'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;',\r\n\r\n                    '#if (FXAA_QUALITY_PS > 11)',\r\n                    'if(doneNP) {',\r\n                        'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                        'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                        'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                        'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                        'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                        'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                        'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;',\r\n                        'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;',\r\n                        'doneNP = (!doneN) || (!doneP);',\r\n                        'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;',\r\n                        'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;',\r\n\r\n                        '#if (FXAA_QUALITY_PS > 12)',\r\n                        'if(doneNP) {',\r\n                            'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                            'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                            'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                            'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                            'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                            'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                            'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;',\r\n                            'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;',\r\n                            'doneNP = (!doneN) || (!doneP);',\r\n                            'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;',\r\n                            'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;',\r\n                        '}',\r\n                        '#endif',\r\n                    '}',\r\n                    '#endif',\r\n                '}',\r\n                '#endif',\r\n            '}',\r\n            '#endif',\r\n        '}',\r\n        '#endif',\r\n                            '}',\r\n                            '#endif',\r\n                        '}',\r\n                        '#endif',\r\n                    '}',\r\n                    '#endif',\r\n                '}',\r\n                '#endif',\r\n\r\n            '}',\r\n            '#endif',\r\n        '}',\r\n\r\n        'float dstN = posM.x - posN.x;',\r\n        'float dstP = posP.x - posM.x;',\r\n        'if(!horzSpan) dstN = posM.y - posN.y;',\r\n        'if(!horzSpan) dstP = posP.y - posM.y;',\r\n\r\n        'bool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;',\r\n        'float spanLength = (dstP + dstN);',\r\n        'bool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;',\r\n        'float spanLengthRcp = 1.0 / spanLength;',\r\n\r\n        'bool directionN = dstN < dstP;',\r\n        'float dst = min(dstN, dstP);',\r\n        'bool goodSpan = directionN ? goodSpanN : goodSpanP;',\r\n        'float subpixG = subpixF * subpixF;',\r\n        'float pixelOffset = (dst * (-spanLengthRcp)) + 0.5;',\r\n        'float subpixH = subpixG * subpixQuality;',\r\n\r\n        'float pixelOffsetGood = goodSpan ? pixelOffset : 0.0;',\r\n        'float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);',\r\n        'if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;',\r\n        'if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;',\r\n\r\n        '// maybe return vec4(texture2D(tex, posM).xyz, lumaM);',\r\n        'return texture2D(tex, posM);',\r\n    '}',\r\n\r\n    'uniform sampler2D fbo_texture;',\r\n    'uniform vec2 resolution;',\r\n    'varying vec2 f_texcoord;',\r\n    'void main(void) {',\r\n        'gl_FragColor = fxaa(f_texcoord, fbo_texture, vec2(1.0 / resolution.x, 1.0 / resolution.y), 0.75, 0.166, 0.0833);',\r\n    '}'\r\n]);","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('simpleSphere', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                                 cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                                 clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                                 fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 floatToRgb(float n) {',\r\n        'float b = floor(n / 65536.0);',\r\n        'float g = floor((n - b * 65536.0) / 256.0);',\r\n        'float r = floor(n - b * 65536.0 - g * 256.0);',\r\n        'return vec3(r / 255.0, g / 255.0, b / 255.0);',\r\n    '}',\r\n    'void main() {',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0 || mv_pos.z > 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = point_size * size;',\r\n        'vColor = floatToRgb(color.r);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'float rand(vec2 co) {',\r\n        'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\r\n    '}',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'vec3 N;',\r\n        'N.xy = gl_PointCoord * 2.0 - vec2(1.0);',\r\n        'float mag = dot(N.xy, N.xy);',\r\n        'if (mag > 1.0) discard;   // discard fragments outside circle',\r\n        'N.z = sqrt(1.0 - mag);',\r\n        'vec3 light_dir = vec3(0.25, -0.25, 1.0);',\r\n        'float diffuse = max(0.25, dot(light_dir, N));',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'vec3 color = vColor * diffuse;',\r\n        'gl_FragColor = mix(clearColor, vec4(color, 1.0), fog_factor);',\r\n    '}'\r\n], 'circle');\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('smoothCircle', 2, { size: new Uniform('size', 5.0, 'float'),\r\n                                                 cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                                 clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                                 fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'in vec3 position;',\r\n    'in vec3 color;',\r\n    'out vec3 vColor;',\r\n    'out float vDiscard;',\r\n    'vec3 floatToRgb(float n) {',\r\n        'float b = floor(n / 65536.0);',\r\n        'float g = floor((n - b * 65536.0) / 256.0);',\r\n        'float r = floor(n - b * 65536.0 - g * 256.0);',\r\n        'return vec3(r / 255.0, g / 255.0, b / 255.0);',\r\n    '}',\r\n    'void main() {',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0 || mv_pos.z > 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = point_size * size;',\r\n        'vColor = floatToRgb(color.r);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'in vec3 vColor;',\r\n    'in float vDiscard;',\r\n    'out vec4 fragColor;',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'float dist = distance(gl_PointCoord, vec2(0.5)) * 1.25;',\r\n        'float delta = fwidth(dist);',\r\n        'float a = 1.0 - smoothstep(0.5 - delta, 0.5 + delta, dist);',\r\n        'fragColor = vec4(vColor, a);',\r\n        'if (fogDensity > 0.0) {',\r\n            'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n            'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n            'fragColor = mix(vec4(clearColor.rgb, a), fragColor, fog_factor);',\r\n        '}',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('sphere', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                           cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                           clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 0.0], 'float_vec4'),\r\n                                           fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 floatToRgb(float n) {',\r\n        'float b = floor(n / 65536.0);',\r\n        'float g = floor((n - b * 65536.0) / 256.0);',\r\n        'float r = floor(n - b * 65536.0 - g * 256.0);',\r\n        'return vec3(r / 255.0, g / 255.0, b / 255.0);',\r\n    '}',\r\n    'void main() {',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0 || mv_pos.z > 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = point_size * size;',\r\n        'vColor = floatToRgb(color.r);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'float rand(vec2 co) {',\r\n        'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\r\n    '}',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'vec3 N;',\r\n        'N.xy = gl_PointCoord * 2.0 - vec2(1.0);',\r\n        'float mag = dot(N.xy, N.xy);',\r\n        'if (mag > 1.0) discard;   // discard fragments outside circle',\r\n        'N.z = sqrt(1.0 - mag);',\r\n        'vec3 light_dir = vec3(0.25, -0.25, 1.0);',\r\n        'float diffuse = max(0.25, dot(light_dir, N));',\r\n        'vec3 v = normalize(vec3(0.1, -0.2, 1.0));',\r\n        'vec3 h = normalize(light_dir + v);',\r\n        'float specular = pow(max(0.0, dot(N, h)), 100.0);',\r\n        '// specular += 0.1 * rand(gl_PointCoord);',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'vec3 color = vColor * diffuse + specular * 0.5;',\r\n        'gl_FragColor = mix(clearColor, vec4(color, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('tree', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                         cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                         clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                         fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 floatToRgb(float n) {',\r\n        'float b = floor(n / 65536.0);',\r\n        'float g = floor((n - b * 65536.0) / 256.0);',\r\n        'float r = floor(n - b * 65536.0 - g * 256.0);',\r\n        'return vec3(r / 255.0, g / 255.0, b / 255.0);',\r\n    '}',\r\n    'void main() {',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'vColor = floatToRgb(color.r);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'gl_FragColor = mix(clearColor, vec4(vColor, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","var circle = require('./Circle');\r\nvar coordinates = require('./Coordinates');\r\nvar defaultSquare = require('./Default');\r\nvar defaultAnimated = require('./DefaultAnimated');\r\nvar defaultEffect = require('./DefaultEffect');\r\nvar simpleSphere = require('./SimpleSphere');\r\nvar smoothCircle = require('./SmoothCircle');\r\nvar sphere = require('./Sphere');\r\nvar tree = require('./Tree');\r\nvar fxaaEffect = require('./FXAAEffect');\r\n\r\nmodule.exports = {\r\n  circle,\r\n  coordinates,\r\n  defaultSquare,\r\n  defaultAnimated,\r\n  defaultEffect,\r\n  simpleSphere,\r\n  smoothCircle,\r\n  sphere,\r\n  tree,\r\n  fxaaEffect\r\n}","//@ts-check\r\n\r\nconst Vector3f = require('../Math/Vector3f');\r\n\r\n/**\r\n* @class\r\n* Axis-aligned bounding boxes with the constraint that they are cubes with equal sides.\r\n* @property {Vector3f} center - The center of this axis-aligned bounding box.\r\n* @property {number} radius - The radius of this axis-aligned bounding box.\r\n* @property {number} locCode - The location code of this axis-aligned bounding box in the octree.\r\n* @property {number} left - The distance of the left plane to the world ZY plane.\r\n* @property {number} right - The distance of the right plane to the world ZY plane.\r\n* @property {number} back - The distance of the back plane to the world XY plane.\r\n* @property {number} front - The distance of the front plane to the world XY plane.\r\n* @property {number} bottom - The distance of the bottom plane to the world XZ plane.\r\n* @property {number} top - The distance of the top plane to the world XZ plane.\r\n* @property {Array} neighbours - The neighbours of this axis-aligned bounding box in an an octree.\r\n* @property {Float32Array} min - An array specifying the minimum corner point (x, y, z) of the axis-aligned bounding box.\r\n* @property {Float32Array} max - An array specifying the maximum corner point (x, y, z) of the axis-aligned bounding box.\r\n* @constructor\r\n* @param {Vector3f} center - A radius for this axis-aligned bounding box.\r\n* @param {number} radius - A radius for this axis-aligned bounding box.\r\n*/\r\nclass AABB {\r\n    \r\n    constructor(center, radius) {\r\n        this.center = center || new Vector3f(0.0, 0.0, 0.0);\r\n        this.radius = radius || 0;\r\n        this.locCode = 0;\r\n        this.left = 0;\r\n        this.right = 0;\r\n        this.back = 0;\r\n        this.front = 0;\r\n        this.bottom = 0;\r\n        this.top = 0;\r\n        this.neighbours = new Array(6);\r\n        this.min = new Float32Array(3);\r\n        this.max = new Float32Array(3);\r\n\r\n        this.updateDimensions();\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance of the axis-aligned bounding box's planes to the world planes.\r\n     */\r\n    updateDimensions() {\r\n        let cx = this.center.components[0];\r\n        let cy = this.center.components[1];\r\n        let cz = this.center.components[2];\r\n\r\n        this.min[0] = cx - this.radius;\r\n        this.min[1] = cy - this.radius;\r\n        this.min[2] = cz - this.radius;\r\n        this.max[0] = cx + this.radius;\r\n        this.max[1] = cy + this.radius;\r\n        this.max[2] = cz + this.radius;\r\n\r\n        // Precalculate to simplify ray test\r\n        this.left = cx - this.radius;\r\n        this.right = cx + this.radius;\r\n        this.back = cz - this.radius;\r\n        this.front = cz + this.radius;\r\n        this.bottom = cy - this.radius;\r\n        this.top = cy + this.radius;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the location code of this axis-aligned bounding box.\r\n     * \r\n     * @param {number} locCode - The location code.\r\n     */\r\n    setLocCode(locCode) {\r\n        this.locCode = locCode;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the location code of this axis-aligned bounding box.\r\n     * \r\n     * @returns {number} The location code.\r\n     */\r\n    getLocCode() {\r\n        return this.locCode;\r\n    }\r\n\r\n    /**\r\n     * Tests whether or not this axis-aligned bounding box is intersected by a ray.\r\n     * \r\n     * @param {Vector3f} source - The source of the ray.\r\n     * @param {Vector3f} inverseDir - A normalized vector of the direction of the ray.\r\n     * @param {number} dist - The maximum distance from the source that still counts as an intersect (the far property of the Lore.Raycaster object).\r\n     * @returns {boolean} - Whether or not there is an intersect.\r\n     */\r\n    rayTest(source, inverseDir, dist) {\r\n        // dir is the precomputed inverse of the direction of the ray,\r\n        // this means that the costly divisions can be omitted\r\n        let oc = source.components;\r\n        let ic = inverseDir.components;\r\n\r\n        let t0 = (this.left - oc[0]) * ic[0];\r\n        let t1 = (this.right - oc[0]) * ic[0];\r\n        let t2 = (this.bottom - oc[1]) * ic[1];\r\n        let t3 = (this.top - oc[1]) * ic[1];\r\n        let t4 = (this.back - oc[2]) * ic[2];\r\n        let t5 = (this.front - oc[2]) * ic[2];\r\n\r\n        let maxT = Math.min(Math.max(t0, t1), Math.max(t2, t3), Math.max(t4, t5));\r\n\r\n        // Ray intersects in reverse direction, which means\r\n        // that the box is behind the camera\r\n        if (maxT < 0) {\r\n            return false;\r\n        }\r\n\r\n        let minT = Math.max(Math.min(t0, t1), Math.min(t2, t3), Math.min(t4, t5));\r\n\r\n        if (minT > maxT || minT > dist) {\r\n            return false;\r\n        }\r\n\r\n        // Intersection happens when minT is larger or equal to maxT\r\n        // and minT is smaller than the distance (distance == radius == ray.far)\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests whether or not this axis-aligned bounding box is intersected by a cylinder. CAUTION: If this runs multi-threaded, it might fail.\r\n     * \r\n     * @param {Vector3f} source - The source of the ray.\r\n     * @param {Vector3f} inverseDir - A normalized vector of the direction of the ray.\r\n     * @param {number} dist - The maximum distance from the source that still counts as an intersect (the far property of the Lore.Raycaster object).\r\n     * @param {number} radius - The radius of the cylinder\r\n     * @returns {boolean} - Whether or not there is an intersect.\r\n     */\r\n    cylinderTest(source, inverseDir, dist, radius) {\r\n        // Instead of testing an actual cylinder against this aabb, we simply\r\n        // expand the radius of the box temporarily.\r\n        this.radius += radius;\r\n        this.updateDimensions();\r\n\r\n        // Do the normal ray intersection test\r\n        let result = this.rayTest(source, inverseDir, dist);\r\n\r\n        this.radius -= radius;\r\n        this.updateDimensions();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the square distance of this axis-aligned bounding box to the point supplied as an argument.\r\n     * \r\n     * @param {number} x - The x component of the point coordinate.\r\n     * @param {number} y - The y component of the point coordinate.\r\n     * @param {number} z - The z component of the point coordinate.\r\n     * @returns {number} The square distance of this axis-aligned bounding box to the input point.\r\n     */\r\n    distanceToPointSq(x, y, z) {\r\n        // From book, real time collision detection\r\n        let sqDist = 0;\r\n        let p = [x, y, z];\r\n        // Add the distances for each axis\r\n        for (var i = 0; i < 3; i++) {\r\n            if (p[i] < this.min[i])\r\n                sqDist += Math.pow(this.min[i] - p[i], 2);\r\n            if (p[i] > this.max[i])\r\n                sqDist += Math.pow(p[i] - this.max[i], 2);\r\n        }\r\n\r\n        return sqDist;\r\n    }\r\n\r\n    /**\r\n     * Returns the box that is closest to the point (measured from center).\r\n     * \r\n     * @param {number} x - The x component of the point coordinate.\r\n     * @param {number} y - The y component of the point coordinate.\r\n     * @param {number} z - The z component of the point coordinate.\r\n     * @returns {number} The square distance of this axis-aligned bounding box to the input point.\r\n     */\r\n    distanceFromCenterToPointSq(x, y, z) {\r\n        let center = this.center.components;\r\n\r\n        return Math.pow(center[0] - x, 2) + Math.pow(center[1] - y, 2) + Math.pow(center[2] - z, 2);\r\n    }\r\n\r\n    /**\r\n     * Tests whether or not this axis-aligned bounding box overlaps or shares an edge or a vertex with another axis-aligned bounding box.\r\n     * This method can also be used to assert whether or not two boxes are neighbours.\r\n     * \r\n     * @param {AABB} aabb - The axis-aligned bounding box to test against.\r\n     * @returns {boolean} - Whether or not there is an overlap.\r\n     */\r\n    testAABB(aabb) {\r\n        for (var i = 0; i < 3; i++) {\r\n            if (this.max[i] < aabb.min[i] || this.min[i] > aabb.max[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a axis-aligned bounding box surrounding a set of vertices.\r\n     * \r\n     * @param {Float32Array} vertices - The vertices which will all be inside the axis-aligned bounding box.\r\n     * @returns {AABB} An axis-aligned bounding box surrounding the vertices.\r\n     */\r\n    static fromPoints(vertices) {\r\n        let x = vertices[0];\r\n        let y = vertices[1];\r\n        let z = vertices[2];\r\n\r\n        let min = new Vector3f(x, y, z);\r\n        let max = new Vector3f(x, y, z);\r\n\r\n        let minc = min.components;\r\n        let maxc = max.components;\r\n\r\n        for (var i = 1; i < vertices.length / 3; i++) {\r\n            if (vertices[i * 3 + 0] < minc[0]) minc[0] = vertices[i * 3 + 0];\r\n            if (vertices[i * 3 + 1] < minc[1]) minc[1] = vertices[i * 3 + 1];\r\n            if (vertices[i * 3 + 2] < minc[2]) minc[2] = vertices[i * 3 + 2];\r\n            if (vertices[i * 3 + 0] > maxc[0]) maxc[0] = vertices[i * 3 + 0];\r\n            if (vertices[i * 3 + 1] > maxc[1]) maxc[1] = vertices[i * 3 + 1];\r\n            if (vertices[i * 3 + 2] > maxc[2]) maxc[2] = vertices[i * 3 + 2];\r\n        }\r\n\r\n        // Calculate the radius in each direction\r\n        let radii = Vector3f.subtract(max, min);\r\n        radii.multiplyScalar(0.5);\r\n\r\n        let rx = radii.components[0];\r\n        let ry = radii.components[1];\r\n        let rz = radii.components[2];\r\n\r\n        let center = new Vector3f(rx, ry, rz);\r\n        center.add(min);\r\n        // Since the octree always stores cubes, there is of course only\r\n        // one radius - take the biggest one\r\n        let radius = Math.max(rx, ry, rz);\r\n\r\n        return new AABB(center, radius);\r\n    }\r\n\r\n    /**\r\n     * Returns an array representing the 8 corners of the axis-aligned bounding box.\r\n     * \r\n     * @param {AABB} aabb An axis-aligned bounding box.\r\n     * @returns {Array} An array containing the 8 corners of the axisa-aligned bunding box. E.g [[x, y, z], [x, y, z], ...]\r\n     */\r\n    static getCorners(aabb) {\r\n        let c = aabb.center.components;\r\n        let x = c[0];\r\n        let y = c[1];\r\n        let z = c[2];\r\n        let r = aabb.radius;\r\n\r\n        return [\r\n            [x - r, y - r, z - r],\r\n            [x - r, y - r, z + r],\r\n            [x - r, y + r, z - r],\r\n            [x - r, y + r, z + r],\r\n            [x + r, y - r, z - r],\r\n            [x + r, y - r, z + r],\r\n            [x + r, y + r, z - r],\r\n            [x + r, y + r, z + r]\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * Clones an axis-aligned bounding box.\r\n     * \r\n     * @param {AABB} original - The axis-aligned bounding box to be cloned.\r\n     * @returns {AABB} The cloned axis-aligned bounding box.\r\n     */\r\n    static clone(original) {\r\n        let clone = new AABB();\r\n        clone.back = original.back;\r\n        clone.bottom = original.bottom;\r\n        clone.center = new Vector3f(original.center.components[0],\r\n            original.center.components[1], original.center.components[2]);\r\n        clone.front = original.front;\r\n        clone.left = original.left;\r\n        clone.locCode = original.locCode;\r\n        clone.max = original.max;\r\n        clone.min = original.min;\r\n        clone.radius = original.radius;\r\n        clone.right = original.right;\r\n        clone.top = original.top;\r\n\r\n        return clone;\r\n    }\r\n}\r\n\r\nmodule.exports = AABB","//@ts-check\r\n\r\nconst AABB = require('./AABB');\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst ProjectionMatrix = require('../Math/ProjectionMatrix');\r\nconst Utils = require('../Utils/Utils');\r\nconst Raycaster = require('./Raycaster');\r\nconst RadixSort = require('../Math/RadixSort');\r\n\r\n/** \r\n * @class\r\n * An octree constructed using the point cloud.\r\n * @property {number} threshold - A threshold indicating whether or not a further subdivision is needed based on the number of data points in the current node.\r\n * @property {number} maxDepth - A maximum depth of the octree.\r\n * @property {Object} points - An object storing the points belonging to each node indexed by the location id of the node.\r\n * @property {Object} aabbs - An object storing the axis-aligned bounding boxes belonging to each node indexed by the location id of the node.\r\n * @constructor\r\n * @param {number} threshold - A threshold indicating whether or not a further subdivision is needed based on the number of data points in the current node.\r\n * @param {number} maxDepth - A maximum depth of the octree.\r\n */\r\n\r\nclass Octree {\r\n  constructor(threshold, maxDepth) {\r\n    this.threshold = threshold || 500;\r\n    this.maxDepth = maxDepth || 8;\r\n    this.points = {};\r\n    this.aabbs = {};\r\n\r\n    this.offsets = [\r\n      [-0.5, -0.5, -0.5],\r\n      [-0.5, -0.5, +0.5],\r\n      [-0.5, +0.5, -0.5],\r\n      [-0.5, +0.5, +0.5],\r\n      [+0.5, -0.5, -0.5],\r\n      [+0.5, -0.5, +0.5],\r\n      [+0.5, +0.5, -0.5],\r\n      [+0.5, +0.5, +0.5]\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Builds the octree by assigning the indices of data points and axis-aligned bounding boxes to assoziative arrays indexed by the location code.\r\n   * @param {Uint32Array} pointIndices - An set of points that are either sub-divided into sub nodes or assigned to the current node.\r\n   * @param {Float32Array} vertices - An array containing the positions of all the vertices.\r\n   * @param {AABB} aabb - The bounding box of the current node.\r\n   * @param {number} [locCode=1] - A binary code encoding the id and the level of the current node.\r\n   */\r\n  build(pointIndices, vertices, aabb, locCode = 1) {\r\n    // Set the location code of the axis-aligned bounding box\r\n    aabb.setLocCode(locCode);\r\n\r\n    // Store the axis aligned bounding box of this node\r\n    // and set the points belonging to the node to null\r\n    this.points[locCode] = null;\r\n    this.aabbs[locCode] = aabb;\r\n\r\n    // Check if this node reaches the maximum depth or the threshold\r\n    let depth = this.getDepth(locCode);\r\n\r\n    if (pointIndices.length <= this.threshold || depth >= this.maxDepth) {\r\n      this.points[locCode] = new Uint32Array(pointIndices.length);\r\n      for (var i = 0; i < pointIndices.length; i++) {\r\n        this.points[locCode][i] = pointIndices[i];\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    let childPointCounts = new Uint32Array(8);\r\n    let codes = new Float32Array(pointIndices.length);\r\n\r\n    for (var i = 0; i < pointIndices.length; i++) {\r\n      // Points are indices to the vertices array\r\n      // which stores x,y,z coordinates linear\r\n      let k = pointIndices[i] * 3;\r\n\r\n      // Assign point to subtree, this gives a code\r\n      // 000, 001, 010, 011, 100, 101, 110, 111\r\n      // (-> 8 possible subtrees)\r\n      if (vertices[k + 0] >= aabb.center.components[0]) codes[i] |= 4;\r\n      if (vertices[k + 1] >= aabb.center.components[1]) codes[i] |= 2;\r\n      if (vertices[k + 2] >= aabb.center.components[2]) codes[i] |= 1;\r\n\r\n      childPointCounts[codes[i]]++;\r\n    }\r\n\r\n    let nextPoints = new Array(8);\r\n    let nextAabb = new Array(8);\r\n\r\n    for (var i = 0; i < 8; i++) {\r\n      if (childPointCounts[i] == 0) continue;\r\n      nextPoints[i] = new Uint32Array(childPointCounts[i]);\r\n\r\n      for (var j = 0, k = 0; j < pointIndices.length; j++) {\r\n        if (codes[j] == i) {\r\n          nextPoints[i][k++] = pointIndices[j];\r\n        }\r\n      }\r\n\r\n      let o = this.offsets[i];\r\n      let offset = new Vector3f(o[0], o[1], o[2]);\r\n      offset.multiplyScalar(aabb.radius);\r\n      nextAabb[i] = new AABB(aabb.center.clone().add(offset), 0.5 * aabb.radius);\r\n    }\r\n\r\n    for (var i = 0; i < 8; i++) {\r\n      if (childPointCounts[i] == 0) {\r\n        continue;\r\n      }\r\n\r\n      let nextLocCode = this.generateLocCode(locCode, i);\r\n      this.build(nextPoints[i], vertices, nextAabb[i], nextLocCode);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns an array containing the location codes of all the axis-aligned\r\n   * bounding boxes inside this octree.\r\n   */\r\n  getLocCodes() {\r\n    return Object.keys(this.aabbs);\r\n  }\r\n\r\n  /**\r\n   * Calculates the depth of the node from its location code.\r\n   * @param {number} locCode - A binary code encoding the id and the level of the current node.\r\n   * @returns {number} The depth of the node with the provided location code.\r\n   */\r\n  getDepth(locCode) {\r\n    // If the msb is at position 6 (e.g. 1000000) the\r\n    // depth is 2, since the locCode contains two nodes (2 x 3 bits)\r\n    return Utils.msb(locCode) / 3;\r\n  }\r\n\r\n  /**\r\n   * Generates a location code for a node based on the full code of the parent and the code of the current node.\r\n   * @param {number} parentCode The full location code of the parent node.\r\n   * @param {number} nodeCode The 3 bit code of the current node.\r\n   * @returns {number} The full location code for the current node.\r\n   */\r\n  generateLocCode(parentCode, nodeCode) {\r\n    // Insert the code of this new node, just before the msb (that is set to 1)\r\n    // of the parents code\r\n    let msb = Utils.msb(parentCode);\r\n\r\n    if (msb == -1) {\r\n      return nodeCode | 8;\r\n    } else {\r\n      // Left-shift the parent code by msb\r\n      parentCode = parentCode <<= 3;\r\n      // OR parent code with node code\r\n      return parentCode | nodeCode;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traverses the octree depth-first.\r\n   * @param {Function} traverseCallback - Is called for each node where a axis-aligned bounding box exists.\r\n   * @param {number} [locCode=1] - The location code of the node that serves as the starting node for the traversion.\r\n   */\r\n  traverse(traverseCallback, locCode = 1) {\r\n    for (var i = 0; i < 8; i++) {\r\n      let next = locCode << 3 | i;\r\n\r\n      // If it has an aabb, it exists\r\n      if (this.aabbs[next]) {\r\n        traverseCallback(this.points[next], this.aabbs[next], next);\r\n        this.traverse(traverseCallback, next);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traverses the octree depth-first, does not visit nodes / subtrees if a condition is not met.\r\n   * @param {Function} traverseIfCallback - Is called for each node where a axis-aligned bounding box exists and returns either true or false, with false stopping further exploration of the subtree.\r\n   * @param {Function} conditionCallback - Is called to test whether or not a subtree should be explored.\r\n   * @param {number} [locCode=1] - The location code of the node that serves as the starting node for the traversion.\r\n   */\r\n  traverseIf(traverseIfCallback, conditionCallback, locCode = 1) {\r\n    for (var i = 0; i < 8; i++) {\r\n      let next = locCode << 3 | i;\r\n\r\n      // If it has an aabb, it exists\r\n      if (this.aabbs[next]) {\r\n        if (!conditionCallback(this.aabbs[next], next)) {\r\n          continue;\r\n        }\r\n\r\n        traverseIfCallback(this.points[next], this.aabbs[next], next);\r\n        this.traverseIf(traverseIfCallback, conditionCallback, next);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Searches for octree nodes that are intersected by the ray and returns all the points associated with those nodes.\r\n   * @param {Raycaster} raycaster - The raycaster used for checking for intersects.\r\n   * @returns {Array} A set of points which are associated with octree nodes intersected by the ray.\r\n   */\r\n  raySearch(raycaster) {\r\n    let result = [];\r\n\r\n    // Info: shouldn't be necessary any more\r\n    // Always add the points from the root\r\n    // The root has the location code 1\r\n    // ... looks like it's still necessary\r\n    if (this.points[1]) {\r\n      for (var i = 0; i < this.points[1].length; i++) {\r\n        result.push({\r\n          index: this.points[1][i],\r\n          locCode: 1\r\n        });\r\n      }\r\n    }\r\n\r\n    // Calculate the direction, and the percentage\r\n    // of the direction, of the ray\r\n    let dir = raycaster.ray.direction.clone();\r\n    dir.normalize();\r\n\r\n    let inverseDir = new Vector3f(1, 1, 1);\r\n    inverseDir.divide(dir);\r\n\r\n    this.traverseIf(function (points, aabb, locCode) {\r\n      // If there is an aabb, that contains no points but only\r\n      // nodes, skip here\r\n      if (!points) {\r\n        return;\r\n      }\r\n\r\n      for (var i = 0; i < points.length; i++) {\r\n        result.push({\r\n          index: points[i],\r\n          locCode: locCode\r\n        });\r\n      }\r\n    }, function (aabb, locCode) {\r\n      return aabb.cylinderTest(raycaster.ray.source, inverseDir,\r\n        raycaster.far, raycaster.threshold);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns the locCodes and number of points of axis aligned bounding boxes that are intersected by a box defined by min and max vectors. Boxes not containing any points are ignored.\r\n   * @param {Vector3f} min - The minima of the box.\r\n   * @param {Vector3f} max - The maxima of the box.\r\n   * @returns {Array} An array containing locCodes and the number of points of the intersected axis aligned bounding boxes.\r\n   */\r\n  intersectBox(min, max) {\r\n    let result = [];\r\n\r\n    console.log(this.aabbs);\r\n\r\n    // console.log(min, max);\r\n\r\n    this.traverseIf(function (points, aabb, locCode) {\r\n      if (!points) {\r\n        return;\r\n      }\r\n\r\n      console.log(locCode, points.length);\r\n    }, function (aabb, locCode) {\r\n      // console.log(min, max);\r\n      // console.log(aabb);\r\n      // console.log(locCode);\r\n      return !((min.getX() < aabb.max[0]) && (max.getX() > aabb.min[0]) &&\r\n             (min.getY() < aabb.max[1]) && (max.getY() > aabb.min[1]) &&\r\n             (min.getZ() < aabb.max[2]) && (max.getZ() > aabb.min[2]));\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns an array containing all the centers of the axis-aligned bounding boxes\r\n   * in this octree that have points associated with them.\r\n   * @returns {Array} An array containing the centers as Lore.Vector3f objects.\r\n   */\r\n  getCenters(threshold) {\r\n    threshold = threshold || 0;\r\n    let centers = new Array();\r\n\r\n    this.traverse(function (points, aabb, next) {\r\n      if (points && points.length > threshold) {\r\n        centers.push(aabb.center);\r\n      }\r\n    });\r\n\r\n    return centers;\r\n  }\r\n\r\n  /**\r\n   * This function returns the closest box in the octree to the point given as an argument.\r\n   * @param {Vector3f} point - The point.\r\n   * @param {number} threshold - The minimum number of points an axis-aligned bounding box should contain to count as a hit.\r\n   * @param {number} [locCode=1] - The starting locCode, if not set, starts at the root.\r\n   * @returns {AABB} The closest axis-aligned bounding box to the input point.\r\n   */\r\n  getClosestBox(point, threshold, locCode = 1) {\r\n    let closest = -1;\r\n    let minDist = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < 8; i++) {\r\n      let next = locCode << 3 | i;\r\n\r\n      // If it has an aabb, it exists\r\n      if (this.aabbs[next]) {\r\n        // Continue if under threshold\r\n        if (this.points[next] && this.points[next].length < threshold) {\r\n          continue;\r\n        }\r\n\r\n        let dist = this.aabbs[next].distanceToPointSq(point.components[0], point.components[1], point.components[2]);\r\n        if (dist < minDist) {\r\n          minDist = dist;\r\n          closest = next;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (closest < 0) {\r\n      return this.aabbs[locCode];\r\n    } else {\r\n      return this.getClosestBox(point, threshold, closest);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This function returns the closest box in the octree to the point given as an argument. The distance measured is to the\r\n   * box center.\r\n   * @param {Vector3f} point - The point.\r\n   * @param {number} threshold - The minimum number of points an axis-aligned bounding box should contain to count as a hit.\r\n   * @param {number} [locCode=1] - The starting locCode, if not set, starts at the root.\r\n   * @returns {AABB} The closest axis-aligned bounding box to the input point.\r\n   */\r\n  getClosestBoxFromCenter(point, threshold, locCode = 1) {\r\n    let closest = -1;\r\n    let minDist = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < 8; i++) {\r\n      let next = locCode << 3 | i;\r\n\r\n      // If it has an aabb, it exists\r\n      if (this.aabbs[next]) {\r\n        // Continue if under threshold\r\n        if (this.points[next] && this.points[next].length < threshold) {\r\n          continue;\r\n        }\r\n\r\n        let dist = this.aabbs[next].distanceFromCenterToPointSq(point.components[0], point.components[1], point.components[2]);\r\n\r\n        if (dist < minDist) {\r\n          minDist = dist;\r\n          closest = next;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (closest < 0) {\r\n      return this.aabbs[locCode];\r\n    } else {\r\n      return this.getClosestBox(point, threshold, closest);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This function returns the farthest box in the octree to the point given as an argument.\r\n   * @param {Vector3f} point - The point.\r\n   * @param {number} threshold - The minimum number of points an axis-aligned bounding box should contain to count as a hit.\r\n   * @param {number} [locCode=1] - The starting locCode, if not set, starts at the root.\r\n   * @returns {AABB} The farthest axis-aligned bounding box to the input point.\r\n   */\r\n  getFarthestBox(point, threshold, locCode) {\r\n    let farthest = -1;\r\n    let maxDist = Number.MIN_VALUE;\r\n\r\n    for (var i = 0; i < 8; i++) {\r\n      let next = locCode << 3 | i;\r\n\r\n      // If it has an aabb, it exists\r\n      if (this.aabbs[next]) {\r\n        // Continue if under threshold\r\n        if (this.points[next] && this.points[next].length < threshold) {\r\n          continue;\r\n        }\r\n\r\n        let dist = this.aabbs[next].distanceToPointSq(point.components[0], point.components[1], point.components[2]);\r\n        if (dist > maxDist) {\r\n          maxDist = dist;\r\n          farthest = next;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (farthest < 0) {\r\n      return this.aabbs[locCode];\r\n    } else {\r\n      return this.getFarthestBox(point, threshold, farthest);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the closest point inside the octree to the point provided as an argument.\r\n   * @param {Vector3f} point - The point.\r\n   * @param {Float32Array} positions - An array containing the positions of the points.\r\n   * @param {number} threshold - Only consider points inside a axis-aligned bounding box with a minimum of [threshold] points.\r\n   * @param {number} locCode - If specified, the axis-aligned bounding box in which the point is searched for. If not set, all boxes are searched.\r\n   * @returns {Vector3f} The position of the closest point.\r\n   */\r\n  getClosestPoint(point, positions, threshold, locCode) {\r\n    threshold = threshold || 0;\r\n    let minDist = Number.MAX_VALUE;\r\n    let result = null;\r\n\r\n    let box = null;\r\n\r\n    if (locCode) {\r\n      box = this.aabbs[locCode];\r\n    } else {\r\n      box = this.getClosestBox(point, threshold);\r\n    }\r\n\r\n    let boxPoints = this.points[box.getLocCode()];\r\n\r\n    // If the box does not contain any points\r\n    if (!boxPoints) {\r\n      return null;\r\n    }\r\n\r\n    for (var i = 0; i < boxPoints.length; i++) {\r\n      let index = boxPoints[i];\r\n      index *= 3;\r\n      let x = positions[index];\r\n      let y = positions[index + 1];\r\n      let z = positions[index + 2];\r\n\r\n      let pc = point.components;\r\n\r\n      let distSq = Math.pow(pc[0] - x, 2) + Math.pow(pc[1] - y, 2) + Math.pow(pc[2] - z, 2);\r\n      if (distSq < minDist) {\r\n        minDist = distSq;\r\n        result = {\r\n          x: x,\r\n          y: y,\r\n          z: z\r\n        };\r\n      }\r\n    }\r\n\r\n    if (!result) {\r\n      return null;\r\n    }\r\n\r\n    return new Vector3f(result.x, result.y, result.z);\r\n  }\r\n\r\n  /**\r\n   * Finds the farthest point inside the octree to the point provided as an argument.\r\n   * @param {Vector3f} point - The point.\r\n   * @param {Float32Array} positions - An array containing the positions of the points.\r\n   * @param {number} threshold - Only consider points inside a axis-aligned bounding box with a minimum of [threshold] points.\r\n   * @param {number} locCode - If specified, the axis-aligned bounding box in which the point is searched for. If not set, all boxes are searched.\r\n   * @returns {Vector3f} The position of the farthest point.\r\n   */\r\n  getFarthestPoint(point, positions, threshold, locCode) {\r\n    threshold = threshold || 0;\r\n    let maxDist = Number.MIN_VALUE;\r\n    let result = null;\r\n\r\n    // Get farthest box\r\n    let box = null;\r\n\r\n    if (locCode) {\r\n      box = this.aabbs[locCode];\r\n    } else {\r\n      box = this.getFarthestBox(point, threshold);\r\n    }\r\n\r\n    let boxPoints = this.points[box.getLocCode()];\r\n\r\n    // If the box does not contain any points\r\n    if (!boxPoints) {\r\n      return null;\r\n    }\r\n\r\n    for (var i = 0; i < boxPoints.length; i++) {\r\n      let index = boxPoints[i];\r\n      index *= 3;\r\n      let x = positions[index];\r\n      let y = positions[index + 1];\r\n      let z = positions[index + 2];\r\n\r\n      let pc = point.components;\r\n\r\n      let distSq = Math.pow(pc[0] - x, 2) + Math.pow(pc[1] - y, 2) + Math.pow(pc[2] - z, 2);\r\n      if (distSq > maxDist) {\r\n        maxDist = distSq;\r\n        result = {\r\n          x: x,\r\n          y: y,\r\n          z: z\r\n        };\r\n      }\r\n    }\r\n\r\n    if (!result) {\r\n      return null;\r\n    }\r\n\r\n    return new Vector3f(result.x, result.y, result.z);\r\n  }\r\n\r\n  /**\r\n   * Returns the parent of a given location code by simply shifting it to the right by tree, removing the current code.\r\n   * @param {number} locCode - The location code of a node.\r\n   */\r\n  getParent(locCode) {\r\n    return locCode >>> 3;\r\n  }\r\n\r\n  /**\r\n   * Find neighbouring axis-aligned bounding boxes.\r\n   * @param {number} locCode - The location code of the axis-aligned bounding box whose neighbours will be returned\r\n   * @returns {Array} An array of location codes of the neighbouring axis-aligned bounding boxes.\r\n   */\r\n  getNeighbours(locCode) {\r\n    let self = this;\r\n    let locCodes = new Array();\r\n\r\n    this.traverseIf(function (points, aabbs, code) {\r\n      if (points && points.length > 0 && code != locCode) {\r\n        locCodes.push(code);\r\n      }\r\n    }, function (aabb, code) {\r\n      // Exit branch if this node is not a neighbour\r\n      return aabb.testAABB(self.aabbs[locCode]);\r\n    });\r\n\r\n    return locCodes;\r\n  }\r\n\r\n  /**\r\n   * Returns the k-nearest neighbours of a vertex.\r\n   * @param {number} k - The number of nearest neighbours to return.\r\n   * @param {number} point - The index of a vertex or a vertex.\r\n   * @param {number} locCode - The location code of the axis-aligned bounding box containing the vertex. If not set, the box is searched for.\r\n   * @param {Float32Array} positions - The position information for the points indexed in this octree.\r\n   * @param {Function} kNNCallback - The callback that is called after the k-nearest neighbour search has finished.\r\n   */\r\n  kNearestNeighbours(k, point, locCode, positions, kNNCallback) {\r\n    k += 1; // Account for the fact, that the point itself should be returned as well.\r\n    let length = positions.length / 3;\r\n    let p = point;\r\n\r\n    // TODO: WTF is happening here\r\n    if (!isNaN(parseFloat(point))) {\r\n      let p = {\r\n        x: positions[p * 3],\r\n        y: positions[p * 3 + 1],\r\n        z: positions[p * 3 + 2]\r\n      };\r\n    }\r\n\r\n    if (locCode === null) {\r\n      locCode = this.getClosestBoxFromCenter(new Vector3f(p.x, p.y, p.z), 0).locCode;\r\n    }\r\n\r\n    // Calculte the distances to the other cells\r\n    let cellDistances = this.getCellDistancesToPoint(p.x, p.y, p.z, locCode);\r\n\r\n    // Calculte the distances to the other points in the same cell\r\n    let pointDistances = this.pointDistancesSq(p.x, p.y, p.z, locCode, positions)\r\n\r\n    // Sort the indices according to distance\r\n    let radixSort = new RadixSort();\r\n    let sortedPointDistances = radixSort.sort(pointDistances.distancesSq, true);\r\n\r\n    // Sort the neighbours according to distance\r\n    let sortedCellDistances = radixSort.sort(cellDistances.distancesSq, true);\r\n\r\n    // Since the closest points always stay the closest points event when adding\r\n    // the points of another cell, instead of resizing the array, just define\r\n    // an offset\r\n    let pointOffset = 0;\r\n\r\n    // Get all the neighbours from this cell that are closer than the nereast box\r\n    let indexCount = 0;\r\n    let indices = new Uint32Array(k);\r\n\r\n    for (var i = 0; indexCount < k && i < sortedPointDistances.array.length; i++) {\r\n      // Break if closest neighbouring cell is closer than the closest remaining point\r\n      if (sortedPointDistances.array[i] > sortedCellDistances.array[0]) {\r\n        // Set the offset to the most distant closest member\r\n        pointOffset = i;\r\n        break;\r\n      }\r\n\r\n      indices[i] = pointDistances.indices[sortedPointDistances.indices[i]];\r\n      indexCount++;\r\n    }\r\n\r\n    // If enough neighbours have been found in the same cell, no need to continue\r\n    if (indexCount == k) {\r\n      return indices;\r\n    }\r\n\r\n    for (var i = 0; i < sortedCellDistances.array.length; i++) {\r\n      // Get the points from the cell and merge them with the already found ones\r\n      let locCode = cellDistances.locCodes[sortedCellDistances.indices[i]];\r\n      let newPointDistances = this.pointDistancesSq(p.x, p.y, p.z, locCode, positions);\r\n\r\n      pointDistances = Octree.mergePointDistances(pointDistances, newPointDistances);\r\n\r\n      // Sort the merged points\r\n      let sortedNewPointDistances = radixSort.sort(pointDistances.distancesSq, true);\r\n\r\n      for (var j = pointOffset; indexCount < k && j < sortedNewPointDistances.array.length; j++) {\r\n        if (sortedNewPointDistances.array[j] > sortedCellDistances.array[i + 1]) {\r\n          pointOffset = j;\r\n          break;\r\n        }\r\n\r\n        indices[j] = pointDistances.indices[sortedNewPointDistances.indices[j]];\r\n        indexCount++;\r\n      }\r\n\r\n      if (indexCount == k || indexCount >= length - 1) {\r\n        // kNNCallback(indices);\r\n        return indices;\r\n      }\r\n    }\r\n\r\n    //kNNCallback(indices);\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * Calculates the distances from a given point to all of the cells containing points\r\n   * @param {number} x - The x-value of the coordinate.\r\n   * @param {number} y - The y-value of the coordinate.\r\n   * @param {number} z - The z-value of the coordinate.\r\n   * @param {number} locCode - The location code of the cell containing the point.\r\n   * @returns {Object} An object containing arrays for the locCodes and the squred distances.\r\n   */\r\n  getCellDistancesToPoint(x, y, z, locCode) {\r\n    let locCodes = new Array();\r\n\r\n    this.traverse(function (points, aabb, code) {\r\n      if (points && points.length > 0 && code != locCode) {\r\n        locCodes.push(code);\r\n      }\r\n    });\r\n\r\n    let dists = new Float32Array(locCodes.length);\r\n    for (var i = 0; i < locCodes.length; i++) {\r\n      dists[i] = this.aabbs[locCodes[i]].distanceToPointSq(x, y, z);\r\n    }\r\n\r\n    return {\r\n      locCodes: locCodes,\r\n      distancesSq: dists\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Expands the current neighbourhood around the cell where the point specified by x, y, z is in.\r\n   * @param {number} x - The x-value of the coordinate.\r\n   * @param {number} y - The y-value of the coordinate.\r\n   * @param {number} z - The z-value of the coordinate.\r\n   * @param {number} locCode - The location code of the cell containing the point.\r\n   * @param {Object} cellDistances - The object containing location codes and distances.\r\n   * @returns {number} The number of added location codes.\r\n   */\r\n  expandNeighbourhood(x, y, z, locCode, cellDistances) {\r\n    let locCodes = cellDistances.locCodes;\r\n    let distancesSq = cellDistances.distancesSq;\r\n    let length = locCodes.length;\r\n\r\n    for (var i = length - 1; i >= 0; i--) {\r\n      let neighbours = this.getNeighbours(locCodes[i]);\r\n\r\n      for (var j = 0; j < neighbours.length; j++) {\r\n        if (neighbours[j] !== locCode && !Utils.arrayContains(locCodes, neighbours[j])) {\r\n          locCodes.push(neighbours[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Update the distances\r\n    let l1 = locCodes.length;\r\n    let l2 = distancesSq.length;\r\n\r\n    if (l1 === l2) {\r\n      return;\r\n    }\r\n\r\n    let dists = new Float32Array(l1 - l2);\r\n\r\n    for (var i = l2, c = 0; i < l1; i++, c++) {\r\n      dists[c] = this.aabbs[locCodes[i]].distanceToPointSq(x, y, z);\r\n    }\r\n\r\n    cellDistances.distancesSq = Utils.concatTypedArrays(distancesSq, dists);\r\n\r\n    return locCodes.length - length;\r\n  }\r\n\r\n  /**\r\n   * Returns a list of the cells neighbouring the cell with the provided locCode and the point specified by x, y and z.\r\n   * @param {number} x - The x-value of the coordinate.\r\n   * @param {number} y - The y-value of the coordinate.\r\n   * @param {number} z - The z-value of the coordinate.\r\n   * @param {number} locCode - The number of the axis-aligned bounding box.\r\n   * @returns {Object} An object containing arrays for the locCodes and the squred distances.\r\n   */\r\n  cellDistancesSq(x, y, z, locCode) {\r\n    let locCodes = this.getNeighbours(locCode);\r\n\r\n    let dists = new Float32Array(locCodes.length);\r\n\r\n    for (var i = 0; i < locCodes.length; i++) {\r\n      dists[i] = this.aabbs[locCodes[i]].distanceToPointSq(x, y, z);\r\n    }\r\n\r\n    return {\r\n      locCodes: locCodes,\r\n      distancesSq: dists\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns a list of the the squared distances of the points contained in the axis-aligned bounding box to the provided coordinates.\r\n   * @param {number} x - The x-value of the coordinate.\r\n   * @param {number} y - The y-value of the coordinate.\r\n   * @param {number} z - The z-value of the coordinate.\r\n   * @param {number} locCode - The number of the axis-aligned bounding box.\r\n   * @param {Float32Array} positions - The array containing the vertex coordinates.\r\n   * @returns {Object} An object containing arrays for the indices and distances.\r\n   */\r\n  pointDistancesSq(x, y, z, locCode, positions) {\r\n    let points = this.points[locCode];\r\n    let indices = new Uint32Array(points.length);\r\n    let dists = new Float32Array(points.length);\r\n\r\n    for (var i = 0; i < points.length; i++) {\r\n      let index = points[i] * 3;\r\n      let x2 = positions[index];\r\n      let y2 = positions[index + 1];\r\n      let z2 = positions[index + 2];\r\n\r\n      indices[i] = points[i];\r\n      dists[i] = Math.pow(x2 - x, 2) + Math.pow(y2 - y, 2) + Math.pow(z2 - z, 2);\r\n    }\r\n    return {\r\n      indices: indices,\r\n      distancesSq: dists\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Concatenates the two typed arrays a and b and returns a new array. The two arrays have to be of the same type.\r\n   * Due to performance reasons, there is no check whether the types match.\r\n   * @param {Array} a - The first array.\r\n   * @param {Array} b - The second array.\r\n   * @returns {Array} The concatenated array.\r\n   */\r\n  static concatTypedArrays(a, b) {\r\n    let c = new a.constructor(a.length + b.length);\r\n\r\n    c.set(a);\r\n    c.set(b, a.length);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * Merges the two arrays (indices and distancesSq) in the point distances object.\r\n   * @param {Object} a - The first point distances object.\r\n   * @param {Object} b - The second point distances object.\r\n   * @returns {Object} The concatenated point distances object.\r\n   */\r\n  static mergePointDistances(a, b) {\r\n    let newObj = {};\r\n\r\n    newObj.indices = Octree.concatTypedArrays(a.indices, b.indices);\r\n    newObj.distancesSq = Octree.concatTypedArrays(a.distancesSq, b.distancesSq);\r\n\r\n    return newObj;\r\n  }\r\n\r\n  /**\r\n   * Merges the two arrays (locCodes and distancesSq) in the cell distances object.\r\n   * @param {Object} a - The first cell distances object.\r\n   * @param {Object} b - The second cell distances object.\r\n   * @returns {Object} The concatenated cell distances object.\r\n   */\r\n  static mergeCellDistances(a, b) {\r\n    let newObj = {};\r\n\r\n    newObj.locCodes = Octree.concatTypedArrays(a.locCodes, b.locCodes);\r\n    newObj.distancesSq = Octree.concatTypedArrays(a.distancesSq, b.distancesSq);\r\n\r\n    return newObj;\r\n  }\r\n\r\n  /**\r\n   * Clones an octree.\r\n   * @param {Octree} original - The octree to be cloned.\r\n   * @returns {Octree} The cloned octree.\r\n   */\r\n  static clone(original) {\r\n    let clone = new Octree();\r\n\r\n    clone.threshold = original.threshold;\r\n    clone.maxDepth = original.maxDepth;\r\n    clone.points = original.points;\r\n\r\n    for (var property in original.aabbs) {\r\n      if (original.aabbs.hasOwnProperty(property)) {\r\n        clone.aabbs[property] = AABB.clone(original.aabbs[property]);\r\n      }\r\n    }\r\n\r\n    return clone;\r\n  }\r\n}\r\n\r\nmodule.exports = Octree","//@ts-check\r\n\r\nconst Ray = require('../Math/Ray');\r\nconst Matrix4f = require('../Math/Matrix4f')\r\n\r\n/** A class representing a raycaster. */\r\nclass Raycaster {\r\n  /**\r\n   * Creates an instance of Raycaster.\r\n   * \r\n   * @param {Number} [threshold=0.1] Data to be sent to the listening functions.\r\n   */\r\n    constructor(threshold = 0.1) {\r\n        this.ray = new Ray();\r\n        this.near = 0;\r\n        this.far = 1000;\r\n        this.threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * Set the raycaster based on a camera and the current mouse coordinates.\r\n     * \r\n     * @param {CameraBase} camera A camera object which extends Lore.CameraBase.\r\n     * @param {number} mouseX The x coordinate of the mouse.\r\n     * @param {number} mouseY The y coordinate of the mouse.\r\n     * @returns {Raycaster} Itself.\r\n     */\r\n    set(camera, mouseX, mouseY) {\r\n        this.near = camera.near;\r\n        this.far = camera.far;\r\n\r\n        this.ray.source.set(mouseX, mouseY, (camera.near + camera.far) / (camera.near - camera.far));\r\n        Matrix4f.unprojectVector(this.ray.source, camera);\r\n\r\n        this.ray.direction.set(0.0, 0.0, -1.0);\r\n        this.ray.direction.toDirection(camera.modelMatrix);\r\n        \r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Raycaster\r\n","const AABB = require('./AABB');\r\nconst Octree = require('./Octree');\r\nconst Raycaster = require('./Raycaster');\r\n\r\nmodule.exports = {\r\n  AABB,\r\n  Octree,\r\n  Raycaster\r\n}","//@ts-check\r\n\r\n/** A utility class containing static methods. */\r\nclass Utils {\r\n    /**\r\n     * Merges two objects, overriding probierties set in both objects in the first one.\r\n     * \r\n     * @returns {object} The merged object.\r\n     */\r\n    static extend() {\r\n        let extended = {};\r\n        let deep = false;\r\n        let i = 0;\r\n        let length = arguments.length;\r\n\r\n        if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\r\n            deep = arguments[0];\r\n            i++;\r\n        }\r\n\r\n        let merge = function (obj) {\r\n            for (let prop in obj) {\r\n                if (Object.prototype.hasOwnProperty.call(obj, prop)) {\r\n                    if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\r\n                        extended[prop] = Utils.extend(true, extended[prop], obj[prop]);\r\n                    } else {\r\n                        extended[prop] = obj[prop];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        for ( ; i < length; i++) {\r\n            let obj = arguments[i];\r\n            merge(obj);\r\n        }\r\n\r\n        return extended;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not an array contains a given value.\r\n     * \r\n     * @param {Array} array An array.\r\n     * @param {object} value An object.\r\n     * @returns {boolean} A boolean whether or not the array contains the value.\r\n     */\r\n    static arrayContains(array, value) {\r\n        for(let i = 0; i < array.length; i++) {\r\n            if(array[i] === value) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Concatinate two typed arrays.\r\n     * \r\n     * @param {Array|Float32Array} arrA A typed array.\r\n     * @param {Array|Float32Array} arrB A typed array.\r\n     * @returns {Array|Float32Array} The concatinated typed array.\r\n     */\r\n    static concatTypedArrays(arrA, arrB) {\r\n        let arrC = new arrA.constructor(arrA.length + arrB.length);\r\n        \r\n        arrC.set(arrA);\r\n        arrC.set(arrB, arrA.length);\r\n\r\n        return arrC;\r\n    };\r\n\r\n    /**\r\n     * Get the most significant bit (MSB) of a number.\r\n     * \r\n     * @param {Number} n A number. \r\n     * @returns {Number} The most significant bit (0 or 1).\r\n     */\r\n    static msb(n) {\r\n        return (n & 0x80000000) ? 31 : Utils.msb((n << 1) | 1) - 1;\r\n    }\r\n\r\n    /**\r\n     *  An utility method to merge two point distance objects containing arrays of indices and squared distances.\r\n     * \r\n     * @static\r\n     * @param {object} a An object in the form of { indices: TypedArray, distancesSq: TypedArray }.\r\n     * @param {object} b An object in the form of { indices: TypedArray, distancesSq: TypedArray }.\r\n     * @returns  {object} The object with merged indices and squared distances.\r\n     */\r\n    static mergePointDistances(a, b) {\r\n        let newObj = {};\r\n\r\n        newObj.indices = Utils.concatTypedArrays(a.indices, b.indices);\r\n        newObj.distancesSq = Utils.concatTypedArrays(a.distancesSq, b.distancesSq);\r\n        \r\n        return newObj;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not the number is an integer.\r\n     * \r\n     * @param {number} n A number.\r\n     * @returns A boolean whether or not the number is an integer.\r\n     */\r\n    static isInt(n){\r\n        return Number(n) === n && n % 1 === 0;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not the number is a float.\r\n     * \r\n     * @param {number} n A number.\r\n     * @returns A boolean whether or not the number is a float.\r\n     */\r\n    static isFloat(n){\r\n        return Number(n) === n && n % 1 !== 0;\r\n    }\r\n\r\n    /**\r\n     * A helper method enabling JSONP requests to an url.\r\n     * \r\n     * @param {String} url An url.\r\n     * @param {Function} callback The callback to be called when the data is loaded.\r\n     */\r\n    static jsonp(url, callback) {\r\n        let callbackName = 'jsonp_callback_' + Math.round(100000 * Math.random());\r\n        window[callbackName] = function(response) {\r\n            delete window[callbackName];\r\n            document.body.removeChild(script);\r\n            callback(response);\r\n        };\r\n\r\n        let script = document.createElement('script');\r\n        script.src = url + (url.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + callbackName;\r\n        document.body.appendChild(script);\r\n    }\r\n}\r\n\r\nUtils.DEG2RAD = Math.PI / 180.0;\r\n\r\nmodule.exports = Utils","const Utils = require('./Utils');\r\n\r\nmodule.exports = {\r\n  Utils\r\n}"]}